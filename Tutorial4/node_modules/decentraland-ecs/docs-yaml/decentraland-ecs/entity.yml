### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Entity
    name: Entity
    fullName: Entity
    langs:
      - typeScript
    type: class
    implements:
      - decentraland-ecs.IEntity
    package: decentraland-ecs
    children:
      - decentraland-ecs.Entity.(constructor)
      - decentraland-ecs.Entity.addComponent
      - decentraland-ecs.Entity.addComponentOrReplace
      - decentraland-ecs.Entity.alive
      - decentraland-ecs.Entity.children
      - decentraland-ecs.Entity.components
      - decentraland-ecs.Entity.eventManager
      - decentraland-ecs.Entity.getComponent
      - decentraland-ecs.Entity.getComponent_1
      - decentraland-ecs.Entity.getComponentOrCreate
      - decentraland-ecs.Entity.getComponentOrNull
      - decentraland-ecs.Entity.getComponentOrNull_1
      - decentraland-ecs.Entity.getParent
      - decentraland-ecs.Entity.hasComponent
      - decentraland-ecs.Entity.hasComponent_1
      - decentraland-ecs.Entity.hasComponent_2
      - decentraland-ecs.Entity.isAddedToEngine
      - decentraland-ecs.Entity.name
      - decentraland-ecs.Entity.removeComponent
      - decentraland-ecs.Entity.removeComponent_1
      - decentraland-ecs.Entity.removeComponent_2
      - decentraland-ecs.Entity.setParent
      - decentraland-ecs.Entity.uuid
  - uid: decentraland-ecs.Entity.(constructor)
    summary: Constructs a new instance of the `Entity` class
    name: (constructor)(name)
    fullName: (constructor)(name)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(name?: string | undefined);'
      parameters:
        - id: name
          description: ''
          type:
            - string | undefined
  - uid: decentraland-ecs.Entity.addComponent
    summary: 'Adds a component. If the component already exist, it throws an Error.'
    name: addComponent(component)
    fullName: addComponent(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addComponent<T extends object>(component: T): T;'
      return:
        type:
          - T
        description: ''
      parameters:
        - id: component
          description: component instance.
          type:
            - T
  - uid: decentraland-ecs.Entity.addComponentOrReplace
    summary: Adds or replaces a component in the entity.
    name: addComponentOrReplace(component)
    fullName: addComponentOrReplace(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addComponentOrReplace<T extends object>(component: T): T;'
      return:
        type:
          - T
        description: ''
      parameters:
        - id: component
          description: component instance.
          type:
            - T
  - uid: decentraland-ecs.Entity.alive
    name: alive
    fullName: alive
    langs:
      - typeScript
    type: property
    syntax:
      content: 'alive: boolean;'
      return:
        type:
          - boolean
  - uid: decentraland-ecs.Entity.children
    name: children
    fullName: children
    langs:
      - typeScript
    type: property
    syntax:
      content: 'children: Record<string, IEntity>;'
      return:
        type:
          - 'Record<string, IEntity>'
  - uid: decentraland-ecs.Entity.components
    name: components
    fullName: components
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly components: Record<string, any>;'
      return:
        type:
          - 'Record<string, any>'
  - uid: decentraland-ecs.Entity.eventManager
    name: eventManager
    fullName: eventManager
    langs:
      - typeScript
    type: property
    syntax:
      content: 'eventManager: EventManager | null;'
      return:
        type:
          - EventManager | null
  - uid: decentraland-ecs.Entity.getComponent
    summary: 'Gets a component, if it doesn''t exist, it throws an Error.'
    name: getComponent(component)
    fullName: getComponent(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComponent<T = any>(component: string): T;'
      return:
        type:
          - T
        description: ''
      parameters:
        - id: component
          description: component class or name
          type:
            - string
  - uid: decentraland-ecs.Entity.getComponent_1
    name: getComponent(component)
    fullName: getComponent(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComponent<T>(component: ComponentConstructor<T>): T;'
      return:
        type:
          - T
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - ComponentConstructor<T>
  - uid: decentraland-ecs.Entity.getComponentOrCreate
    summary: 'Gets a component, if it doesn''t exist, it creates the component and returns it.'
    name: getComponentOrCreate(component)
    fullName: getComponentOrCreate(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getComponentOrCreate<T>(component: ComponentConstructor<T> & {
                new (): T;
            }): T;
      return:
        type:
          - T
        description: ''
      parameters:
        - id: component
          description: component class
          type:
            - |-
              ComponentConstructor<T> & {
                      new (): T;
                  }
  - uid: decentraland-ecs.Entity.getComponentOrNull
    summary: 'Gets a component, if it doesn''t exist, it returns null.'
    name: getComponentOrNull(component)
    fullName: getComponentOrNull(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComponentOrNull<T = any>(component: string): T | null;'
      return:
        type:
          - T | null
        description: ''
      parameters:
        - id: component
          description: component class or name
          type:
            - string
  - uid: decentraland-ecs.Entity.getComponentOrNull_1
    name: getComponentOrNull(component)
    fullName: getComponentOrNull(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getComponentOrNull<T>(component: ComponentConstructor<T>): T | null;'
      return:
        type:
          - T | null
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - ComponentConstructor<T>
  - uid: decentraland-ecs.Entity.getParent
    summary: Gets the parent entity
    name: getParent()
    fullName: getParent()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getParent(): IEntity | null;'
      return:
        type:
          - IEntity | null
        description: ''
  - uid: decentraland-ecs.Entity.hasComponent
    summary: Returns a boolean indicating if a component is present in the entity.
    name: hasComponent(component)
    fullName: hasComponent(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hasComponent<T = any>(component: string): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: component
          description: 'component class, instance or name'
          type:
            - string
  - uid: decentraland-ecs.Entity.hasComponent_1
    name: hasComponent(component)
    fullName: hasComponent(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hasComponent<T>(component: ComponentConstructor<T>): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - ComponentConstructor<T>
  - uid: decentraland-ecs.Entity.hasComponent_2
    name: hasComponent(component)
    fullName: hasComponent(component)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hasComponent<T extends object>(component: T): boolean;'
      return:
        type:
          - boolean
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - T
  - uid: decentraland-ecs.Entity.isAddedToEngine
    summary: Returns true if the entity is already added to the engine. Returns false if no engine was defined.
    name: isAddedToEngine()
    fullName: isAddedToEngine()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isAddedToEngine(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: decentraland-ecs.Entity.name
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name?: string | undefined;'
      return:
        type:
          - string | undefined
  - uid: decentraland-ecs.Entity.removeComponent
    summary: Removes a component instance from the entity.
    name: 'removeComponent(component, triggerRemovedEvent)'
    fullName: 'removeComponent(component, triggerRemovedEvent)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeComponent(component: string, triggerRemovedEvent?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: component
          description: component instance to remove
          type:
            - string
        - id: triggerRemovedEvent
          description: should this action trigger an event?
          type:
            - boolean
  - uid: decentraland-ecs.Entity.removeComponent_1
    name: 'removeComponent(component, triggerRemovedEvent)'
    fullName: 'removeComponent(component, triggerRemovedEvent)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeComponent<T extends object>(component: T, triggerRemovedEvent?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - T
        - id: triggerRemovedEvent
          description: ''
          type:
            - boolean
  - uid: decentraland-ecs.Entity.removeComponent_2
    name: 'removeComponent(component, triggerRemovedEvent)'
    fullName: 'removeComponent(component, triggerRemovedEvent)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeComponent(component: ComponentConstructor<any>, triggerRemovedEvent?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: component
          description: ''
          type:
            - ComponentConstructor<any>
        - id: triggerRemovedEvent
          description: ''
          type:
            - boolean
  - uid: decentraland-ecs.Entity.setParent
    summary: Sets the parent entity
    name: setParent(_parent)
    fullName: setParent(_parent)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setParent(_parent: IEntity | null): IEntity;'
      return:
        type:
          - decentraland-ecs.IEntity
        description: ''
      parameters:
        - id: _parent
          description: ''
          type:
            - IEntity | null
  - uid: decentraland-ecs.Entity.uuid
    name: uuid
    fullName: uuid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly uuid: string;'
      return:
        type:
          - string
