### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Vector4
    summary: Vector4 class created for EulerAngle class conversion to Quaternion
    name: Vector4
    fullName: Vector4
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Vector4.(constructor)
      - decentraland-ecs.Vector4.add
      - decentraland-ecs.Vector4.Add
      - decentraland-ecs.Vector4.addInPlace
      - decentraland-ecs.Vector4.addToRef
      - decentraland-ecs.Vector4.asArray
      - decentraland-ecs.Vector4.Center
      - decentraland-ecs.Vector4.clone
      - decentraland-ecs.Vector4.copyFrom
      - decentraland-ecs.Vector4.copyFromFloats
      - decentraland-ecs.Vector4.Distance
      - decentraland-ecs.Vector4.DistanceSquared
      - decentraland-ecs.Vector4.divide
      - decentraland-ecs.Vector4.divideInPlace
      - decentraland-ecs.Vector4.divideToRef
      - decentraland-ecs.Vector4.equals
      - decentraland-ecs.Vector4.equalsToFloats
      - decentraland-ecs.Vector4.equalsWithEpsilon
      - decentraland-ecs.Vector4.floor
      - decentraland-ecs.Vector4.fract
      - decentraland-ecs.Vector4.FromArray
      - decentraland-ecs.Vector4.FromArrayToRef
      - decentraland-ecs.Vector4.FromFloatArrayToRef
      - decentraland-ecs.Vector4.FromFloatsToRef
      - decentraland-ecs.Vector4.getClassName
      - decentraland-ecs.Vector4.getHashCode
      - decentraland-ecs.Vector4.length
      - decentraland-ecs.Vector4.lengthSquared
      - decentraland-ecs.Vector4.Maximize
      - decentraland-ecs.Vector4.maximizeInPlace
      - decentraland-ecs.Vector4.Minimize
      - decentraland-ecs.Vector4.minimizeInPlace
      - decentraland-ecs.Vector4.multiply
      - decentraland-ecs.Vector4.multiplyByFloats
      - decentraland-ecs.Vector4.multiplyInPlace
      - decentraland-ecs.Vector4.multiplyToRef
      - decentraland-ecs.Vector4.negate
      - decentraland-ecs.Vector4.normalize
      - decentraland-ecs.Vector4.Normalize
      - decentraland-ecs.Vector4.NormalizeToRef
      - decentraland-ecs.Vector4.One
      - decentraland-ecs.Vector4.scale
      - decentraland-ecs.Vector4.scaleAndAddToRef
      - decentraland-ecs.Vector4.scaleInPlace
      - decentraland-ecs.Vector4.scaleToRef
      - decentraland-ecs.Vector4.set
      - decentraland-ecs.Vector4.setAll
      - decentraland-ecs.Vector4.subtract
      - decentraland-ecs.Vector4.subtractFromFloats
      - decentraland-ecs.Vector4.subtractFromFloatsToRef
      - decentraland-ecs.Vector4.subtractInPlace
      - decentraland-ecs.Vector4.subtractToRef
      - decentraland-ecs.Vector4.toArray
      - decentraland-ecs.Vector4.toString
      - decentraland-ecs.Vector4.toVector3
      - decentraland-ecs.Vector4.TransformNormal
      - decentraland-ecs.Vector4.TransformNormalFromFloatsToRef
      - decentraland-ecs.Vector4.TransformNormalToRef
      - decentraland-ecs.Vector4.w
      - decentraland-ecs.Vector4.x
      - decentraland-ecs.Vector4.y
      - decentraland-ecs.Vector4.z
      - decentraland-ecs.Vector4.Zero
  - uid: decentraland-ecs.Vector4.(constructor)
    summary: Creates a Vector4 object from the given floats.
    name: '(constructor)(x, y, z, w)'
    fullName: '(constructor)(x, y, z, w)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: |-
        constructor(
            x: number, 
            y: number, 
            z: number, 
            w: number);
      parameters:
        - id: x
          description: x value of the vector
          type:
            - number
        - id: 'y'
          description: y value of the vector
          type:
            - number
        - id: z
          description: z value of the vector
          type:
            - number
        - id: w
          description: w value of the vector
          type:
            - number
  - uid: decentraland-ecs.Vector4.add
    summary: Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.
    name: add(otherVector)
    fullName: add(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(otherVector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the resulting vector
      parameters:
        - id: otherVector
          description: the vector to add
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.Add
    summary: Returns a new Vector4 as the result of the addition of the two given vectors.
    name: 'Add(vector1, vector2)'
    fullName: 'Add(vector1, vector2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Add(vector1: ReadOnlyVector4, vector2: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the resulting vector
      parameters:
        - id: vector1
          description: the first vector
          type:
            - ReadOnlyVector4
        - id: vector2
          description: the second vector
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.addInPlace
    summary: Adds the given vector to the current Vector4.
    name: addInPlace(otherVector)
    fullName: addInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addInPlace(otherVector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector4.
      parameters:
        - id: otherVector
          description: the vector to add
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.addToRef
    summary: Updates the given vector "result" with the result of the addition of the current Vector4 and the given one.
    name: 'addToRef(otherVector, result)'
    fullName: 'addToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current Vector4.
      parameters:
        - id: otherVector
          description: the vector to add
          type:
            - ReadOnlyVector4
        - id: result
          description: the vector to store the result
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.asArray
    summary: 'Returns a new array populated with 4 elements : the Vector4 coordinates.'
    name: asArray()
    fullName: asArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'asArray(): number[];'
      return:
        type:
          - 'number[]'
        description: the resulting array
  - uid: decentraland-ecs.Vector4.Center
    summary: Returns a new Vector4 located at the center between the vectors "value1" and "value2".
    name: 'Center(value1, value2)'
    fullName: 'Center(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Center(value1: ReadOnlyVector4, value2: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the center between the two vectors
      parameters:
        - id: value1
          description: value to calulate the center between
          type:
            - ReadOnlyVector4
        - id: value2
          description: value to calulate the center between
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.clone
    summary: Returns a new Vector4 copied from the current one.
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the new cloned vector
  - uid: decentraland-ecs.Vector4.copyFrom
    summary: Updates the current Vector4 with the given one coordinates.
    name: copyFrom(source)
    fullName: copyFrom(source)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(source: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector4.
      parameters:
        - id: source
          description: the source vector to copy from
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.copyFromFloats
    summary: Updates the current Vector4 coordinates with the given floats.
    name: 'copyFromFloats(x, y, z, w)'
    fullName: 'copyFromFloats(x, y, z, w)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFromFloats(x: number, y: number, z: number, w: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector4.
      parameters:
        - id: x
          description: float to copy from
          type:
            - number
        - id: 'y'
          description: float to copy from
          type:
            - number
        - id: z
          description: float to copy from
          type:
            - number
        - id: w
          description: float to copy from
          type:
            - number
  - uid: decentraland-ecs.Vector4.Distance
    summary: Returns the distance (float) between the vectors "value1" and "value2".
    name: 'Distance(value1, value2)'
    fullName: 'Distance(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Distance(value1: ReadOnlyVector4, value2: ReadOnlyVector4): number;'
      return:
        type:
          - number
        description: the distance between the two vectors
      parameters:
        - id: value1
          description: value to calulate the distance between
          type:
            - ReadOnlyVector4
        - id: value2
          description: value to calulate the distance between
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.DistanceSquared
    summary: Returns the squared distance (float) between the vectors "value1" and "value2".
    name: 'DistanceSquared(value1, value2)'
    fullName: 'DistanceSquared(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static DistanceSquared(value1: ReadOnlyVector4, value2: ReadOnlyVector4): number;'
      return:
        type:
          - number
        description: the distance between the two vectors squared
      parameters:
        - id: value1
          description: value to calulate the distance between
          type:
            - ReadOnlyVector4
        - id: value2
          description: value to calulate the distance between
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.divide
    summary: Returns a new Vector4 set with the division result of the current Vector4 by the given one.
    name: divide(otherVector)
    fullName: divide(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divide(otherVector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: resulting new vector
      parameters:
        - id: otherVector
          description: vector to devide with
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.divideInPlace
    summary: Divides the current Vector3 coordinates by the given ones.
    name: divideInPlace(otherVector)
    fullName: divideInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divideInPlace(otherVector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector3.
      parameters:
        - id: otherVector
          description: vector to devide with
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.divideToRef
    summary: Updates the given vector "result" with the division result of the current Vector4 by the given one.
    name: 'divideToRef(otherVector, result)'
    fullName: 'divideToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divideToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current Vector4.
      parameters:
        - id: otherVector
          description: vector to devide with
          type:
            - ReadOnlyVector4
        - id: result
          description: vector to store the result
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.equals
    summary: 'Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.'
    name: equals(otherVector)
    fullName: equals(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equals(otherVector: ReadOnlyVector4): boolean;'
      return:
        type:
          - boolean
        description: true if they are equal
      parameters:
        - id: otherVector
          description: the vector to compare against
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.equalsToFloats
    summary: 'Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.'
    name: 'equalsToFloats(x, y, z, w)'
    fullName: 'equalsToFloats(x, y, z, w)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equalsToFloats(x: number, y: number, z: number, w: number): boolean;'
      return:
        type:
          - boolean
        description: true if equal
      parameters:
        - id: x
          description: x value to compare against
          type:
            - number
        - id: 'y'
          description: y value to compare against
          type:
            - number
        - id: z
          description: z value to compare against
          type:
            - number
        - id: w
          description: w value to compare against
          type:
            - number
  - uid: decentraland-ecs.Vector4.equalsWithEpsilon
    summary: >-
      Boolean : True if the current Vector4 coordinates are each beneath the distance "epsilon" from the given vector
      ones.
    name: 'equalsWithEpsilon(otherVector, epsilon)'
    fullName: 'equalsWithEpsilon(otherVector, epsilon)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equalsWithEpsilon(otherVector: ReadOnlyVector4, epsilon?: number): boolean;'
      return:
        type:
          - boolean
        description: true if they are equal
      parameters:
        - id: otherVector
          description: vector to compare against
          type:
            - ReadOnlyVector4
        - id: epsilon
          description: '(Default: very small number)'
          type:
            - number
  - uid: decentraland-ecs.Vector4.floor
    summary: Gets a new Vector4 from current Vector4 floored values
    name: floor()
    fullName: floor()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'floor(): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: a new Vector4
  - uid: decentraland-ecs.Vector4.fract
    summary: Gets a new Vector4 from current Vector3 floored values
    name: fract()
    fullName: fract()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'fract(): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: a new Vector4
  - uid: decentraland-ecs.Vector4.FromArray
    summary: Returns a new Vector4 set from the starting index of the given array.
    name: 'FromArray(array, offset)'
    fullName: 'FromArray(array, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArray(array: ArrayLike<number>, offset?: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the new vector
      parameters:
        - id: array
          description: the array to pull values from
          type:
            - ArrayLike<number>
        - id: offset
          description: the offset into the array to start at
          type:
            - number
  - uid: decentraland-ecs.Vector4.FromArrayToRef
    summary: Updates the given vector "result" from the starting index of the given array.
    name: 'FromArrayToRef(array, offset, result)'
    fullName: 'FromArrayToRef(array, offset, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector4): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: array
          description: the array to pull values from
          type:
            - ArrayLike<number>
        - id: offset
          description: the offset into the array to start at
          type:
            - number
        - id: result
          description: the vector to store the result in
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.FromFloatArrayToRef
    summary: Updates the given vector "result" from the starting index of the given FloatArray.
    name: 'FromFloatArrayToRef(array, offset, result)'
    fullName: 'FromFloatArrayToRef(array, offset, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromFloatArrayToRef(array: FloatArray, offset: number, result: Vector4): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: array
          description: the array to pull values from
          type:
            - FloatArray
        - id: offset
          description: the offset into the array to start at
          type:
            - number
        - id: result
          description: the vector to store the result in
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.FromFloatsToRef
    summary: Updates the given vector "result" coordinates from the given floats.
    name: 'FromFloatsToRef(x, y, z, w, result)'
    fullName: 'FromFloatsToRef(x, y, z, w, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromFloatsToRef(x: number, y: number, z: number, w: number, result: Vector4): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: x
          description: float to set from
          type:
            - number
        - id: 'y'
          description: float to set from
          type:
            - number
        - id: z
          description: float to set from
          type:
            - number
        - id: w
          description: float to set from
          type:
            - number
        - id: result
          description: the vector to the floats in
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.getClassName
    summary: Returns the string "Vector4".
    name: getClassName()
    fullName: getClassName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getClassName(): string;'
      return:
        type:
          - string
        description: '"Vector4"'
  - uid: decentraland-ecs.Vector4.getHashCode
    summary: Returns the Vector4 hash code.
    name: getHashCode()
    fullName: getHashCode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHashCode(): number;'
      return:
        type:
          - number
        description: a unique hash code
  - uid: decentraland-ecs.Vector4.length
    summary: Returns the Vector4 length (float).
    name: length()
    fullName: length()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'length(): number;'
      return:
        type:
          - number
        description: the length
  - uid: decentraland-ecs.Vector4.lengthSquared
    summary: Returns the Vector4 squared length (float).
    name: lengthSquared()
    fullName: lengthSquared()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'lengthSquared(): number;'
      return:
        type:
          - number
        description: the length squared
  - uid: decentraland-ecs.Vector4.Maximize
    summary: Returns a vector with the maximum values from the left and right vectors
    name: 'Maximize(left, right)'
    fullName: 'Maximize(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Maximize(left: ReadOnlyVector4, right: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: a new vector with the maximum of the left and right vector values
      parameters:
        - id: left
          description: left vector to maximize
          type:
            - ReadOnlyVector4
        - id: right
          description: right vector to maximize
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.maximizeInPlace
    summary: Updates the Vector4 coordinates with the maximum values between its own and the given vector ones
    name: maximizeInPlace(other)
    fullName: maximizeInPlace(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'maximizeInPlace(other: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current updated Vector4
      parameters:
        - id: other
          description: defines the second operand
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.Minimize
    summary: Returns a vector with the minimum values from the left and right vectors
    name: 'Minimize(left, right)'
    fullName: 'Minimize(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Minimize(left: ReadOnlyVector4, right: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: a new vector with the minimum of the left and right vector values
      parameters:
        - id: left
          description: left vector to minimize
          type:
            - ReadOnlyVector4
        - id: right
          description: right vector to minimize
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.minimizeInPlace
    summary: Updates the Vector4 coordinates with the minimum values between its own and the given vector ones
    name: minimizeInPlace(other)
    fullName: minimizeInPlace(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'minimizeInPlace(other: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current updated Vector4
      parameters:
        - id: other
          description: defines the second operand
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.multiply
    summary: Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.
    name: multiply(otherVector)
    fullName: multiply(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiply(otherVector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: resulting new vector
      parameters:
        - id: otherVector
          description: vector to multiple with
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.multiplyByFloats
    summary: Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.
    name: 'multiplyByFloats(x, y, z, w)'
    fullName: 'multiplyByFloats(x, y, z, w)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyByFloats(x: number, y: number, z: number, w: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: resulting new vector
      parameters:
        - id: x
          description: x value multiply with
          type:
            - number
        - id: 'y'
          description: y value multiply with
          type:
            - number
        - id: z
          description: z value multiply with
          type:
            - number
        - id: w
          description: w value multiply with
          type:
            - number
  - uid: decentraland-ecs.Vector4.multiplyInPlace
    summary: Multiplies in place the current Vector4 by the given one.
    name: multiplyInPlace(otherVector)
    fullName: multiplyInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyInPlace(otherVector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector4.
      parameters:
        - id: otherVector
          description: vector to multiple with
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.multiplyToRef
    summary: Updates the given vector "result" with the multiplication result of the current Vector4 and the given one.
    name: 'multiplyToRef(otherVector, result)'
    fullName: 'multiplyToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current Vector4.
      parameters:
        - id: otherVector
          description: vector to multiple with
          type:
            - ReadOnlyVector4
        - id: result
          description: vector to store the result
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.negate
    summary: Returns a new Vector4 set with the current Vector4 negated coordinates.
    name: negate()
    fullName: negate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'negate(): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: a new vector with the negated values
  - uid: decentraland-ecs.Vector4.normalize
    summary: Normalizes in place the Vector4.
    name: normalize()
    fullName: normalize()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'normalize(): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector4.
  - uid: decentraland-ecs.Vector4.Normalize
    summary: Returns a new normalized Vector4 from the given one.
    name: Normalize(vector)
    fullName: Normalize(vector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Normalize(vector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the vector
      parameters:
        - id: vector
          description: the vector to normalize
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.NormalizeToRef
    summary: Updates the given vector "result" from the normalization of the given one.
    name: 'NormalizeToRef(vector, result)'
    fullName: 'NormalizeToRef(vector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static NormalizeToRef(vector: ReadOnlyVector4, result: Vector4): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: vector
          description: the vector to normalize
          type:
            - ReadOnlyVector4
        - id: result
          description: the vector to store the result in
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.One
    summary: 'Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)'
    name: One()
    fullName: One()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static One(): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the new vector
  - uid: decentraland-ecs.Vector4.scale
    summary: Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).
    name: scale(scale)
    fullName: scale(scale)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scale(scale: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: a new vector with the result
      parameters:
        - id: scale
          description: the number to scale with
          type:
            - number
  - uid: decentraland-ecs.Vector4.scaleAndAddToRef
    summary: Scale the current Vector4 values by a factor and add the result to a given Vector4
    name: 'scaleAndAddToRef(scale, result)'
    fullName: 'scaleAndAddToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleAndAddToRef(scale: number, result: Vector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the unmodified current Vector4
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines the Vector4 object where to store the result
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.scaleInPlace
    summary: Multiplies the current Vector4 coordinates by scale (float).
    name: scaleInPlace(scale)
    fullName: scaleInPlace(scale)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleInPlace(scale: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector4.
      parameters:
        - id: scale
          description: the number to scale with
          type:
            - number
  - uid: decentraland-ecs.Vector4.scaleToRef
    summary: Sets the given vector "result" with the current Vector4 coordinates multiplied by scale (float).
    name: 'scaleToRef(scale, result)'
    fullName: 'scaleToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleToRef(scale: number, result: Vector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current Vector4.
      parameters:
        - id: scale
          description: the number to scale with
          type:
            - number
        - id: result
          description: a vector to store the result in
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.set
    summary: Updates the current Vector4 coordinates with the given floats.
    name: 'set(x, y, z, w)'
    fullName: 'set(x, y, z, w)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(x: number, y: number, z: number, w: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector4.
      parameters:
        - id: x
          description: float to set from
          type:
            - number
        - id: 'y'
          description: float to set from
          type:
            - number
        - id: z
          description: float to set from
          type:
            - number
        - id: w
          description: float to set from
          type:
            - number
  - uid: decentraland-ecs.Vector4.setAll
    summary: Copies the given float to the current Vector3 coordinates
    name: setAll(v)
    fullName: setAll(v)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAll(v: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current updated Vector3
      parameters:
        - id: v
          description: 'defines the x, y, z and w coordinates of the operand'
          type:
            - number
  - uid: decentraland-ecs.Vector4.subtract
    summary: Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.
    name: subtract(otherVector)
    fullName: subtract(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtract(otherVector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the new vector with the result
      parameters:
        - id: otherVector
          description: the vector to add
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.subtractFromFloats
    summary: >-
      Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4
      coordinates.
    name: 'subtractFromFloats(x, y, z, w)'
    fullName: 'subtractFromFloats(x, y, z, w)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractFromFloats(x: number, y: number, z: number, w: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: new vector containing the result
      parameters:
        - id: x
          description: value to subtract
          type:
            - number
        - id: 'y'
          description: value to subtract
          type:
            - number
        - id: z
          description: value to subtract
          type:
            - number
        - id: w
          description: value to subtract
          type:
            - number
  - uid: decentraland-ecs.Vector4.subtractFromFloatsToRef
    summary: >-
      Sets the given vector "result" set with the result of the subtraction of the given floats from the current Vector4
      coordinates.
    name: 'subtractFromFloatsToRef(x, y, z, w, result)'
    fullName: 'subtractFromFloatsToRef(x, y, z, w, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractFromFloatsToRef(x: number, y: number, z: number, w: number, result: Vector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current Vector4.
      parameters:
        - id: x
          description: value to subtract
          type:
            - number
        - id: 'y'
          description: value to subtract
          type:
            - number
        - id: z
          description: value to subtract
          type:
            - number
        - id: w
          description: value to subtract
          type:
            - number
        - id: result
          description: the vector to store the result in
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.subtractInPlace
    summary: Subtract in place the given vector from the current Vector4.
    name: subtractInPlace(otherVector)
    fullName: subtractInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractInPlace(otherVector: ReadOnlyVector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the updated Vector4.
      parameters:
        - id: otherVector
          description: the vector to subtract
          type:
            - ReadOnlyVector4
  - uid: decentraland-ecs.Vector4.subtractToRef
    summary: Sets the given vector "result" with the result of the subtraction of the given vector from the current Vector4.
    name: 'subtractToRef(otherVector, result)'
    fullName: 'subtractToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractToRef(otherVector: ReadOnlyVector4, result: Vector4): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the current Vector4.
      parameters:
        - id: otherVector
          description: the vector to subtract
          type:
            - ReadOnlyVector4
        - id: result
          description: the vector to store the result
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.toArray
    summary: Populates the given array from the given index with the Vector4 coordinates.
    name: 'toArray(array, index)'
    fullName: 'toArray(array, index)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toArray(array: FloatArray, index?: number): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the Vector4.
      parameters:
        - id: array
          description: array to populate
          type:
            - FloatArray
        - id: index
          description: 'index of the array to start at (default: 0)'
          type:
            - number
  - uid: decentraland-ecs.Vector4.toString
    summary: Returns the string with the Vector4 coordinates.
    name: toString()
    fullName: toString()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toString(): string;'
      return:
        type:
          - string
        description: a string containing all the vector values
  - uid: decentraland-ecs.Vector4.toVector3
    summary: 'Returns a new Vector3 from the Vector4 (x, y, z) coordinates.'
    name: toVector3()
    fullName: toVector3()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toVector3(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: this converted to a new vector3
  - uid: decentraland-ecs.Vector4.TransformNormal
    summary: >-
      Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.
      This methods computes transformed normalized direction vectors only.
    name: 'TransformNormal(vector, transformation)'
    fullName: 'TransformNormal(vector, transformation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static TransformNormal(vector: ReadOnlyVector4, transformation: Matrix): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the new vector
      parameters:
        - id: vector
          description: the vector to transform
          type:
            - ReadOnlyVector4
        - id: transformation
          description: the transformation matrix to apply
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Vector4.TransformNormalFromFloatsToRef
    summary: >-
      Sets the given vector "result" with the result of the normal transformation by the given matrix of the given
      floats (x, y, z, w). This methods computes transformed normalized direction vectors only.
    name: 'TransformNormalFromFloatsToRef(x, y, z, w, transformation, result)'
    fullName: 'TransformNormalFromFloatsToRef(x, y, z, w, transformation, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static TransformNormalFromFloatsToRef(x: number, y: number, z: number, w: number, transformation: Matrix,
        result: Vector4): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: x
          description: value to transform
          type:
            - number
        - id: 'y'
          description: value to transform
          type:
            - number
        - id: z
          description: value to transform
          type:
            - number
        - id: w
          description: value to transform
          type:
            - number
        - id: transformation
          description: the transformation matrix to apply
          type:
            - decentraland-ecs.Matrix
        - id: result
          description: the vector to store the results in
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.TransformNormalToRef
    summary: >-
      Sets the given vector "result" with the result of the normal transformation by the given matrix of the given
      vector. This methods computes transformed normalized direction vectors only.
    name: 'TransformNormalToRef(vector, transformation, result)'
    fullName: 'TransformNormalToRef(vector, transformation, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static TransformNormalToRef(vector: ReadOnlyVector4, transformation: Matrix, result: Vector4): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: vector
          description: the vector to transform
          type:
            - ReadOnlyVector4
        - id: transformation
          description: the transformation matrix to apply
          type:
            - decentraland-ecs.Matrix
        - id: result
          description: the vector to store the result in
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Vector4.w
    summary: w value of the vector
    name: w
    fullName: w
    langs:
      - typeScript
    type: property
    syntax:
      content: 'w: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector4.x
    summary: x value of the vector
    name: x
    fullName: x
    langs:
      - typeScript
    type: property
    syntax:
      content: 'x: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector4.y
    summary: y value of the vector
    name: 'y'
    fullName: 'y'
    langs:
      - typeScript
    type: property
    syntax:
      content: 'y: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector4.z
    summary: z value of the vector
    name: z
    fullName: z
    langs:
      - typeScript
    type: property
    syntax:
      content: 'z: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector4.Zero
    summary: 'Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)'
    name: Zero()
    fullName: Zero()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Zero(): Vector4;'
      return:
        type:
          - decentraland-ecs.Vector4
        description: the new vector
