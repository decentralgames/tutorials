### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Observer
    summary: Represent an Observer registered to a given Observable object.
    name: Observer
    fullName: Observer
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Observer._willBeUnregistered
      - decentraland-ecs.Observer.(constructor)
      - decentraland-ecs.Observer.callback
      - decentraland-ecs.Observer.mask
      - decentraland-ecs.Observer.scope
      - decentraland-ecs.Observer.unregisterOnNextCall
  - uid: decentraland-ecs.Observer._willBeUnregistered
    summary: For internal usage
    name: _willBeUnregistered
    fullName: _willBeUnregistered
    langs:
      - typeScript
    type: property
    syntax:
      content: '_willBeUnregistered: boolean;'
      return:
        type:
          - boolean
  - uid: decentraland-ecs.Observer.(constructor)
    summary: Creates a new observer
    name: '(constructor)(callback, mask, scope)'
    fullName: '(constructor)(callback, mask, scope)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: |-
        constructor(
            callback: (eventData: T, eventState: ObserverEventState) => void, 
            mask: number, 
            scope?: any);
      parameters:
        - id: callback
          description: defines the callback to call when the observer is notified
          type:
            - '(eventData: T, eventState: ObserverEventState) => void'
        - id: mask
          description: defines the mask of the observer (used to filter notifications)
          type:
            - number
        - id: scope
          description: defines the current scope used to restore the JS context
          type:
            - any
  - uid: decentraland-ecs.Observer.callback
    summary: Defines the callback to call when the observer is notified
    name: callback
    fullName: callback
    langs:
      - typeScript
    type: property
    syntax:
      content: 'callback: (eventData: T, eventState: ObserverEventState) => void;'
      return:
        type:
          - '(eventData: T, eventState: ObserverEventState) => void'
  - uid: decentraland-ecs.Observer.mask
    summary: Defines the mask of the observer (used to filter notifications)
    name: mask
    fullName: mask
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mask: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Observer.scope
    summary: Defines the current scope used to restore the JS context
    name: scope
    fullName: scope
    langs:
      - typeScript
    type: property
    syntax:
      content: 'scope: any;'
      return:
        type:
          - any
  - uid: decentraland-ecs.Observer.unregisterOnNextCall
    summary: Gets or sets a property defining that the observer as to be unregistered after the next notification
    name: unregisterOnNextCall
    fullName: unregisterOnNextCall
    langs:
      - typeScript
    type: property
    syntax:
      content: 'unregisterOnNextCall: boolean;'
      return:
        type:
          - boolean
