### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.ObserverEventState
    summary: A class serves as a medium between the observable and its observers
    name: ObserverEventState
    fullName: ObserverEventState
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.ObserverEventState.(constructor)
      - decentraland-ecs.ObserverEventState.currentTarget
      - decentraland-ecs.ObserverEventState.initalize
      - decentraland-ecs.ObserverEventState.lastReturnValue
      - decentraland-ecs.ObserverEventState.mask
      - decentraland-ecs.ObserverEventState.skipNextObservers
      - decentraland-ecs.ObserverEventState.target
  - uid: decentraland-ecs.ObserverEventState.(constructor)
    summary: Create a new EventState
    name: '(constructor)(mask, skipNextObservers, target, currentTarget)'
    fullName: '(constructor)(mask, skipNextObservers, target, currentTarget)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(mask: number, skipNextObservers?: boolean, target?: any, currentTarget?: any);'
      parameters:
        - id: mask
          description: defines the mask associated with this state
          type:
            - number
        - id: skipNextObservers
          description: defines a flag which will instruct the observable to skip following observers when set to true
          type:
            - boolean
        - id: target
          description: defines the original target of the state
          type:
            - any
        - id: currentTarget
          description: defines the current target of the state
          type:
            - any
  - uid: decentraland-ecs.ObserverEventState.currentTarget
    summary: The current object in the bubbling phase
    name: currentTarget
    fullName: currentTarget
    langs:
      - typeScript
    type: property
    syntax:
      content: 'currentTarget?: any;'
      return:
        type:
          - any
  - uid: decentraland-ecs.ObserverEventState.initalize
    summary: Initialize the current event state
    name: 'initalize(mask, skipNextObservers, target, currentTarget)'
    fullName: 'initalize(mask, skipNextObservers, target, currentTarget)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'initalize(mask: number, skipNextObservers?: boolean, target?: any, currentTarget?: any): ObserverEventState;'
      return:
        type:
          - decentraland-ecs.ObserverEventState
        description: the current event state
      parameters:
        - id: mask
          description: defines the mask associated with this state
          type:
            - number
        - id: skipNextObservers
          description: defines a flag which will instruct the observable to skip following observers when set to true
          type:
            - boolean
        - id: target
          description: defines the original target of the state
          type:
            - any
        - id: currentTarget
          description: defines the current target of the state
          type:
            - any
  - uid: decentraland-ecs.ObserverEventState.lastReturnValue
    summary: >-
      This will be populated with the return value of the last function that was executed. If it is the first function
      in the callback chain it will be the event data.
    name: lastReturnValue
    fullName: lastReturnValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'lastReturnValue?: any;'
      return:
        type:
          - any
  - uid: decentraland-ecs.ObserverEventState.mask
    summary: Get the mask value that were used to trigger the event corresponding to this EventState object
    name: mask
    fullName: mask
    langs:
      - typeScript
    type: property
    syntax:
      content: 'mask: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.ObserverEventState.skipNextObservers
    summary: An Observer can set this property to true to prevent subsequent observers of being notified
    name: skipNextObservers
    fullName: skipNextObservers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'skipNextObservers: boolean;'
      return:
        type:
          - boolean
  - uid: decentraland-ecs.ObserverEventState.target
    summary: The object that originally notified the event
    name: target
    fullName: target
    langs:
      - typeScript
    type: property
    syntax:
      content: 'target?: any;'
      return:
        type:
          - any
