### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Plane
    summary: Represens a plane by the equation ax + by + cz + d = 0
    name: Plane
    fullName: Plane
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Plane.(constructor)
      - decentraland-ecs.Plane.asArray
      - decentraland-ecs.Plane.clone
      - decentraland-ecs.Plane.copyFromPoints
      - decentraland-ecs.Plane.d
      - decentraland-ecs.Plane.dotCoordinate
      - decentraland-ecs.Plane.FromArray
      - decentraland-ecs.Plane.FromPoints
      - decentraland-ecs.Plane.FromPositionAndNormal
      - decentraland-ecs.Plane.getClassName
      - decentraland-ecs.Plane.getHashCode
      - decentraland-ecs.Plane.isFrontFacingTo
      - decentraland-ecs.Plane.normal
      - decentraland-ecs.Plane.normalize
      - decentraland-ecs.Plane.signedDistanceTo
      - decentraland-ecs.Plane.SignedDistanceToPlaneFromPositionAndNormal
      - decentraland-ecs.Plane.transform
  - uid: decentraland-ecs.Plane.(constructor)
    summary: 'Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0'
    name: '(constructor)(a, b, c, d)'
    fullName: '(constructor)(a, b, c, d)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(a: number, b: number, c: number, d: number);'
      parameters:
        - id: a
          description: a component of the plane
          type:
            - number
        - id: b
          description: b component of the plane
          type:
            - number
        - id: c
          description: c component of the plane
          type:
            - number
        - id: d
          description: d component of the plane
          type:
            - number
  - uid: decentraland-ecs.Plane.asArray
    name: asArray()
    fullName: asArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'asArray(): number[];'
      return:
        type:
          - 'number[]'
        description: 'the plane coordinates as a new array of 4 elements \[a, b, c, d\].'
  - uid: decentraland-ecs.Plane.clone
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Plane;'
      return:
        type:
          - decentraland-ecs.Plane
        description: a new plane copied from the current Plane.
  - uid: decentraland-ecs.Plane.copyFromPoints
    summary: Updates the current Plane from the plane defined by the three given points.
    name: 'copyFromPoints(point1, point2, point3)'
    fullName: 'copyFromPoints(point1, point2, point3)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFromPoints(point1: Vector3, point2: Vector3, point3: Vector3): Plane;'
      return:
        type:
          - decentraland-ecs.Plane
        description: the updated Plane.
      parameters:
        - id: point1
          description: one of the points used to contruct the plane
          type:
            - decentraland-ecs.Vector3
        - id: point2
          description: one of the points used to contruct the plane
          type:
            - decentraland-ecs.Vector3
        - id: point3
          description: one of the points used to contruct the plane
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Plane.d
    summary: d component of the plane
    name: d
    fullName: d
    langs:
      - typeScript
    type: property
    syntax:
      content: 'd: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Plane.dotCoordinate
    summary: Calcualtte the dot product between the point and the plane normal
    name: dotCoordinate(point)
    fullName: dotCoordinate(point)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'dotCoordinate(point: Vector3): number;'
      return:
        type:
          - number
        description: the dot product (float) of the point coordinates and the plane normal.
      parameters:
        - id: point
          description: point to calculate the dot product with
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Plane.FromArray
    summary: Creates a plane from an array
    name: FromArray(array)
    fullName: FromArray(array)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArray(array: ArrayLike<number>): Plane;'
      return:
        type:
          - decentraland-ecs.Plane
        description: a new Plane from the given array.
      parameters:
        - id: array
          description: the array to create a plane from
          type:
            - ArrayLike<number>
  - uid: decentraland-ecs.Plane.FromPoints
    summary: Creates a plane from three points
    name: 'FromPoints(point1, point2, point3)'
    fullName: 'FromPoints(point1, point2, point3)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromPoints(point1: Vector3, point2: Vector3, point3: Vector3): Plane;'
      return:
        type:
          - decentraland-ecs.Plane
        description: a new Plane defined by the three given points.
      parameters:
        - id: point1
          description: point used to create the plane
          type:
            - decentraland-ecs.Vector3
        - id: point2
          description: point used to create the plane
          type:
            - decentraland-ecs.Vector3
        - id: point3
          description: point used to create the plane
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Plane.FromPositionAndNormal
    summary: Creates a plane from an origin point and a normal
    name: 'FromPositionAndNormal(origin, normal)'
    fullName: 'FromPositionAndNormal(origin, normal)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromPositionAndNormal(origin: Vector3, normal: Vector3): Plane;'
      return:
        type:
          - decentraland-ecs.Plane
        description: >-
          a new Plane the normal vector to this plane at the given origin point. Note : the vector "normal" is updated
          because normalized.
      parameters:
        - id: origin
          description: origin of the plane to be constructed
          type:
            - decentraland-ecs.Vector3
        - id: normal
          description: normal of the plane to be constructed
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Plane.getClassName
    name: getClassName()
    fullName: getClassName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getClassName(): string;'
      return:
        type:
          - string
        description: the string "Plane".
  - uid: decentraland-ecs.Plane.getHashCode
    name: getHashCode()
    fullName: getHashCode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHashCode(): number;'
      return:
        type:
          - number
        description: the Plane hash code.
  - uid: decentraland-ecs.Plane.isFrontFacingTo
    summary: Checks if the plane is facing a given direction
    name: 'isFrontFacingTo(direction, epsilon)'
    fullName: 'isFrontFacingTo(direction, epsilon)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isFrontFacingTo(direction: Vector3, epsilon: number): boolean;'
      return:
        type:
          - boolean
        description: True is the vector "direction" is the same side than the plane normal.
      parameters:
        - id: direction
          description: the direction to check if the plane is facing
          type:
            - decentraland-ecs.Vector3
        - id: epsilon
          description: value the dot product is compared against (returns true if dot &amp;lt;= epsilon)
          type:
            - number
  - uid: decentraland-ecs.Plane.normal
    summary: 'Normal of the plane (a,b,c)'
    name: normal
    fullName: normal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'normal: Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Plane.normalize
    summary: Normalize the current Plane in place.
    name: normalize()
    fullName: normalize()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'normalize(): Plane;'
      return:
        type:
          - decentraland-ecs.Plane
        description: the updated Plane.
  - uid: decentraland-ecs.Plane.signedDistanceTo
    summary: Calculates the distance to a point
    name: signedDistanceTo(point)
    fullName: signedDistanceTo(point)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'signedDistanceTo(point: Vector3): number;'
      return:
        type:
          - number
        description: the signed distance (float) from the given point to the Plane.
      parameters:
        - id: point
          description: point to calculate distance to
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Plane.SignedDistanceToPlaneFromPositionAndNormal
    summary: Calculates the distance from a plane and a point
    name: 'SignedDistanceToPlaneFromPositionAndNormal(origin, normal, point)'
    fullName: 'SignedDistanceToPlaneFromPositionAndNormal(origin, normal, point)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static SignedDistanceToPlaneFromPositionAndNormal(origin: Vector3, normal: Vector3, point: Vector3): number;'
      return:
        type:
          - number
        description: >-
          the signed distance between the plane defined by the normal vector at the "origin"" point and the given other
          point.
      parameters:
        - id: origin
          description: origin of the plane to be constructed
          type:
            - decentraland-ecs.Vector3
        - id: normal
          description: normal of the plane to be constructed
          type:
            - decentraland-ecs.Vector3
        - id: point
          description: point to calculate distance to
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Plane.transform
    summary: Applies a transformation the plane and returns the result
    name: transform(transformation)
    fullName: transform(transformation)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'transform(transformation: Matrix): Plane;'
      return:
        type:
          - decentraland-ecs.Plane
        description: a new Plane as the result of the transformation of the current Plane by the given matrix.
      parameters:
        - id: transformation
          description: the transformation matrix to be applied to the plane
          type:
            - decentraland-ecs.Matrix
