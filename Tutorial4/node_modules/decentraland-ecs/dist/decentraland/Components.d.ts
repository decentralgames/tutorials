import { ObservableComponent } from '../ecs/Component';
import { Vector3, Quaternion, Color3, Color4 } from './math';
import { AnimationState } from './AnimationState';
import { IEvents } from './Types';
import { ActionButton } from './Input';
/** @public */
export declare type TranformConstructorArgs = {
    position?: Vector3;
    rotation?: Quaternion;
    scale?: Vector3;
};
/**
 * @public
 */
export declare class Transform extends ObservableComponent {
    position: Vector3;
    rotation: Quaternion;
    scale: Vector3;
    constructor(args?: TranformConstructorArgs);
    /**
     * @public
     * The rotation as Euler angles in degrees.
     */
    get eulerAngles(): Vector3;
    /**
     * @public
     * Rotates the transform so the forward vector points at target's current position.
     */
    lookAt(target: Vector3, worldUp?: Vector3): this;
    /**
     * @public
     * Applies a rotation of euler angles around the x, y and z axis.
     */
    rotate(axis: Vector3, angle: number): this;
    /**
     * @public
     * Moves the transform in the direction and distance of translation.
     */
    translate(vec: Vector3): this;
}
/**
 * Billboard defines a behavior that makes the entity face the camera in any moment.
 * @public
 */
export declare class Billboard extends ObservableComponent {
    x: boolean;
    y: boolean;
    z: boolean;
    constructor(x?: boolean, y?: boolean, z?: boolean);
}
/**
 * @public
 */
export declare class Shape extends ObservableComponent {
    /**
     * Set to true to turn on the collider for the entity.
     */
    withCollisions: boolean;
    /**
     * Set to true to turn on the PointerEvents blocking for the entity.
     */
    isPointerBlocker: boolean;
    /**
     * Defines if the entity and its children should be rendered
     */
    visible: boolean;
}
/**
 * @public
 */
export declare class BoxShape extends Shape {
}
/**
 * @public
 */
export declare class SphereShape extends Shape {
}
/**
 * @public
 */
export declare class CircleShape extends Shape {
    segments?: number;
    arc?: number;
}
/**
 * @public
 */
export declare class PlaneShape extends Shape {
    /**
     * Sets the horizontal length of the plane. Defaults to 1.
     */
    width: number;
    /**
     * Sets the vertical length of the plane. Defaults to 1.
     */
    height: number;
    /**
     * Sets the UV coordinates for the plane.
     * Used to map specific pieces of a Material's texture into the plane's geometry.
     */
    uvs?: number[];
}
/**
 * @public
 */
export declare class ConeShape extends Shape {
    /**
     * The radius of the top of a truncated cone. Defaults to 0.
     */
    radiusTop: number;
    /**
     * The radius of the base of the cone. Defaults to 1.
     */
    radiusBottom: number;
    /**
     * Sets the number of rings along the cone height (positive integer). Defaults to 1.
     */
    segmentsHeight: number;
    /**
     * Sets the number of cone sides (positive integer). Defaults to 36.
     */
    segmentsRadial: number;
    /**
     * Adds two extra faces per subdivision to enclose the cone around its height axis.
     * Defaults to false.
     */
    openEnded: boolean;
    /**
     * Sets the radius of the top and bottom caps at once.
     *
     * Properties `radiusTop` and `radiusBottom` are prioritized over this one.
     */
    radius: number | null;
    /**
     * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.
     */
    arc: number;
}
/**
 * @public
 */
export declare class CylinderShape extends Shape {
    /**
     * The radius of the top of the cylinder. Defaults to 0.
     */
    radiusTop: number;
    /**
     * The radius of the base of the cylinder. Defaults to 1.
     */
    radiusBottom: number;
    /**
     * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.
     */
    segmentsHeight: number;
    /**
     * Sets the number of cylinder sides (positive integer). Defaults to 36.
     */
    segmentsRadial: number;
    /**
     * Adds two extra faces per subdivision to enclose the cylinder around its height axis.
     * Defaults to false.
     */
    openEnded: boolean;
    /**
     * Sets the radius of the top and bottom caps at once.
     *
     * Properties `radiusTop` and `radiusBottom` are prioritized over this one.
     */
    radius: number | null;
    /**
     * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.
     */
    arc: number;
}
/**
 * @public
 */
export declare class GLTFShape extends Shape {
    readonly src: string;
    constructor(src: string);
}
/**
 * @public
 */
export declare class NFTShape extends Shape {
    readonly src: string;
    color: Color3;
    constructor(src: string, color?: Color3);
}
/**
 * @public
 */
export declare class Texture extends ObservableComponent {
    readonly src: string;
    /**
     * Enables crisper images based on the provided sampling mode.
     * | Value | Type      |
     * |-------|-----------|
     * |     1 | NEAREST   |
     * |     2 | BILINEAR  |
     * |     3 | TRILINEAR |
     */
    readonly samplingMode: number;
    /**
     * Enables texture wrapping for this material.
     * | Value | Type      |
     * |-------|-----------|
     * |     1 | CLAMP     |
     * |     2 | WRAP      |
     * |     3 | MIRROR    |
     */
    readonly wrap: number;
    /**
     * Defines if this texture has an alpha channel
     */
    readonly hasAlpha: boolean;
    constructor(src: string, opts?: Partial<Pick<Texture, 'samplingMode' | 'wrap' | 'hasAlpha'>>);
}
/**
 * @public
 */
export declare class Animator extends Shape {
    private states;
    /**
     * Adds an AnimationState to the animation lists.
     */
    addClip(clip: AnimationState): this;
    /**
     * Gets the animation clip instance for the specified clip name.
     * If the clip doesn't exist a new one will be created.
     */
    getClip(clipName: string): AnimationState;
}
/**
 * @public
 */
export declare class OBJShape extends Shape {
    readonly src: string;
    constructor(src: string);
}
/**
 * @public
 */
export declare class TextShape extends Shape {
    outlineWidth: number;
    outlineColor: Color3;
    color: Color3;
    fontSize: number;
    fontWeight: string;
    opacity: number;
    value: string;
    lineSpacing: string;
    lineCount: number;
    resizeToFit: boolean;
    textWrapping: boolean;
    shadowBlur: number;
    shadowOffsetX: number;
    shadowOffsetY: number;
    shadowColor: Color3;
    zIndex: number;
    hTextAlign: string;
    vTextAlign: string;
    width: number;
    height: number;
    paddingTop: number;
    paddingRight: number;
    paddingBottom: number;
    paddingLeft: number;
    isPickable: boolean;
    billboard: boolean;
    constructor(value?: string);
}
/**
 * @public
 */
export declare enum TransparencyMode {
    OPAQUE = 0,
    ALPHA_TEST = 1,
    ALPHA_BLEND = 2,
    ALPHA_TEST_AND_BLEND = 3,
    AUTO = 4
}
/**
 * @public
 */
export declare class Material extends ObservableComponent {
    /**
     * Cutoff level for ALPHATEST mode. Range is between 0 and 1.
     * Defaults to 0.5
     */
    alphaTest?: number;
    /**
     * AKA Diffuse Color in other nomenclature.
     * Defaults to #CCCCCC.
     */
    albedoColor?: Color4 | Color3;
    /**
     * The color emitted from the material.
     * Defaults to black.
     */
    emissiveColor?: Color3;
    /**
     * Specifies the metallic scalar of the metallic/roughness workflow.
     * Can also be used to scale the metalness values of the metallic texture.
     * Defaults to  0.5.
     */
    metallic?: number;
    /**
     * Specifies the roughness scalar of the metallic/roughness workflow.
     * Can also be used to scale the roughness values of the metallic texture.
     * Defaults to  0.5.
     */
    roughness?: number;
    /**
     * AKA Diffuse Color in other nomenclature.
     * Defaults to black.
     */
    ambientColor?: Color3;
    /**
     * The color reflected from the material.
     * Defaults to white.
     */
    reflectionColor?: Color3;
    /**
     * AKA Specular Color in other nomenclature.
     * Defaults to white.
     */
    reflectivityColor?: Color3;
    /**
     * Intensity of the direct lights e.g. the four lights available in scene.
     * This impacts both the direct diffuse and specular highlights.
     * Defaults to 1.
     */
    directIntensity?: number;
    /**
     * AKA Glossiness in other nomenclature.
     * Defaults to 1.
     */
    microSurface?: number;
    /**
     * Intensity of the emissive part of the material.
     * This helps controlling the emissive effect without modifying the emissive color.
     * Defaults to 1.
     */
    emissiveIntensity?: number;
    /**
     * Intensity of the environment e.g. how much the environment will light the object
     * either through harmonics for rough material or through the refelction for shiny ones.
     * Defaults to 1.
     */
    environmentIntensity?: number;
    /**
     * This is a special control allowing the reduction of the specular highlights coming from the
     * four lights of the scene. Those highlights may not be needed in full environment lighting.
     * Defaults to 1.
     */
    specularIntensity?: number;
    /**
     * Texture applied as material.
     */
    albedoTexture?: Texture;
    /**
     * Texture applied as opacity. Default: the same texture used in albedoTexture.
     */
    alphaTexture?: Texture;
    /**
     * Emissive texture.
     */
    emissiveTexture?: Texture;
    /**
     * Stores surface normal data used to displace a mesh in a texture.
     */
    bumpTexture?: Texture;
    /**
     * Stores the refracted light information in a texture.
     */
    refractionTexture?: Texture;
    /**
     * If sets to true, disables all the lights affecting the material.
     * Defaults to false.
     */
    disableLighting?: boolean;
    /**
     * Sets the transparency mode of the material.
     * Defaults to -1.
     *
     * | Value | Type                                           |
     * | ----- | ---------------------------------------------- |
     * | 0     | OPAQUE  (default)                              |
     * | 1     | ALPHATEST                                      |
     * | 2     | ALPHABLEND                                     |
     * | 3     | ALPHATESTANDBLEND                              |
     * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |
     */
    transparencyMode: TransparencyMode;
}
/**
 * @public
 */
export declare class BasicMaterial extends ObservableComponent {
    /**
     * The source of the texture image.
     */
    texture?: Texture;
    /**
     * A number between 0 and 1.
     * Any pixel with an alpha lower than this value will be shown as transparent.
     */
    alphaTest: number;
}
/**
 * @public
 */
export declare class OnUUIDEvent<T extends keyof IEvents> extends ObservableComponent {
    readonly type: string | undefined;
    readonly uuid: string;
    callback: (event: any) => void;
    constructor(callback: (event: IEvents[T]) => void);
    static uuidEvent(target: ObservableComponent, propertyKey: string): void;
    toJSON(): {
        uuid: string;
        type: string | undefined;
    };
}
/**
 * @public
 */
export declare class OnPointerUUIDEvent<T extends keyof IEvents> extends OnUUIDEvent<T> {
    button: ActionButton;
    hoverText: string;
    distance: number;
    showFeedback: boolean;
    toJSON(): {
        uuid: string;
        type: string | undefined;
        button: ActionButton;
        hoverText: string;
        distance: number;
        showFeedback: boolean;
    };
}
/**
 * @public
 */
export declare class OnAnimationEnd extends OnUUIDEvent<'onAnimationEnd'> {
    readonly type: string;
}
