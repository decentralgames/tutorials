import { IEvents } from './Types';
import { OnUUIDEvent, OnPointerUUIDEvent } from './Components';
import { ActionButton } from './Input';
/**
 * @public
 */
export declare class OnFocus extends OnUUIDEvent<'onFocus'> {
    readonly type: string;
    constructor(callback: (event: IEvents['onFocus']) => void);
}
/**
 * @public
 */
export declare class OnTextSubmit extends OnUUIDEvent<'onTextSubmit'> {
    readonly type: string;
    constructor(callback: (event: IEvents['onTextSubmit']) => void);
}
/**
 * @public
 */
export declare class OnBlur extends OnUUIDEvent<'onBlur'> {
    readonly type: string;
    constructor(callback: (event: IEvents['onBlur']) => void);
}
/**
 * @public
 */
export declare class OnEnter extends OnUUIDEvent<'onEnter'> {
    readonly type: string;
    constructor(callback: (event: IEvents['onEnter']) => void);
}
/**
 * @public
 */
export declare class OnChanged extends OnUUIDEvent<'onChange'> {
    readonly type: string;
    constructor(callback: (event: IEvents['onChange']) => void);
}
/**
 * @public
 */
export declare type OnPointerUUIDEventOptions = {
    button?: ActionButton;
    hoverText?: string;
    showFeedback?: boolean;
    distance?: number;
};
/**
 * @public
 */
export declare class OnClick extends OnPointerUUIDEvent<'onClick'> {
    readonly type: string;
    constructor(callback: (event: IEvents['onClick']) => void);
    constructor(callback: (event: IEvents['onClick']) => void, options: OnPointerUUIDEventOptions);
}
/**
 * @public
 */
export declare class OnPointerDown extends OnPointerUUIDEvent<'pointerDown'> {
    readonly type: string;
    constructor(callback: (event: IEvents['pointerDown']) => void);
    constructor(callback: (event: IEvents['pointerDown']) => void, options: OnPointerUUIDEventOptions);
}
/**
 * @public
 */
export declare class OnPointerUp extends OnPointerUUIDEvent<'pointerUp'> {
    readonly type: string;
    constructor(callback: (event: IEvents['pointerUp']) => void);
    constructor(callback: (event: IEvents['pointerUp']) => void, options: OnPointerUUIDEventOptions);
}
