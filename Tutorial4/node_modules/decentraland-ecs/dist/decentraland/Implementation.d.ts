import { Engine } from '../ecs/Engine';
import { IEntity, ISystem } from '../ecs/IEntity';
import { DecentralandInterface } from './Types';
export declare class DecentralandSynchronizationSystem implements ISystem {
    dcl: DecentralandInterface;
    cachedComponents: Record<string, Record<string, string>>;
    engine: Engine;
    constructor(dcl: DecentralandInterface);
    activate(engine: Engine): void;
    /**
     * system.onAddEntity is called by the engine when a entity is added to the
     * engine.
     */
    onAddEntity(entity: IEntity): void;
    /**
     * system.onRemoveEntity is called by the engine when a entity gets removed
     * from the engine.
     */
    onRemoveEntity(entity: IEntity): void;
    /**
     * This method is called at the end of every update cycle.
     * It finds and sends updates in components of the engine entities.
     */
    private presentEntities;
    /**
     * This method is called after a component is added to an entity. The event
     * (param 1) contains the necessary information to notify the engine about the
     * component that was added and the entity.
     */
    private componentAdded;
    /**
     * This method is called when a component is removed from an entity.
     */
    private componentRemoved;
    /**
     * This method is called after a disposableComponent is created.
     * It instantiates the component in the engine, the event that updates the
     * created component is fired immediatly after.
     */
    private disposableComponentCreated;
    /**
     * This method is called after a disposableComponent is updated, once per
     * update cycle and once after creation.
     */
    private disposableComponentRemoved;
    /**
     * This method is called right after a diposableComponent gets disposed. That
     * process is manual.
     *
     * TODO(menduz,dani): What happens if a disposableComponent gets disposed and
     * it remains attached to some entities?
     */
    private disposableComponentUpdated;
    /**
     * This method is called when a parent changes in an entity.
     */
    private parentChanged;
    private getJsonIfDirty;
    private clearDirty;
}
