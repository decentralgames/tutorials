import { GlobalInputEventResult } from './Types';
import { Vector3 } from './math';
/** @public */
export declare type InputEventKind = 'BUTTON_DOWN' | 'BUTTON_UP';
/**
 * @public
 */
export declare enum ActionButton {
    POINTER = "POINTER",
    PRIMARY = "PRIMARY",
    SECONDARY = "SECONDARY",
    ANY = "ANY"
}
/** @public */
export declare type InputState = Record<ActionButton, {
    BUTTON_DOWN: boolean;
}>;
/** @public */
export declare type LocalActionButtonEvent = GlobalInputEventResult & {
    origin: Vector3;
    direction: Vector3;
    button: ActionButton;
    hit?: GlobalInputEventResult['hit'] & {
        hitPoint: Vector3;
        normal: Vector3;
        worldNormal: Vector3;
    };
};
/**
 * @public
 */
export declare class PointerEventComponent {
    readonly callback: (event: LocalActionButtonEvent) => void;
    constructor(callback: (event: LocalActionButtonEvent) => void);
}
/**
 * @public
 */
export declare class GlobalPointerDown extends PointerEventComponent {
}
/**
 * @public
 */
export declare class GlobalPointerUp extends PointerEventComponent {
}
declare class Subscription {
    fn: (e: LocalActionButtonEvent) => void;
    useRaycast: boolean;
    constructor(fn: (e: LocalActionButtonEvent) => void, useRaycast: boolean);
}
/**
 * @public
 */
export declare class Input {
    private static _instance;
    static get instance(): Input;
    private subscriptions;
    private internalState;
    private constructor();
    static ensureInstance(): any;
    /**
     * Allows to know if a button is pressed
     *
     * Returns true if the button is pressed
     * @param buttonId - The id of the button.
     */
    isButtonPressed(buttonId: ActionButton): {
        BUTTON_DOWN: boolean;
    };
    /**
     * Subscribes to an input event and triggers the provided callback.
     *
     * Returns a function that can be called to remove the subscription.
     * @param eventName - The name of the event (see InputEventKind).
     * @param buttonId - The id of the button.
     * @param useRaycast - Enables getting raycast information.
     * @param fn - A callback function to be called when the event is triggered.
     */
    subscribe(eventName: InputEventKind, buttonId: ActionButton, useRaycast: boolean, fn: (e: LocalActionButtonEvent) => void): () => false | Subscription[];
    /**
     * Removes an existing input event subscription.
     * @param eventName - The name of the event (see InputEventKind).
     * @param buttonId - The id of the button.
     * @param fn - The callback function used when subscribing to the event.
     */
    unsubscribe(eventName: InputEventKind, buttonId: ActionButton, fn: (e: LocalActionButtonEvent) => void): false | Subscription[];
    handlePointerEvent(data: GlobalInputEventResult): void;
    private getSubscriptionId;
    private getPointerById;
}
export {};
