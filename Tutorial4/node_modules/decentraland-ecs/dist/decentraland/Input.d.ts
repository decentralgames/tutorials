import { PointerEvent } from './Types';
import { Vector3 } from './math';
/** @public */
export declare type InputEventKind = 'BUTTON_DOWN' | 'BUTTON_UP';
/**
 * @public
 */
export declare enum Pointer {
    PRIMARY = "PRIMARY",
    SECONDARY = "SECONDARY"
}
/** @public */
export declare type InputState = Record<Pointer, {
    BUTTON_DOWN: boolean;
}>;
/** @public */
export declare type LocalPointerEvent = PointerEvent & {
    origin: Vector3;
    direction: Vector3;
    pointer: Pointer;
    hit?: PointerEvent['hit'] & {
        hitPoint: Vector3;
        normal: Vector3;
        worldNormal: Vector3;
    };
};
/**
 * @public
 */
export declare class PointerEventComponent {
    readonly callback: (event: LocalPointerEvent) => void;
    constructor(callback: (event: LocalPointerEvent) => void);
}
/**
 * @public
 */
export declare class OnPointerDown extends PointerEventComponent {
}
/**
 * @public
 */
export declare class OnPointerUp extends PointerEventComponent {
}
/**
 * @public
 */
export declare class Input {
    private static _instance;
    static readonly instance: Input;
    readonly state: Readonly<InputState>;
    private subscriptions;
    private internalState;
    private constructor();
    static ensureInstance(): any;
    /**
     * Subscribes to an input event and triggers the provided callback.
     *
     * Returns a function that can be called to remove the subscription.
     * @param eventName - The name of the event (see InputEventKind).
     * @param fn - A callback function to be called when the event is triggered.
     */
    subscribe(eventName: InputEventKind, fn: (e: LocalPointerEvent) => void): () => false | ((e: LocalPointerEvent) => void)[];
    /**
     * Removes an existing input event subscription.
     * @param eventName - The name of the event (see InputEventKind).
     * @param fn - The callback function used when subscribing to the event.
     */
    unsubscribe(eventName: InputEventKind, fn: (e: LocalPointerEvent) => void): false | ((e: LocalPointerEvent) => void)[];
    private getPointerById;
    private handlePointerUp;
    private handlePointerDown;
}
