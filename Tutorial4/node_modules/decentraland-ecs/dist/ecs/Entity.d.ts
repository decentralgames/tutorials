import { ComponentConstructor } from './Component';
import { IEntity } from './IEntity';
import { EventManager } from './EventManager';
/**
 * @public
 */
export declare class Entity implements IEntity {
    name?: string | undefined;
    children: Record<string, IEntity>;
    eventManager: EventManager | null;
    alive: boolean;
    readonly uuid: string;
    readonly components: Record<string, any>;
    constructor(name?: string | undefined);
    /**
     * Adds or replaces a component in the entity.
     * @param component - component instance.
     */
    addComponentOrReplace<T extends object>(component: T): T;
    /**
     * Returns a boolean indicating if a component is present in the entity.
     * @param component - component class, instance or name
     */
    hasComponent<T = any>(component: string): boolean;
    hasComponent<T>(component: ComponentConstructor<T>): boolean;
    hasComponent<T extends object>(component: T): boolean;
    /**
     * Gets a component, if it doesn't exist, it throws an Error.
     * @param component - component class or name
     */
    getComponent<T = any>(component: string): T;
    getComponent<T>(component: ComponentConstructor<T>): T;
    /**
     * Gets a component, if it doesn't exist, it returns null.
     * @param component - component class or name
     */
    getComponentOrNull<T = any>(component: string): T | null;
    getComponentOrNull<T>(component: ComponentConstructor<T>): T | null;
    /**
     * Gets a component, if it doesn't exist, it creates the component and returns it.
     * @param component - component class
     */
    getComponentOrCreate<T>(component: ComponentConstructor<T> & {
        new (): T;
    }): T;
    /**
     * Adds a component. If the component already exist, it throws an Error.
     * @param component - component instance.
     */
    addComponent<T extends object>(component: T): T;
    /**
     * Removes a component instance from the entity.
     * @param component - component instance to remove
     * @param triggerRemovedEvent - should this action trigger an event?
     */
    removeComponent(component: string, triggerRemovedEvent?: boolean): void;
    removeComponent<T extends object>(component: T, triggerRemovedEvent?: boolean): void;
    removeComponent(component: ComponentConstructor<any>, triggerRemovedEvent?: boolean): void;
    /**
     * Returns true if the entity is already added to the engine.
     * Returns false if no engine was defined.
     */
    isAddedToEngine(): boolean;
    /**
     * Sets the parent entity
     */
    setParent(_parent: IEntity | null): IEntity;
    /**
     * Gets the parent entity
     */
    getParent(): IEntity | null;
    private readonly identifier;
    private getCircularAncestor;
    private registerAsChild;
}
