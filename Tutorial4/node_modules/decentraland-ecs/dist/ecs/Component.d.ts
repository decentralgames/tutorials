/**
 * @public
 */
export interface ComponentLike {
}
/**
 * @public
 */
export interface DisposableComponentLike extends ComponentLike {
    onDispose?(): void;
}
/**
 * @public
 */
export interface ComponentConstructor<T extends ComponentLike> {
    isComponent?: boolean;
    originalClassName?: string;
    new (...args: any[]): T;
}
/**
 * @public
 */
export interface DisposableComponentConstructor<T extends DisposableComponentLike> {
    isComponent?: boolean;
    isDisposableComponent?: true;
    originalClassName?: string;
    new (...args: any[]): T;
}
/**
 * @public
 */
export declare class DisposableComponentCreated {
    componentId: string;
    componentName: string;
    classId: number;
    constructor(componentId: string, componentName: string, classId: number);
}
/**
 * @public
 */
export declare class DisposableComponentRemoved {
    componentId: string;
    constructor(componentId: string);
}
/**
 * @public
 */
export declare class DisposableComponentUpdated {
    componentId: string;
    component: DisposableComponentLike;
    constructor(componentId: string, component: DisposableComponentLike);
}
/**
 * @public
 */
export declare function Component(componentName: string, classId?: number): <TFunction extends ComponentConstructor<any>>(target: TFunction) => void | TFunction;
/**
 * @public
 */
export declare function DisposableComponent(componentName: string, classId: number): <TFunction extends DisposableComponentConstructor<any>>(target: TFunction) => void | TFunction;
/**
 * @public
 */
export declare function getComponentName<T extends Record<any, any> = any>(component: T | ComponentConstructor<T>): string;
/**
 * @public
 */
export declare function getComponentClassId<T extends Record<any, any> = any>(component: T | ComponentConstructor<T>): number | null;
/**
 * @public
 */
export declare function getComponentId<T extends DisposableComponentLike>(component: T): string;
/** @public */
export declare type ObservableComponentSubscription = (key: string, newVal: any, oldVal: any) => void;
/**
 * @public
 */
export declare class ObservableComponent {
    dirty: boolean;
    data: any;
    private subscriptions;
    static component(target: ObservableComponent, propertyKey: string): void;
    static field(target: ObservableComponent, propertyKey: string): void;
    static uiValue(target: ObservableComponent, propertyKey: string): void;
    static readonly(target: ObservableComponent, propertyKey: string): void;
    onChange(fn: ObservableComponentSubscription): this;
    toJSON(): any;
}
/**
 * @public
 */
export declare function isDisposableComponent(component: ComponentLike): boolean;
