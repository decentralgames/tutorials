### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Scalar
    summary: Scalar computation library
    name: Scalar
    fullName: Scalar
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Scalar.Clamp
      - decentraland-ecs.Scalar.DeltaAngle
      - decentraland-ecs.Scalar.Denormalize
      - decentraland-ecs.Scalar.Hermite
      - decentraland-ecs.Scalar.InverseLerp
      - decentraland-ecs.Scalar.Lerp
      - decentraland-ecs.Scalar.LerpAngle
      - decentraland-ecs.Scalar.Log2
      - decentraland-ecs.Scalar.MoveTowards
      - decentraland-ecs.Scalar.MoveTowardsAngle
      - decentraland-ecs.Scalar.Normalize
      - decentraland-ecs.Scalar.NormalizeRadians
      - decentraland-ecs.Scalar.PercentToRange
      - decentraland-ecs.Scalar.PingPong
      - decentraland-ecs.Scalar.RandomRange
      - decentraland-ecs.Scalar.RangeToPercent
      - decentraland-ecs.Scalar.Repeat
      - decentraland-ecs.Scalar.Sign
      - decentraland-ecs.Scalar.SmoothStep
      - decentraland-ecs.Scalar.ToHex
      - decentraland-ecs.Scalar.TwoPi
      - decentraland-ecs.Scalar.WithinEpsilon
  - uid: decentraland-ecs.Scalar.Clamp
    summary: >-
      Returns the value itself if it's between min and max. Returns min if the value is lower than min. Returns max if
      the value is greater than max.
    name: 'Clamp(value, min, max)'
    fullName: 'Clamp(value, min, max)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Clamp(value: number, min?: number, max?: number): number;'
      return:
        type:
          - number
        description: the clamped value
      parameters:
        - id: value
          description: the value to clmap
          type:
            - number
        - id: min
          description: 'the min value to clamp to (default: 0)'
          type:
            - number
        - id: max
          description: 'the max value to clamp to (default: 1)'
          type:
            - number
  - uid: decentraland-ecs.Scalar.DeltaAngle
    summary: Calculates the shortest difference between two given angles given in degrees.
    name: 'DeltaAngle(current, target)'
    fullName: 'DeltaAngle(current, target)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static DeltaAngle(current: number, target: number): number;'
      return:
        type:
          - number
        description: the delta
      parameters:
        - id: current
          description: current angle in degrees
          type:
            - number
        - id: target
          description: target angle in degrees
          type:
            - number
  - uid: decentraland-ecs.Scalar.Denormalize
    summary: Denormalize the value from 0.0 and 1.0 using min and max values
    name: 'Denormalize(normalized, min, max)'
    fullName: 'Denormalize(normalized, min, max)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Denormalize(normalized: number, min: number, max: number): number;'
      return:
        type:
          - number
        description: the denormalized value
      parameters:
        - id: normalized
          description: value to denormalize
          type:
            - number
        - id: min
          description: max to denormalize between
          type:
            - number
        - id: max
          description: min to denormalize between
          type:
            - number
  - uid: decentraland-ecs.Scalar.Hermite
    summary: >-
      Returns a new scalar located for "amount" (float) on the Hermite spline defined by the scalars "value1", "value3",
      "tangent1", "tangent2".
      [http://mathworld.wolfram.com/HermitePolynomial.html](http://mathworld.wolfram.com/HermitePolynomial.html)
    name: 'Hermite(value1, tangent1, value2, tangent2, amount)'
    fullName: 'Hermite(value1, tangent1, value2, tangent2, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Hermite(value1: number, tangent1: number, value2: number, tangent2: number, amount: number): number;'
      return:
        type:
          - number
        description: hermite result
      parameters:
        - id: value1
          description: spline value
          type:
            - number
        - id: tangent1
          description: spline value
          type:
            - number
        - id: value2
          description: spline value
          type:
            - number
        - id: tangent2
          description: spline value
          type:
            - number
        - id: amount
          description: input value
          type:
            - number
  - uid: decentraland-ecs.Scalar.InverseLerp
    summary: 'Calculates the linear parameter t that produces the interpolant value within the range \[a, b\].'
    name: 'InverseLerp(a, b, value)'
    fullName: 'InverseLerp(a, b, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static InverseLerp(a: number, b: number, value: number): number;'
      return:
        type:
          - number
        description: the inverseLerp value
      parameters:
        - id: a
          description: start value
          type:
            - number
        - id: b
          description: target value
          type:
            - number
        - id: value
          description: value between a and b
          type:
            - number
  - uid: decentraland-ecs.Scalar.Lerp
    summary: Creates a new scalar with values linearly interpolated of "amount" between the start scalar and the end scalar.
    name: 'Lerp(start, end, amount)'
    fullName: 'Lerp(start, end, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Lerp(start: number, end: number, amount: number): number;'
      return:
        type:
          - number
        description: the lerped value
      parameters:
        - id: start
          description: start value
          type:
            - number
        - id: end
          description: target value
          type:
            - number
        - id: amount
          description: amount to lerp between
          type:
            - number
  - uid: decentraland-ecs.Scalar.LerpAngle
    summary: >-
      Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees. The parameter t is
      clamped to the range \[0, 1\]. Variables a and b are assumed to be in degrees.
    name: 'LerpAngle(start, end, amount)'
    fullName: 'LerpAngle(start, end, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LerpAngle(start: number, end: number, amount: number): number;'
      return:
        type:
          - number
        description: the lerped value
      parameters:
        - id: start
          description: start value
          type:
            - number
        - id: end
          description: target value
          type:
            - number
        - id: amount
          description: amount to lerp between
          type:
            - number
  - uid: decentraland-ecs.Scalar.Log2
    summary: the log2 of value.
    name: Log2(value)
    fullName: Log2(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Log2(value: number): number;'
      return:
        type:
          - number
        description: the log2 of value.
      parameters:
        - id: value
          description: the value to compute log2 of
          type:
            - number
  - uid: decentraland-ecs.Scalar.MoveTowards
    summary: >-
      Moves a value current towards target.


      This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds
      maxDelta. Negative values of maxDelta pushes the value away from target.
    name: 'MoveTowards(current, target, maxDelta)'
    fullName: 'MoveTowards(current, target, maxDelta)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static MoveTowards(current: number, target: number, maxDelta: number): number;'
      return:
        type:
          - number
        description: resulting value
      parameters:
        - id: current
          description: current value
          type:
            - number
        - id: target
          description: target value
          type:
            - number
        - id: maxDelta
          description: max distance to move
          type:
            - number
  - uid: decentraland-ecs.Scalar.MoveTowardsAngle
    summary: >-
      Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.


      Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta
      are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle
      instead.
    name: 'MoveTowardsAngle(current, target, maxDelta)'
    fullName: 'MoveTowardsAngle(current, target, maxDelta)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static MoveTowardsAngle(current: number, target: number, maxDelta: number): number;'
      return:
        type:
          - number
        description: resulting angle
      parameters:
        - id: current
          description: current value
          type:
            - number
        - id: target
          description: target value
          type:
            - number
        - id: maxDelta
          description: max distance to move
          type:
            - number
  - uid: decentraland-ecs.Scalar.Normalize
    summary: Normalize the value between 0.0 and 1.0 using min and max values
    name: 'Normalize(value, min, max)'
    fullName: 'Normalize(value, min, max)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Normalize(value: number, min: number, max: number): number;'
      return:
        type:
          - number
        description: the normalized value
      parameters:
        - id: value
          description: value to normalize
          type:
            - number
        - id: min
          description: max to normalize between
          type:
            - number
        - id: max
          description: min to normalize between
          type:
            - number
  - uid: decentraland-ecs.Scalar.NormalizeRadians
    summary: Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.
    name: NormalizeRadians(angle)
    fullName: NormalizeRadians(angle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static NormalizeRadians(angle: number): number;'
      return:
        type:
          - number
        description: The converted angle.
      parameters:
        - id: angle
          description: The angle to normalize in radian.
          type:
            - number
  - uid: decentraland-ecs.Scalar.PercentToRange
    summary: |-
      This function returns number that corresponds to the percentage in a given range.

      PercentToRange(0.34,0,100) will return 34.
    name: 'PercentToRange(percent, min, max)'
    fullName: 'PercentToRange(percent, min, max)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static PercentToRange(percent: number, min: number, max: number): number;'
      return:
        type:
          - number
        description: the number
      parameters:
        - id: percent
          description: to convert to number
          type:
            - number
        - id: min
          description: min range
          type:
            - number
        - id: max
          description: max range
          type:
            - number
  - uid: decentraland-ecs.Scalar.PingPong
    summary: 'PingPongs the value t, so that it is never larger than length and never smaller than 0.'
    name: 'PingPong(tx, length)'
    fullName: 'PingPong(tx, length)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static PingPong(tx: number, length: number): number;'
      return:
        type:
          - number
        description: The returned value will move back and forth between 0 and length
      parameters:
        - id: tx
          description: value
          type:
            - number
        - id: length
          description: length
          type:
            - number
  - uid: decentraland-ecs.Scalar.RandomRange
    summary: Returns a random float number between and min and max values
    name: 'RandomRange(min, max)'
    fullName: 'RandomRange(min, max)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RandomRange(min: number, max: number): number;'
      return:
        type:
          - number
        description: random value
      parameters:
        - id: min
          description: min value of random
          type:
            - number
        - id: max
          description: max value of random
          type:
            - number
  - uid: decentraland-ecs.Scalar.RangeToPercent
    summary: |-
      This function returns percentage of a number in a given range.

      RangeToPercent(40,20,60) will return 0.5 (50%) RangeToPercent(34,0,100) will return 0.34 (34%)
    name: 'RangeToPercent(num, min, max)'
    fullName: 'RangeToPercent(num, min, max)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RangeToPercent(num: number, min: number, max: number): number;'
      return:
        type:
          - number
        description: the percentage
      parameters:
        - id: num
          description: to convert to percentage
          type:
            - number
        - id: min
          description: min range
          type:
            - number
        - id: max
          description: max range
          type:
            - number
  - uid: decentraland-ecs.Scalar.Repeat
    summary: >-
      Loops the value, so that it is never larger than length and never smaller than 0.


      This is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for t and
      2.5 for length, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that
      the behaviour is not defined for negative numbers as it is for the modulo operator
    name: 'Repeat(value, length)'
    fullName: 'Repeat(value, length)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Repeat(value: number, length: number): number;'
      return:
        type:
          - number
        description: the looped value
      parameters:
        - id: value
          description: the value
          type:
            - number
        - id: length
          description: the length
          type:
            - number
  - uid: decentraland-ecs.Scalar.Sign
    summary: Returns -1 if value is negative and +1 is value is positive.
    name: Sign(value)
    fullName: Sign(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Sign(value: number): number;'
      return:
        type:
          - number
        description: the value itself if it's equal to zero.
      parameters:
        - id: value
          description: ''
          type:
            - number
  - uid: decentraland-ecs.Scalar.SmoothStep
    summary: >-
      Interpolates between min and max with smoothing at the limits.


      This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually
      speed up from the start and slow down toward the end. This is useful for creating natural-looking animation,
      fading and other transitions.
    name: 'SmoothStep(from, to, tx)'
    fullName: 'SmoothStep(from, to, tx)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static SmoothStep(from: number, to: number, tx: number): number;'
      return:
        type:
          - number
        description: the smooth stepped value
      parameters:
        - id: from
          description: from
          type:
            - number
        - id: to
          description: to
          type:
            - number
        - id: tx
          description: value
          type:
            - number
  - uid: decentraland-ecs.Scalar.ToHex
    summary: 'Returns a string : the upper case translation of the number i to hexadecimal.'
    name: ToHex(i)
    fullName: ToHex(i)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static ToHex(i: number): string;'
      return:
        type:
          - string
        description: the upper case translation of the number i to hexadecimal.
      parameters:
        - id: i
          description: number
          type:
            - number
  - uid: decentraland-ecs.Scalar.TwoPi
    summary: Two pi constants convenient for computation.
    name: TwoPi
    fullName: TwoPi
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static TwoPi: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Scalar.WithinEpsilon
    summary: 'Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)'
    name: 'WithinEpsilon(a, b, epsilon)'
    fullName: 'WithinEpsilon(a, b, epsilon)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static WithinEpsilon(a: number, b: number, epsilon?: number): boolean;'
      return:
        type:
          - boolean
        description: true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)
      parameters:
        - id: a
          description: number
          type:
            - number
        - id: b
          description: number
          type:
            - number
        - id: epsilon
          description: (default = 1.401298E-45)
          type:
            - number
