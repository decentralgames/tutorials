### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Matrix
    summary: Class used to store matrix data (4x4)
    name: Matrix
    fullName: Matrix
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Matrix.(constructor)
      - decentraland-ecs.Matrix.add
      - decentraland-ecs.Matrix.addAtIndex
      - decentraland-ecs.Matrix.addToRef
      - decentraland-ecs.Matrix.addToSelf
      - decentraland-ecs.Matrix.asArray
      - decentraland-ecs.Matrix.clone
      - decentraland-ecs.Matrix.Compose
      - decentraland-ecs.Matrix.ComposeToRef
      - decentraland-ecs.Matrix.copyFrom
      - decentraland-ecs.Matrix.copyToArray
      - decentraland-ecs.Matrix.decompose
      - decentraland-ecs.Matrix.DecomposeLerp
      - decentraland-ecs.Matrix.DecomposeLerpToRef
      - decentraland-ecs.Matrix.determinant
      - decentraland-ecs.Matrix.equals
      - decentraland-ecs.Matrix.FromArray
      - decentraland-ecs.Matrix.FromArrayToRef
      - decentraland-ecs.Matrix.FromFloatArrayToRefScaled
      - decentraland-ecs.Matrix.FromQuaternionToRef
      - decentraland-ecs.Matrix.FromValues
      - decentraland-ecs.Matrix.FromValuesToRef
      - decentraland-ecs.Matrix.FromXYZAxesToRef
      - decentraland-ecs.Matrix.GetAsMatrix2x2
      - decentraland-ecs.Matrix.GetAsMatrix3x3
      - decentraland-ecs.Matrix.getClassName
      - decentraland-ecs.Matrix.getHashCode
      - decentraland-ecs.Matrix.getRotationMatrix
      - decentraland-ecs.Matrix.getRotationMatrixToRef
      - decentraland-ecs.Matrix.getRow
      - decentraland-ecs.Matrix.getTranslation
      - decentraland-ecs.Matrix.getTranslationToRef
      - decentraland-ecs.Matrix.Identity
      - decentraland-ecs.Matrix.IdentityReadOnly
      - decentraland-ecs.Matrix.IdentityToRef
      - decentraland-ecs.Matrix.invert
      - decentraland-ecs.Matrix.Invert
      - decentraland-ecs.Matrix.invertToRef
      - decentraland-ecs.Matrix.isIdentity
      - decentraland-ecs.Matrix.isIdentityAs3x2
      - decentraland-ecs.Matrix.Lerp
      - decentraland-ecs.Matrix.LerpToRef
      - decentraland-ecs.Matrix.LookAtLH
      - decentraland-ecs.Matrix.LookAtLHToRef
      - decentraland-ecs.Matrix.LookAtRH
      - decentraland-ecs.Matrix.LookAtRHToRef
      - decentraland-ecs.Matrix.m
      - decentraland-ecs.Matrix.multiply
      - decentraland-ecs.Matrix.multiplyAtIndex
      - decentraland-ecs.Matrix.multiplyToArray
      - decentraland-ecs.Matrix.multiplyToRef
      - decentraland-ecs.Matrix.OrthoLH
      - decentraland-ecs.Matrix.OrthoLHToRef
      - decentraland-ecs.Matrix.OrthoOffCenterLH
      - decentraland-ecs.Matrix.OrthoOffCenterLHToRef
      - decentraland-ecs.Matrix.OrthoOffCenterRH
      - decentraland-ecs.Matrix.OrthoOffCenterRHToRef
      - decentraland-ecs.Matrix.PerspectiveFovLH
      - decentraland-ecs.Matrix.PerspectiveFovLHToRef
      - decentraland-ecs.Matrix.PerspectiveFovRH
      - decentraland-ecs.Matrix.PerspectiveFovRHToRef
      - decentraland-ecs.Matrix.PerspectiveFovWebVRToRef
      - decentraland-ecs.Matrix.PerspectiveLH
      - decentraland-ecs.Matrix.Reflection
      - decentraland-ecs.Matrix.ReflectionToRef
      - decentraland-ecs.Matrix.removeRotationAndScaling
      - decentraland-ecs.Matrix.reset
      - decentraland-ecs.Matrix.RotationAxis
      - decentraland-ecs.Matrix.RotationAxisToRef
      - decentraland-ecs.Matrix.RotationX
      - decentraland-ecs.Matrix.RotationXToRef
      - decentraland-ecs.Matrix.RotationY
      - decentraland-ecs.Matrix.RotationYawPitchRoll
      - decentraland-ecs.Matrix.RotationYawPitchRollToRef
      - decentraland-ecs.Matrix.RotationYToRef
      - decentraland-ecs.Matrix.RotationZ
      - decentraland-ecs.Matrix.RotationZToRef
      - decentraland-ecs.Matrix.scale
      - decentraland-ecs.Matrix.scaleAndAddToRef
      - decentraland-ecs.Matrix.scaleToRef
      - decentraland-ecs.Matrix.Scaling
      - decentraland-ecs.Matrix.ScalingToRef
      - decentraland-ecs.Matrix.setRow
      - decentraland-ecs.Matrix.setRowFromFloats
      - decentraland-ecs.Matrix.setTranslation
      - decentraland-ecs.Matrix.setTranslationFromFloats
      - decentraland-ecs.Matrix.toArray
      - decentraland-ecs.Matrix.toggleModelMatrixHandInPlace
      - decentraland-ecs.Matrix.toggleProjectionMatrixHandInPlace
      - decentraland-ecs.Matrix.toNormalMatrix
      - decentraland-ecs.Matrix.Translation
      - decentraland-ecs.Matrix.TranslationToRef
      - decentraland-ecs.Matrix.transpose
      - decentraland-ecs.Matrix.Transpose
      - decentraland-ecs.Matrix.transposeToRef
      - decentraland-ecs.Matrix.TransposeToRef
      - decentraland-ecs.Matrix.updateFlag
      - decentraland-ecs.Matrix.Zero
  - uid: decentraland-ecs.Matrix.(constructor)
    summary: Creates an empty matrix (filled with zeros)
    name: (constructor)()
    fullName: (constructor)()
    langs:
      - typeScript
    type: constructor
    syntax:
      content: constructor();
  - uid: decentraland-ecs.Matrix.add
    summary: Adds the current matrix with a second one
    name: add(other)
    fullName: add(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(other: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix as the addition of the current matrix and the given one
      parameters:
        - id: other
          description: defines the matrix to add
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.addAtIndex
    summary: add a value at the specified position in the current Matrix
    name: 'addAtIndex(index, value)'
    fullName: 'addAtIndex(index, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAtIndex(index: number, value: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current updated matrix
      parameters:
        - id: index
          description: the index of the value within the matrix. between 0 and 15.
          type:
            - number
        - id: value
          description: the value to be added
          type:
            - number
  - uid: decentraland-ecs.Matrix.addToRef
    summary: Sets the given matrix "result" to the addition of the current matrix and the given one
    name: 'addToRef(other, result)'
    fullName: 'addToRef(other, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addToRef(other: Matrix, result: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: other
          description: defines the matrix to add
          type:
            - decentraland-ecs.Matrix
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.addToSelf
    summary: Adds in place the given matrix to the current matrix
    name: addToSelf(other)
    fullName: addToSelf(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addToSelf(other: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current updated matrix
      parameters:
        - id: other
          description: defines the second operand
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.asArray
    summary: Returns the matrix as a FloatArray
    name: asArray()
    fullName: asArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'asArray(): Readonly<FloatArray>;'
      return:
        type:
          - Readonly<FloatArray>
        description: the matrix underlying array.
  - uid: decentraland-ecs.Matrix.clone
    summary: Clone the current matrix
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix from the current matrix
  - uid: decentraland-ecs.Matrix.Compose
    summary: 'Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)'
    name: 'Compose(scale, rotation, translation)'
    fullName: 'Compose(scale, rotation, translation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Compose(scale: Vector3, rotation: Quaternion, translation: Vector3): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix
      parameters:
        - id: scale
          description: defines the scale vector3
          type:
            - decentraland-ecs.Vector3
        - id: rotation
          description: defines the rotation quaternion
          type:
            - decentraland-ecs.Quaternion
        - id: translation
          description: defines the translation vector3
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Matrix.ComposeToRef
    summary: 'Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)'
    name: 'ComposeToRef(scale, rotation, translation, result)'
    fullName: 'ComposeToRef(scale, rotation, translation, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static ComposeToRef(scale: Vector3, rotation: Quaternion, translation: Vector3, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: scale
          description: defines the scale vector3
          type:
            - decentraland-ecs.Vector3
        - id: rotation
          description: defines the rotation quaternion
          type:
            - decentraland-ecs.Quaternion
        - id: translation
          description: defines the translation vector3
          type:
            - decentraland-ecs.Vector3
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.copyFrom
    summary: Copy the current matrix from the given one
    name: copyFrom(other)
    fullName: copyFrom(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(other: Readonly<Matrix>): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current updated matrix
      parameters:
        - id: other
          description: defines the source matrix
          type:
            - Readonly<Matrix>
  - uid: decentraland-ecs.Matrix.copyToArray
    summary: Populates the given array from the starting index with the current matrix values
    name: 'copyToArray(array, offset)'
    fullName: 'copyToArray(array, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyToArray(array: FloatArray, offset?: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: array
          description: defines the target array
          type:
            - FloatArray
        - id: offset
          description: defines the offset in the target array where to start storing values
          type:
            - number
  - uid: decentraland-ecs.Matrix.decompose
    summary: 'Decomposes the current Matrix into a translation, rotation and scaling components'
    name: 'decompose(scale, rotation, translation)'
    fullName: 'decompose(scale, rotation, translation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'decompose(scale?: Vector3, rotation?: Quaternion, translation?: Vector3): boolean;'
      return:
        type:
          - boolean
        description: true if operation was successful
      parameters:
        - id: scale
          description: defines the scale vector3 given as a reference to update
          type:
            - decentraland-ecs.Vector3
        - id: rotation
          description: defines the rotation quaternion given as a reference to update
          type:
            - decentraland-ecs.Quaternion
        - id: translation
          description: defines the translation vector3 given as a reference to update
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Matrix.DecomposeLerp
    summary: >-
      Builds a new matrix whose values are computed by: \* decomposing the the "startValue" and "endValue" matrices into
      their respective scale, rotation and translation matrices \* interpolating for "gradient" (float) the values
      between each of these decomposed matrices between the start and the end \* recomposing a new matrix from these 3
      interpolated scale, rotation and translation matrices
    name: 'DecomposeLerp(startValue, endValue, gradient)'
    fullName: 'DecomposeLerp(startValue, endValue, gradient)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static DecomposeLerp(startValue: Matrix, endValue: Matrix, gradient: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: startValue
          description: defines the first matrix
          type:
            - decentraland-ecs.Matrix
        - id: endValue
          description: defines the second matrix
          type:
            - decentraland-ecs.Matrix
        - id: gradient
          description: defines the gradient between the two matrices
          type:
            - number
  - uid: decentraland-ecs.Matrix.DecomposeLerpToRef
    summary: >-
      Update a matrix to values which are computed by: \* decomposing the the "startValue" and "endValue" matrices into
      their respective scale, rotation and translation matrices \* interpolating for "gradient" (float) the values
      between each of these decomposed matrices between the start and the end \* recomposing a new matrix from these 3
      interpolated scale, rotation and translation matrices
    name: 'DecomposeLerpToRef(startValue, endValue, gradient, result)'
    fullName: 'DecomposeLerpToRef(startValue, endValue, gradient, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static DecomposeLerpToRef(startValue: Matrix, endValue: Matrix, gradient: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: startValue
          description: defines the first matrix
          type:
            - decentraland-ecs.Matrix
        - id: endValue
          description: defines the second matrix
          type:
            - decentraland-ecs.Matrix
        - id: gradient
          description: defines the gradient between the two matrices
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.determinant
    summary: Gets the determinant of the matrix
    name: determinant()
    fullName: determinant()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'determinant(): number;'
      return:
        type:
          - number
        description: the matrix determinant
  - uid: decentraland-ecs.Matrix.equals
    summary: Check equality between this matrix and a second one
    name: equals(value)
    fullName: equals(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equals(value: Matrix): boolean;'
      return:
        type:
          - boolean
        description: true is the current matrix and the given one values are strictly equal
      parameters:
        - id: value
          description: defines the second matrix to compare
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.FromArray
    summary: Creates a matrix from an array
    name: 'FromArray(array, offset)'
    fullName: 'FromArray(array, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArray(array: ArrayLike<number>, offset?: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new Matrix set from the starting index of the given array
      parameters:
        - id: array
          description: defines the source array
          type:
            - ArrayLike<number>
        - id: offset
          description: defines an offset in the source array
          type:
            - number
  - uid: decentraland-ecs.Matrix.FromArrayToRef
    summary: Copy the content of an array into a given matrix
    name: 'FromArrayToRef(array, offset, result)'
    fullName: 'FromArrayToRef(array, offset, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: array
          description: defines the source array
          type:
            - ArrayLike<number>
        - id: offset
          description: defines an offset in the source array
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.FromFloatArrayToRefScaled
    summary: Stores an array into a matrix after having multiplied each component by a given factor
    name: 'FromFloatArrayToRefScaled(array, offset, scale, result)'
    fullName: 'FromFloatArrayToRefScaled(array, offset, scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromFloatArrayToRefScaled(array: FloatArray, offset: number, scale: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: array
          description: defines the source array
          type:
            - FloatArray
        - id: offset
          description: defines the offset in the source array
          type:
            - number
        - id: scale
          description: defines the scaling factor
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.FromQuaternionToRef
    summary: Creates a rotation matrix from a quaternion and stores it in a target matrix
    name: 'FromQuaternionToRef(quat, result)'
    fullName: 'FromQuaternionToRef(quat, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromQuaternionToRef(quat: Quaternion, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: quat
          description: defines the quaternion to use
          type:
            - decentraland-ecs.Quaternion
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.FromValues
    summary: Creates new matrix from a list of values (16)
    name: >-
      FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24,
      initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44)
    fullName: >-
      FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24,
      initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static FromValues(initialM11: number, initialM12: number, initialM13: number, initialM14: number, initialM21:
        number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32: number,
        initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number, initialM44:
        number): Matrix;
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: initialM11
          description: defines 1st value of 1st row
          type:
            - number
        - id: initialM12
          description: defines 2nd value of 1st row
          type:
            - number
        - id: initialM13
          description: defines 3rd value of 1st row
          type:
            - number
        - id: initialM14
          description: defines 4th value of 1st row
          type:
            - number
        - id: initialM21
          description: defines 1st value of 2nd row
          type:
            - number
        - id: initialM22
          description: defines 2nd value of 2nd row
          type:
            - number
        - id: initialM23
          description: defines 3rd value of 2nd row
          type:
            - number
        - id: initialM24
          description: defines 4th value of 2nd row
          type:
            - number
        - id: initialM31
          description: defines 1st value of 3rd row
          type:
            - number
        - id: initialM32
          description: defines 2nd value of 3rd row
          type:
            - number
        - id: initialM33
          description: defines 3rd value of 3rd row
          type:
            - number
        - id: initialM34
          description: defines 4th value of 3rd row
          type:
            - number
        - id: initialM41
          description: defines 1st value of 4th row
          type:
            - number
        - id: initialM42
          description: defines 2nd value of 4th row
          type:
            - number
        - id: initialM43
          description: defines 3rd value of 4th row
          type:
            - number
        - id: initialM44
          description: defines 4th value of 4th row
          type:
            - number
  - uid: decentraland-ecs.Matrix.FromValuesToRef
    summary: Stores a list of values (16) inside a given matrix
    name: >-
      FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24,
      initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result)
    fullName: >-
      FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24,
      initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result)
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static FromValuesToRef(initialM11: number, initialM12: number, initialM13: number, initialM14: number,
        initialM21: number, initialM22: number, initialM23: number, initialM24: number, initialM31: number, initialM32:
        number, initialM33: number, initialM34: number, initialM41: number, initialM42: number, initialM43: number,
        initialM44: number, result: Matrix): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: initialM11
          description: defines 1st value of 1st row
          type:
            - number
        - id: initialM12
          description: defines 2nd value of 1st row
          type:
            - number
        - id: initialM13
          description: defines 3rd value of 1st row
          type:
            - number
        - id: initialM14
          description: defines 4th value of 1st row
          type:
            - number
        - id: initialM21
          description: defines 1st value of 2nd row
          type:
            - number
        - id: initialM22
          description: defines 2nd value of 2nd row
          type:
            - number
        - id: initialM23
          description: defines 3rd value of 2nd row
          type:
            - number
        - id: initialM24
          description: defines 4th value of 2nd row
          type:
            - number
        - id: initialM31
          description: defines 1st value of 3rd row
          type:
            - number
        - id: initialM32
          description: defines 2nd value of 3rd row
          type:
            - number
        - id: initialM33
          description: defines 3rd value of 3rd row
          type:
            - number
        - id: initialM34
          description: defines 4th value of 3rd row
          type:
            - number
        - id: initialM41
          description: defines 1st value of 4th row
          type:
            - number
        - id: initialM42
          description: defines 2nd value of 4th row
          type:
            - number
        - id: initialM43
          description: defines 3rd value of 4th row
          type:
            - number
        - id: initialM44
          description: defines 4th value of 4th row
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.FromXYZAxesToRef
    summary: Sets the given matrix as a rotation matrix composed from the 3 left handed axes
    name: 'FromXYZAxesToRef(xaxis, yaxis, zaxis, result)'
    fullName: 'FromXYZAxesToRef(xaxis, yaxis, zaxis, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromXYZAxesToRef(xaxis: Vector3, yaxis: Vector3, zaxis: Vector3, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xaxis
          description: defines the value of the 1st axis
          type:
            - decentraland-ecs.Vector3
        - id: yaxis
          description: defines the value of the 2nd axis
          type:
            - decentraland-ecs.Vector3
        - id: zaxis
          description: defines the value of the 3rd axis
          type:
            - decentraland-ecs.Vector3
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.GetAsMatrix2x2
    summary: Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray
    name: GetAsMatrix2x2(matrix)
    fullName: GetAsMatrix2x2(matrix)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static GetAsMatrix2x2(matrix: Matrix): FloatArray;'
      return:
        type:
          - FloatArray
        description: 'a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix'
      parameters:
        - id: matrix
          description: defines the matrix to use
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.GetAsMatrix3x3
    summary: Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray
    name: GetAsMatrix3x3(matrix)
    fullName: GetAsMatrix3x3(matrix)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static GetAsMatrix3x3(matrix: Matrix): FloatArray;'
      return:
        type:
          - FloatArray
        description: 'a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix'
      parameters:
        - id: matrix
          description: defines the matrix to use
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.getClassName
    summary: Returns the name of the current matrix class
    name: getClassName()
    fullName: getClassName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getClassName(): string;'
      return:
        type:
          - string
        description: the string "Matrix"
  - uid: decentraland-ecs.Matrix.getHashCode
    summary: Gets the hash code of the current matrix
    name: getHashCode()
    fullName: getHashCode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHashCode(): number;'
      return:
        type:
          - number
        description: the hash code
  - uid: decentraland-ecs.Matrix.getRotationMatrix
    summary: Gets only rotation part of the current matrix
    name: getRotationMatrix()
    fullName: getRotationMatrix()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRotationMatrix(): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix sets to the extracted rotation matrix from the current one
  - uid: decentraland-ecs.Matrix.getRotationMatrixToRef
    summary: Extracts the rotation matrix from the current one and sets it as the given "result"
    name: getRotationMatrixToRef(result)
    fullName: getRotationMatrixToRef(result)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRotationMatrixToRef(result: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: result
          description: defines the target matrix to store data to
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.getRow
    summary: Gets specific row of the matrix
    name: getRow(index)
    fullName: getRow(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(index: number): Nullable<Vector4>;'
      return:
        type:
          - Nullable<Vector4>
        description: the index-th row of the current matrix as a new Vector4
      parameters:
        - id: index
          description: defines the number of the row to get
          type:
            - number
  - uid: decentraland-ecs.Matrix.getTranslation
    summary: Gets the translation value of the current matrix
    name: getTranslation()
    fullName: getTranslation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTranslation(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new Vector3 as the extracted translation from the matrix
  - uid: decentraland-ecs.Matrix.getTranslationToRef
    summary: Fill a Vector3 with the extracted translation from the matrix
    name: getTranslationToRef(result)
    fullName: getTranslationToRef(result)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTranslationToRef(result: Vector3): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: result
          description: defines the Vector3 where to store the translation
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Matrix.Identity
    summary: Creates a new identity matrix
    name: Identity()
    fullName: Identity()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Identity(): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new identity matrix
  - uid: decentraland-ecs.Matrix.IdentityReadOnly
    summary: Gets an identity matrix that must not be updated
    name: IdentityReadOnly
    fullName: IdentityReadOnly
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static readonly IdentityReadOnly: Readonly<Matrix>;'
      return:
        type:
          - Readonly<Matrix>
  - uid: decentraland-ecs.Matrix.IdentityToRef
    summary: Creates a new identity matrix and stores the result in a given matrix
    name: IdentityToRef(result)
    fullName: IdentityToRef(result)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static IdentityToRef(result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.invert
    summary: Inverts the current matrix in place
    name: invert()
    fullName: invert()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'invert(): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current inverted matrix
  - uid: decentraland-ecs.Matrix.Invert
    summary: Creates a new matrix as the invert of a given matrix
    name: Invert(source)
    fullName: Invert(source)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Invert(source: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: source
          description: defines the source matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.invertToRef
    summary: Sets the given matrix to the current inverted Matrix
    name: invertToRef(other)
    fullName: invertToRef(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'invertToRef(other: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the unmodified current matrix
      parameters:
        - id: other
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.isIdentity
    summary: Check if the current matrix is identity
    name: isIdentity()
    fullName: isIdentity()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isIdentity(): boolean;'
      return:
        type:
          - boolean
        description: true is the matrix is the identity matrix
  - uid: decentraland-ecs.Matrix.isIdentityAs3x2
    summary: Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)
    name: isIdentityAs3x2()
    fullName: isIdentityAs3x2()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'isIdentityAs3x2(): boolean;'
      return:
        type:
          - boolean
        description: true is the matrix is the identity matrix
  - uid: decentraland-ecs.Matrix.Lerp
    summary: >-
      Returns a new Matrix whose values are the interpolated values for "gradient" (float) between the ones of the
      matrices "startValue" and "endValue".
    name: 'Lerp(startValue, endValue, gradient)'
    fullName: 'Lerp(startValue, endValue, gradient)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Lerp(startValue: Matrix, endValue: Matrix, gradient: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: startValue
          description: defines the start value
          type:
            - decentraland-ecs.Matrix
        - id: endValue
          description: defines the end value
          type:
            - decentraland-ecs.Matrix
        - id: gradient
          description: defines the gradient factor
          type:
            - number
  - uid: decentraland-ecs.Matrix.LerpToRef
    summary: >-
      Set the given matrix "result" as the interpolated values for "gradient" (float) between the ones of the matrices
      "startValue" and "endValue".
    name: 'LerpToRef(startValue, endValue, gradient, result)'
    fullName: 'LerpToRef(startValue, endValue, gradient, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LerpToRef(startValue: Matrix, endValue: Matrix, gradient: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: startValue
          description: defines the start value
          type:
            - decentraland-ecs.Matrix
        - id: endValue
          description: defines the end value
          type:
            - decentraland-ecs.Matrix
        - id: gradient
          description: defines the gradient factor
          type:
            - number
        - id: result
          description: defines the Matrix object where to store data
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.LookAtLH
    summary: >-
      Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3
      position, the up vector3 being oriented like "up" This function works in left handed mode
    name: 'LookAtLH(eye, target, up)'
    fullName: 'LookAtLH(eye, target, up)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LookAtLH(eye: Vector3, target: Vector3, up: Vector3): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: eye
          description: defines the final position of the entity
          type:
            - decentraland-ecs.Vector3
        - id: target
          description: defines where the entity should look at
          type:
            - decentraland-ecs.Vector3
        - id: up
          description: defines the up vector for the entity
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Matrix.LookAtLHToRef
    summary: >-
      Sets the given "result" Matrix to a rotation matrix used to rotate an entity so that it looks at the target
      vector3, from the eye vector3 position, the up vector3 being oriented like "up". This function works in left
      handed mode
    name: 'LookAtLHToRef(eye, target, up, result)'
    fullName: 'LookAtLHToRef(eye, target, up, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LookAtLHToRef(eye: Vector3, target: Vector3, up: Vector3, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eye
          description: defines the final position of the entity
          type:
            - decentraland-ecs.Vector3
        - id: target
          description: defines where the entity should look at
          type:
            - decentraland-ecs.Vector3
        - id: up
          description: defines the up vector for the entity
          type:
            - decentraland-ecs.Vector3
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.LookAtRH
    summary: >-
      Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3
      position, the up vector3 being oriented like "up" This function works in right handed mode
    name: 'LookAtRH(eye, target, up)'
    fullName: 'LookAtRH(eye, target, up)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LookAtRH(eye: Vector3, target: Vector3, up: Vector3): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: eye
          description: defines the final position of the entity
          type:
            - decentraland-ecs.Vector3
        - id: target
          description: defines where the entity should look at
          type:
            - decentraland-ecs.Vector3
        - id: up
          description: defines the up vector for the entity
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Matrix.LookAtRHToRef
    summary: >-
      Sets the given "result" Matrix to a rotation matrix used to rotate an entity so that it looks at the target
      vector3, from the eye vector3 position, the up vector3 being oriented like "up". This function works in right
      handed mode
    name: 'LookAtRHToRef(eye, target, up, result)'
    fullName: 'LookAtRHToRef(eye, target, up, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LookAtRHToRef(eye: Vector3, target: Vector3, up: Vector3, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eye
          description: defines the final position of the entity
          type:
            - decentraland-ecs.Vector3
        - id: target
          description: defines where the entity should look at
          type:
            - decentraland-ecs.Vector3
        - id: up
          description: defines the up vector for the entity
          type:
            - decentraland-ecs.Vector3
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.m
    summary: Gets the internal data of the matrix
    name: m
    fullName: m
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly m: Readonly<FloatArray>;'
      return:
        type:
          - Readonly<FloatArray>
  - uid: decentraland-ecs.Matrix.multiply
    summary: Multiply two matrices
    name: multiply(other)
    fullName: multiply(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiply(other: Readonly<Matrix>): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix set with the multiplication result of the current Matrix and the given one
      parameters:
        - id: other
          description: defines the second operand
          type:
            - Readonly<Matrix>
  - uid: decentraland-ecs.Matrix.multiplyAtIndex
    summary: mutiply the specified position in the current Matrix by a value
    name: 'multiplyAtIndex(index, value)'
    fullName: 'multiplyAtIndex(index, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyAtIndex(index: number, value: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current updated matrix
      parameters:
        - id: index
          description: the index of the value within the matrix. between 0 and 15.
          type:
            - number
        - id: value
          description: the value to be added
          type:
            - number
  - uid: decentraland-ecs.Matrix.multiplyToArray
    summary: >-
      Sets the FloatArray "result" from the given index "offset" with the multiplication of the current matrix and the
      given one
    name: 'multiplyToArray(other, result, offset)'
    fullName: 'multiplyToArray(other, result, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyToArray(other: Readonly<Matrix>, result: FloatArray, offset: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: other
          description: defines the second operand
          type:
            - Readonly<Matrix>
        - id: result
          description: defines the array where to store the multiplication
          type:
            - FloatArray
        - id: offset
          description: defines the offset in the target array where to start storing values
          type:
            - number
  - uid: decentraland-ecs.Matrix.multiplyToRef
    summary: Sets the given matrix "result" with the multiplication result of the current Matrix and the given one
    name: 'multiplyToRef(other, result)'
    fullName: 'multiplyToRef(other, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyToRef(other: Readonly<Matrix>, result: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: other
          description: defines the second operand
          type:
            - Readonly<Matrix>
        - id: result
          description: defines the matrix where to store the multiplication
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.OrthoLH
    summary: Create a left-handed orthographic projection matrix
    name: 'OrthoLH(width, height, znear, zfar)'
    fullName: 'OrthoLH(width, height, znear, zfar)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static OrthoLH(width: number, height: number, znear: number, zfar: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix as a left-handed orthographic projection matrix
      parameters:
        - id: width
          description: defines the viewport width
          type:
            - number
        - id: height
          description: defines the viewport height
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
  - uid: decentraland-ecs.Matrix.OrthoLHToRef
    summary: Store a left-handed orthographic projection to a given matrix
    name: 'OrthoLHToRef(width, height, znear, zfar, result)'
    fullName: 'OrthoLHToRef(width, height, znear, zfar, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static OrthoLHToRef(width: number, height: number, znear: number, zfar: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: width
          description: defines the viewport width
          type:
            - number
        - id: height
          description: defines the viewport height
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.OrthoOffCenterLH
    summary: Create a left-handed orthographic projection matrix
    name: 'OrthoOffCenterLH(left, right, bottom, top, znear, zfar)'
    fullName: 'OrthoOffCenterLH(left, right, bottom, top, znear, zfar)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static OrthoOffCenterLH(left: number, right: number, bottom: number, top: number, znear: number, zfar: number):
        Matrix;
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix as a left-handed orthographic projection matrix
      parameters:
        - id: left
          description: defines the viewport left coordinate
          type:
            - number
        - id: right
          description: defines the viewport right coordinate
          type:
            - number
        - id: bottom
          description: defines the viewport bottom coordinate
          type:
            - number
        - id: top
          description: defines the viewport top coordinate
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
  - uid: decentraland-ecs.Matrix.OrthoOffCenterLHToRef
    summary: Stores a left-handed orthographic projection into a given matrix
    name: 'OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result)'
    fullName: 'OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static OrthoOffCenterLHToRef(left: number, right: number, bottom: number, top: number, znear: number, zfar:
        number, result: Matrix): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: left
          description: defines the viewport left coordinate
          type:
            - number
        - id: right
          description: defines the viewport right coordinate
          type:
            - number
        - id: bottom
          description: defines the viewport bottom coordinate
          type:
            - number
        - id: top
          description: defines the viewport top coordinate
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.OrthoOffCenterRH
    summary: Creates a right-handed orthographic projection matrix
    name: 'OrthoOffCenterRH(left, right, bottom, top, znear, zfar)'
    fullName: 'OrthoOffCenterRH(left, right, bottom, top, znear, zfar)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static OrthoOffCenterRH(left: number, right: number, bottom: number, top: number, znear: number, zfar: number):
        Matrix;
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix as a right-handed orthographic projection matrix
      parameters:
        - id: left
          description: defines the viewport left coordinate
          type:
            - number
        - id: right
          description: defines the viewport right coordinate
          type:
            - number
        - id: bottom
          description: defines the viewport bottom coordinate
          type:
            - number
        - id: top
          description: defines the viewport top coordinate
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
  - uid: decentraland-ecs.Matrix.OrthoOffCenterRHToRef
    summary: Stores a right-handed orthographic projection into a given matrix
    name: 'OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result)'
    fullName: 'OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static OrthoOffCenterRHToRef(left: number, right: number, bottom: number, top: number, znear: number, zfar:
        number, result: Matrix): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: left
          description: defines the viewport left coordinate
          type:
            - number
        - id: right
          description: defines the viewport right coordinate
          type:
            - number
        - id: bottom
          description: defines the viewport bottom coordinate
          type:
            - number
        - id: top
          description: defines the viewport top coordinate
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.PerspectiveFovLH
    summary: Creates a left-handed perspective projection matrix
    name: 'PerspectiveFovLH(fov, aspect, znear, zfar)'
    fullName: 'PerspectiveFovLH(fov, aspect, znear, zfar)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static PerspectiveFovLH(fov: number, aspect: number, znear: number, zfar: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix as a left-handed perspective projection matrix
      parameters:
        - id: fov
          description: defines the horizontal field of view
          type:
            - number
        - id: aspect
          description: defines the aspect ratio
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
  - uid: decentraland-ecs.Matrix.PerspectiveFovLHToRef
    summary: Stores a left-handed perspective projection into a given matrix
    name: 'PerspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed)'
    fullName: 'PerspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static PerspectiveFovLHToRef(fov: number, aspect: number, znear: number, zfar: number, result: Matrix,
        isVerticalFovFixed?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fov
          description: defines the horizontal field of view
          type:
            - number
        - id: aspect
          description: defines the aspect ratio
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
        - id: isVerticalFovFixed
          description: defines it the fov is vertically fixed (default) or horizontally
          type:
            - boolean
  - uid: decentraland-ecs.Matrix.PerspectiveFovRH
    summary: Creates a right-handed perspective projection matrix
    name: 'PerspectiveFovRH(fov, aspect, znear, zfar)'
    fullName: 'PerspectiveFovRH(fov, aspect, znear, zfar)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static PerspectiveFovRH(fov: number, aspect: number, znear: number, zfar: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix as a right-handed perspective projection matrix
      parameters:
        - id: fov
          description: defines the horizontal field of view
          type:
            - number
        - id: aspect
          description: defines the aspect ratio
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
  - uid: decentraland-ecs.Matrix.PerspectiveFovRHToRef
    summary: Stores a right-handed perspective projection into a given matrix
    name: 'PerspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed)'
    fullName: 'PerspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static PerspectiveFovRHToRef(fov: number, aspect: number, znear: number, zfar: number, result: Matrix,
        isVerticalFovFixed?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fov
          description: defines the horizontal field of view
          type:
            - number
        - id: aspect
          description: defines the aspect ratio
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
        - id: isVerticalFovFixed
          description: defines it the fov is vertically fixed (default) or horizontally
          type:
            - boolean
  - uid: decentraland-ecs.Matrix.PerspectiveFovWebVRToRef
    summary: Stores a perspective projection for WebVR info a given matrix
    name: 'PerspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded)'
    fullName: 'PerspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        static PerspectiveFovWebVRToRef(fov: {
                upDegrees: number;
                downDegrees: number;
                leftDegrees: number;
                rightDegrees: number;
            }, znear: number, zfar: number, result: Matrix, rightHanded?: boolean): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: fov
          description: defines the field of view
          type:
            - |-
              {
                      upDegrees: number;
                      downDegrees: number;
                      leftDegrees: number;
                      rightDegrees: number;
                  }
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
        - id: rightHanded
          description: defines if the matrix must be in right-handed mode (false by default)
          type:
            - boolean
  - uid: decentraland-ecs.Matrix.PerspectiveLH
    summary: Creates a left-handed perspective projection matrix
    name: 'PerspectiveLH(width, height, znear, zfar)'
    fullName: 'PerspectiveLH(width, height, znear, zfar)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static PerspectiveLH(width: number, height: number, znear: number, zfar: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix as a left-handed perspective projection matrix
      parameters:
        - id: width
          description: defines the viewport width
          type:
            - number
        - id: height
          description: defines the viewport height
          type:
            - number
        - id: znear
          description: defines the near clip plane
          type:
            - number
        - id: zfar
          description: defines the far clip plane
          type:
            - number
  - uid: decentraland-ecs.Matrix.Reflection
    summary: Computes a reflection matrix from a plane
    name: Reflection(plane)
    fullName: Reflection(plane)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Reflection(plane: Plane): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix
      parameters:
        - id: plane
          description: defines the reflection plane
          type:
            - decentraland-ecs.Plane
  - uid: decentraland-ecs.Matrix.ReflectionToRef
    summary: Computes a reflection matrix from a plane
    name: 'ReflectionToRef(plane, result)'
    fullName: 'ReflectionToRef(plane, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static ReflectionToRef(plane: Plane, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: plane
          description: defines the reflection plane
          type:
            - decentraland-ecs.Plane
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.removeRotationAndScaling
    summary: Remove rotation and scaling part from the matrix
    name: removeRotationAndScaling()
    fullName: removeRotationAndScaling()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeRotationAndScaling(): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the updated matrix
  - uid: decentraland-ecs.Matrix.reset
    summary: Sets all the matrix elements to zero
    name: reset()
    fullName: reset()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'reset(): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
  - uid: decentraland-ecs.Matrix.RotationAxis
    summary: Creates a new rotation matrix for "angle" radians around the given axis
    name: 'RotationAxis(axis, angle)'
    fullName: 'RotationAxis(axis, angle)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationAxis(axis: Vector3, angle: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: axis
          description: defines the axis to use
          type:
            - decentraland-ecs.Vector3
        - id: angle
          description: defines the angle (in radians) to use
          type:
            - number
  - uid: decentraland-ecs.Matrix.RotationAxisToRef
    summary: Creates a new rotation matrix for "angle" radians around the given axis and stores it in a given matrix
    name: 'RotationAxisToRef(axis, angle, result)'
    fullName: 'RotationAxisToRef(axis, angle, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationAxisToRef(axis: Vector3, angle: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: axis
          description: defines the axis to use
          type:
            - decentraland-ecs.Vector3
        - id: angle
          description: defines the angle (in radians) to use
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.RotationX
    summary: Creates a new rotation matrix for "angle" radians around the X axis
    name: RotationX(angle)
    fullName: RotationX(angle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationX(angle: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: angle
          description: defines the angle (in radians) to use
          type:
            - number
  - uid: decentraland-ecs.Matrix.RotationXToRef
    summary: Creates a new rotation matrix for "angle" radians around the X axis and stores it in a given matrix
    name: 'RotationXToRef(angle, result)'
    fullName: 'RotationXToRef(angle, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationXToRef(angle: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: angle
          description: defines the angle (in radians) to use
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.RotationY
    summary: Creates a new rotation matrix for "angle" radians around the Y axis
    name: RotationY(angle)
    fullName: RotationY(angle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationY(angle: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: angle
          description: defines the angle (in radians) to use
          type:
            - number
  - uid: decentraland-ecs.Matrix.RotationYawPitchRoll
    summary: Creates a rotation matrix
    name: 'RotationYawPitchRoll(yaw, pitch, roll)'
    fullName: 'RotationYawPitchRoll(yaw, pitch, roll)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationYawPitchRoll(yaw: number, pitch: number, roll: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new rotation matrix
      parameters:
        - id: yaw
          description: defines the yaw angle in radians (Y axis)
          type:
            - number
        - id: pitch
          description: defines the pitch angle in radians (X axis)
          type:
            - number
        - id: roll
          description: defines the roll angle in radians (X axis)
          type:
            - number
  - uid: decentraland-ecs.Matrix.RotationYawPitchRollToRef
    summary: Creates a rotation matrix and stores it in a given matrix
    name: 'RotationYawPitchRollToRef(yaw, pitch, roll, result)'
    fullName: 'RotationYawPitchRollToRef(yaw, pitch, roll, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: yaw
          description: defines the yaw angle in radians (Y axis)
          type:
            - number
        - id: pitch
          description: defines the pitch angle in radians (X axis)
          type:
            - number
        - id: roll
          description: defines the roll angle in radians (X axis)
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.RotationYToRef
    summary: Creates a new rotation matrix for "angle" radians around the Y axis and stores it in a given matrix
    name: 'RotationYToRef(angle, result)'
    fullName: 'RotationYToRef(angle, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationYToRef(angle: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: angle
          description: defines the angle (in radians) to use
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.RotationZ
    summary: Creates a new rotation matrix for "angle" radians around the Z axis
    name: RotationZ(angle)
    fullName: RotationZ(angle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationZ(angle: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: angle
          description: defines the angle (in radians) to use
          type:
            - number
  - uid: decentraland-ecs.Matrix.RotationZToRef
    summary: Creates a new rotation matrix for "angle" radians around the Z axis and stores it in a given matrix
    name: 'RotationZToRef(angle, result)'
    fullName: 'RotationZToRef(angle, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationZToRef(angle: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: angle
          description: defines the angle (in radians) to use
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.scale
    summary: Compute a new matrix set with the current matrix values multiplied by scale (float)
    name: scale(scale)
    fullName: scale(scale)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scale(scale: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new matrix
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
  - uid: decentraland-ecs.Matrix.scaleAndAddToRef
    summary: Scale the current matrix values by a factor and add the result to a given matrix
    name: 'scaleAndAddToRef(scale, result)'
    fullName: 'scaleAndAddToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleAndAddToRef(scale: number, result: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines the Matrix to store the result
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.scaleToRef
    summary: Scale the current matrix values by a factor to a given result matrix
    name: 'scaleToRef(scale, result)'
    fullName: 'scaleToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleToRef(scale: number, result: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines the matrix to store the result
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.Scaling
    summary: Creates a scaling matrix
    name: 'Scaling(x, y, z)'
    fullName: 'Scaling(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Scaling(x: number, y: number, z: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: x
          description: defines the scale factor on X axis
          type:
            - number
        - id: 'y'
          description: defines the scale factor on Y axis
          type:
            - number
        - id: z
          description: defines the scale factor on Z axis
          type:
            - number
  - uid: decentraland-ecs.Matrix.ScalingToRef
    summary: Creates a scaling matrix and stores it in a given matrix
    name: 'ScalingToRef(x, y, z, result)'
    fullName: 'ScalingToRef(x, y, z, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static ScalingToRef(x: number, y: number, z: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: x
          description: defines the scale factor on X axis
          type:
            - number
        - id: 'y'
          description: defines the scale factor on Y axis
          type:
            - number
        - id: z
          description: defines the scale factor on Z axis
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.setRow
    summary: Sets the index-th row of the current matrix to the vector4 values
    name: 'setRow(index, row)'
    fullName: 'setRow(index, row)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRow(index: number, row: Vector4): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the updated current matrix
      parameters:
        - id: index
          description: defines the number of the row to set
          type:
            - number
        - id: row
          description: defines the target vector4
          type:
            - decentraland-ecs.Vector4
  - uid: decentraland-ecs.Matrix.setRowFromFloats
    summary: Sets the index-th row of the current matrix with the given 4 x float values
    name: 'setRowFromFloats(index, x, y, z, w)'
    fullName: 'setRowFromFloats(index, x, y, z, w)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowFromFloats(index: number, x: number, y: number, z: number, w: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the updated current matrix
      parameters:
        - id: index
          description: defines the row index
          type:
            - number
        - id: x
          description: defines the x component to set
          type:
            - number
        - id: 'y'
          description: defines the y component to set
          type:
            - number
        - id: z
          description: defines the z component to set
          type:
            - number
        - id: w
          description: defines the w component to set
          type:
            - number
  - uid: decentraland-ecs.Matrix.setTranslation
    summary: Inserts the translation vector in the current matrix
    name: setTranslation(vector3)
    fullName: setTranslation(vector3)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTranslation(vector3: Vector3): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current updated matrix
      parameters:
        - id: vector3
          description: defines the translation to insert
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Matrix.setTranslationFromFloats
    summary: Inserts the translation vector (using 3 floats) in the current matrix
    name: 'setTranslationFromFloats(x, y, z)'
    fullName: 'setTranslationFromFloats(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setTranslationFromFloats(x: number, y: number, z: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current updated matrix
      parameters:
        - id: x
          description: defines the 1st component of the translation
          type:
            - number
        - id: 'y'
          description: defines the 2nd component of the translation
          type:
            - number
        - id: z
          description: defines the 3rd component of the translation
          type:
            - number
  - uid: decentraland-ecs.Matrix.toArray
    summary: Returns the matrix as a FloatArray
    name: toArray()
    fullName: toArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toArray(): Readonly<FloatArray>;'
      return:
        type:
          - Readonly<FloatArray>
        description: the matrix underlying array
  - uid: decentraland-ecs.Matrix.toggleModelMatrixHandInPlace
    summary: Toggles model matrix from being right handed to left handed in place and vice versa
    name: toggleModelMatrixHandInPlace()
    fullName: toggleModelMatrixHandInPlace()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toggleModelMatrixHandInPlace(): void;'
      return:
        type:
          - void
        description: ''
  - uid: decentraland-ecs.Matrix.toggleProjectionMatrixHandInPlace
    summary: Toggles projection matrix from being right handed to left handed in place and vice versa
    name: toggleProjectionMatrixHandInPlace()
    fullName: toggleProjectionMatrixHandInPlace()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toggleProjectionMatrixHandInPlace(): void;'
      return:
        type:
          - void
        description: ''
  - uid: decentraland-ecs.Matrix.toNormalMatrix
    summary: >-
      Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth
      row and column).
    name: toNormalMatrix(ref)
    fullName: toNormalMatrix(ref)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toNormalMatrix(ref: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: ref
          description: matrix to store the result
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.Translation
    summary: Creates a translation matrix
    name: 'Translation(x, y, z)'
    fullName: 'Translation(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Translation(x: number, y: number, z: number): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: x
          description: defines the translation on X axis
          type:
            - number
        - id: 'y'
          description: defines the translation on Y axis
          type:
            - number
        - id: z
          description: defines the translationon Z axis
          type:
            - number
  - uid: decentraland-ecs.Matrix.TranslationToRef
    summary: Creates a translation matrix and stores it in a given matrix
    name: 'TranslationToRef(x, y, z, result)'
    fullName: 'TranslationToRef(x, y, z, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static TranslationToRef(x: number, y: number, z: number, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: x
          description: defines the translation on X axis
          type:
            - number
        - id: 'y'
          description: defines the translation on Y axis
          type:
            - number
        - id: z
          description: defines the translationon Z axis
          type:
            - number
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.transpose
    summary: Compute the transpose of the matrix
    name: transpose()
    fullName: transpose()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'transpose(): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new transposed matrix
  - uid: decentraland-ecs.Matrix.Transpose
    summary: Compute the transpose of a given matrix
    name: Transpose(matrix)
    fullName: Transpose(matrix)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Transpose(matrix: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the new matrix
      parameters:
        - id: matrix
          description: defines the matrix to transpose
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.transposeToRef
    summary: Compute the transpose of the matrix and store it in a given matrix
    name: transposeToRef(result)
    fullName: transposeToRef(result)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'transposeToRef(result: Matrix): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: the current matrix
      parameters:
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.TransposeToRef
    summary: Compute the transpose of a matrix and store it in a target matrix
    name: 'TransposeToRef(matrix, result)'
    fullName: 'TransposeToRef(matrix, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static TransposeToRef(matrix: Matrix, result: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: matrix
          description: defines the matrix to transpose
          type:
            - decentraland-ecs.Matrix
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Matrix.updateFlag
    summary: >-
      Gets the update flag of the matrix which is an unique number for the matrix. It will be incremented every time the
      matrix data change. You can use it to speed the comparison between two versions of the same matrix.
    name: updateFlag
    fullName: updateFlag
    langs:
      - typeScript
    type: property
    syntax:
      content: 'updateFlag: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Matrix.Zero
    summary: Creates a new zero matrix
    name: Zero()
    fullName: Zero()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Zero(): Matrix;'
      return:
        type:
          - decentraland-ecs.Matrix
        description: a new zero matrix
