### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Size
    summary: Size containing widht and height
    name: Size
    fullName: Size
    langs:
      - typeScript
    type: class
    implements:
      - decentraland-ecs.ISize
    package: decentraland-ecs
    children:
      - decentraland-ecs.Size.(constructor)
      - decentraland-ecs.Size.add
      - decentraland-ecs.Size.clone
      - decentraland-ecs.Size.copyFrom
      - decentraland-ecs.Size.copyFromFloats
      - decentraland-ecs.Size.equals
      - decentraland-ecs.Size.getClassName
      - decentraland-ecs.Size.getHashCode
      - decentraland-ecs.Size.height
      - decentraland-ecs.Size.Lerp
      - decentraland-ecs.Size.multiplyByFloats
      - decentraland-ecs.Size.set
      - decentraland-ecs.Size.subtract
      - decentraland-ecs.Size.surface
      - decentraland-ecs.Size.toString
      - decentraland-ecs.Size.width
      - decentraland-ecs.Size.Zero
  - uid: decentraland-ecs.Size.(constructor)
    summary: Creates a Size object from the given width and height (floats).
    name: '(constructor)(width, height)'
    fullName: '(constructor)(width, height)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(width: number, height: number);'
      parameters:
        - id: width
          description: width of the new size
          type:
            - number
        - id: height
          description: height of the new size
          type:
            - number
  - uid: decentraland-ecs.Size.add
    summary: Sums the width and height of two sizes
    name: add(otherSize)
    fullName: add(otherSize)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(otherSize: Size): Size;'
      return:
        type:
          - decentraland-ecs.Size
        description: a new Size set as the addition result of the current Size and the given one.
      parameters:
        - id: otherSize
          description: size to add to this size
          type:
            - decentraland-ecs.Size
  - uid: decentraland-ecs.Size.clone
    summary: Clones the size
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Size;'
      return:
        type:
          - decentraland-ecs.Size
        description: a new Size copied from the given one.
  - uid: decentraland-ecs.Size.copyFrom
    summary: Updates the current size from the given one.
    name: copyFrom(src)
    fullName: copyFrom(src)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(src: Size): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: src
          description: the given size
          type:
            - decentraland-ecs.Size
  - uid: decentraland-ecs.Size.copyFromFloats
    summary: Updates in place the current Size from the given floats.
    name: 'copyFromFloats(width, height)'
    fullName: 'copyFromFloats(width, height)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFromFloats(width: number, height: number): Size;'
      return:
        type:
          - decentraland-ecs.Size
        description: the updated Size.
      parameters:
        - id: width
          description: width of the new size
          type:
            - number
        - id: height
          description: height of the new size
          type:
            - number
  - uid: decentraland-ecs.Size.equals
    summary: True if the current Size and the given one width and height are strictly equal.
    name: equals(other)
    fullName: equals(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equals(other: Size): boolean;'
      return:
        type:
          - boolean
        description: True if the current Size and the given one width and height are strictly equal.
      parameters:
        - id: other
          description: the other size to compare against
          type:
            - decentraland-ecs.Size
  - uid: decentraland-ecs.Size.getClassName
    summary: '"Size"'
    name: getClassName()
    fullName: getClassName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getClassName(): string;'
      return:
        type:
          - string
        description: the string "Size"
  - uid: decentraland-ecs.Size.getHashCode
    summary: Returns the Size hash code.
    name: getHashCode()
    fullName: getHashCode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHashCode(): number;'
      return:
        type:
          - number
        description: a hash code for a unique width and height
  - uid: decentraland-ecs.Size.height
    summary: Height
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'height: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Size.Lerp
    summary: Creates a new Size set at the linear interpolation "amount" between "start" and "end"
    name: 'Lerp(start, end, amount)'
    fullName: 'Lerp(start, end, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Lerp(start: Size, end: Size, amount: number): Size;'
      return:
        type:
          - decentraland-ecs.Size
        description: a new Size set at the linear interpolation "amount" between "start" and "end"
      parameters:
        - id: start
          description: starting size to lerp between
          type:
            - decentraland-ecs.Size
        - id: end
          description: end size to lerp between
          type:
            - decentraland-ecs.Size
        - id: amount
          description: amount to lerp between the start and end values
          type:
            - number
  - uid: decentraland-ecs.Size.multiplyByFloats
    summary: Multiplies the width and height by numbers
    name: 'multiplyByFloats(w, h)'
    fullName: 'multiplyByFloats(w, h)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyByFloats(w: number, h: number): Size;'
      return:
        type:
          - decentraland-ecs.Size
        description: a new Size set with the multiplication result of the current Size and the given floats.
      parameters:
        - id: w
          description: factor to multiple the width by
          type:
            - number
        - id: h
          description: factor to multiple the height by
          type:
            - number
  - uid: decentraland-ecs.Size.set
    summary: Updates in place the current Size from the given floats.
    name: 'set(width, height)'
    fullName: 'set(width, height)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(width: number, height: number): Size;'
      return:
        type:
          - decentraland-ecs.Size
        description: the updated Size.
      parameters:
        - id: width
          description: width to set
          type:
            - number
        - id: height
          description: height to set
          type:
            - number
  - uid: decentraland-ecs.Size.subtract
    summary: Subtracts the width and height of two
    name: subtract(otherSize)
    fullName: subtract(otherSize)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtract(otherSize: Size): Size;'
      return:
        type:
          - decentraland-ecs.Size
        description: a new Size set as the subtraction result of the given one from the current Size.
      parameters:
        - id: otherSize
          description: size to subtract to this size
          type:
            - decentraland-ecs.Size
  - uid: decentraland-ecs.Size.surface
    summary: 'The surface of the Size : width \* height (float).'
    name: surface
    fullName: surface
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly surface: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Size.toString
    summary: Returns a string with the Size width and height
    name: toString()
    fullName: toString()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toString(): string;'
      return:
        type:
          - string
        description: a string with the Size width and height
  - uid: decentraland-ecs.Size.width
    summary: Width
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'width: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Size.Zero
    summary: Create a new size of zero
    name: Zero()
    fullName: Zero()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Zero(): Size;'
      return:
        type:
          - decentraland-ecs.Size
        description: 'a new Size set to (0.0, 0.0)'
