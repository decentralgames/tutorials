### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Path3D
    summary: Represents a 3D path made up of multiple 3D points
    name: Path3D
    fullName: Path3D
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Path3D.(constructor)
      - decentraland-ecs.Path3D.getBinormals
      - decentraland-ecs.Path3D.getCurve
      - decentraland-ecs.Path3D.getDistances
      - decentraland-ecs.Path3D.getNormals
      - decentraland-ecs.Path3D.getTangents
      - decentraland-ecs.Path3D.path
      - decentraland-ecs.Path3D.update
  - uid: decentraland-ecs.Path3D.(constructor)
    summary: >-
      new Path3D(path, normal, raw) Creates a Path3D. A Path3D is a logical math object, so not a mesh. please read the
      description in the tutorial : http://doc.babylonjs.com/tutorials/How\_to\_use\_Path3D
    name: '(constructor)(path, firstNormal, raw)'
    fullName: '(constructor)(path, firstNormal, raw)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: |-
        constructor(
            path: Vector3[], firstNormal?: Nullable<Vector3>, raw?: boolean);
      parameters:
        - id: path
          description: 'an array of Vector3, the curve axis of the Path3D'
          type:
            - 'Vector3[]'
        - id: firstNormal
          description: ''
          type:
            - Nullable<Vector3>
        - id: raw
          description: >-
            (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path
            acceleration or speed.
          type:
            - boolean
  - uid: decentraland-ecs.Path3D.getBinormals
    summary: Returns an array populated with binormal vectors on each Path3D curve point.
    name: getBinormals()
    fullName: getBinormals()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBinormals(): Vector3[];'
      return:
        type:
          - 'Vector3[]'
        description: an array populated with binormal vectors on each Path3D curve point.
  - uid: decentraland-ecs.Path3D.getCurve
    summary: Returns the Path3D array of successive Vector3 designing its curve.
    name: getCurve()
    fullName: getCurve()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCurve(): Vector3[];'
      return:
        type:
          - 'Vector3[]'
        description: the Path3D array of successive Vector3 designing its curve.
  - uid: decentraland-ecs.Path3D.getDistances
    summary: Returns an array populated with distances (float) of the i-th point from the first curve point.
    name: getDistances()
    fullName: getDistances()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDistances(): number[];'
      return:
        type:
          - 'number[]'
        description: an array populated with distances (float) of the i-th point from the first curve point.
  - uid: decentraland-ecs.Path3D.getNormals
    summary: Returns an array populated with normal vectors on each Path3D curve point.
    name: getNormals()
    fullName: getNormals()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNormals(): Vector3[];'
      return:
        type:
          - 'Vector3[]'
        description: an array populated with normal vectors on each Path3D curve point.
  - uid: decentraland-ecs.Path3D.getTangents
    summary: Returns an array populated with tangent vectors on each Path3D curve point.
    name: getTangents()
    fullName: getTangents()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTangents(): Vector3[];'
      return:
        type:
          - 'Vector3[]'
        description: an array populated with tangent vectors on each Path3D curve point.
  - uid: decentraland-ecs.Path3D.path
    summary: 'an array of Vector3, the curve axis of the Path3D'
    name: path
    fullName: path
    langs:
      - typeScript
    type: property
    syntax:
      content: 'path: Vector3[];'
      return:
        type:
          - 'Vector3[]'
  - uid: decentraland-ecs.Path3D.update
    summary: 'Forces the Path3D tangent, normal, binormal and distance recomputation.'
    name: 'update(path, firstNormal)'
    fullName: 'update(path, firstNormal)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'update(path: Vector3[], firstNormal?: Nullable<Vector3>): Path3D;'
      return:
        type:
          - decentraland-ecs.Path3D
        description: the same object updated.
      parameters:
        - id: path
          description: path which all values are copied into the curves points
          type:
            - 'Vector3[]'
        - id: firstNormal
          description: which should be projected onto the curve
          type:
            - Nullable<Vector3>
