### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Vector2
    summary: Class representing a vector containing 2 coordinates
    name: Vector2
    fullName: Vector2
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Vector2.(constructor)
      - decentraland-ecs.Vector2.add
      - decentraland-ecs.Vector2.Add
      - decentraland-ecs.Vector2.addInPlace
      - decentraland-ecs.Vector2.addToRef
      - decentraland-ecs.Vector2.addVector3
      - decentraland-ecs.Vector2.asArray
      - decentraland-ecs.Vector2.CatmullRom
      - decentraland-ecs.Vector2.Center
      - decentraland-ecs.Vector2.Clamp
      - decentraland-ecs.Vector2.clone
      - decentraland-ecs.Vector2.copyFrom
      - decentraland-ecs.Vector2.copyFromFloats
      - decentraland-ecs.Vector2.Distance
      - decentraland-ecs.Vector2.DistanceOfPointFromSegment
      - decentraland-ecs.Vector2.DistanceSquared
      - decentraland-ecs.Vector2.divide
      - decentraland-ecs.Vector2.divideInPlace
      - decentraland-ecs.Vector2.divideToRef
      - decentraland-ecs.Vector2.Dot
      - decentraland-ecs.Vector2.equals
      - decentraland-ecs.Vector2.equalsWithEpsilon
      - decentraland-ecs.Vector2.floor
      - decentraland-ecs.Vector2.fract
      - decentraland-ecs.Vector2.FromArray
      - decentraland-ecs.Vector2.FromArrayToRef
      - decentraland-ecs.Vector2.getClassName
      - decentraland-ecs.Vector2.getHashCode
      - decentraland-ecs.Vector2.Hermite
      - decentraland-ecs.Vector2.length
      - decentraland-ecs.Vector2.lengthSquared
      - decentraland-ecs.Vector2.Lerp
      - decentraland-ecs.Vector2.Maximize
      - decentraland-ecs.Vector2.Minimize
      - decentraland-ecs.Vector2.multiply
      - decentraland-ecs.Vector2.multiplyByFloats
      - decentraland-ecs.Vector2.multiplyInPlace
      - decentraland-ecs.Vector2.multiplyToRef
      - decentraland-ecs.Vector2.negate
      - decentraland-ecs.Vector2.normalize
      - decentraland-ecs.Vector2.Normalize
      - decentraland-ecs.Vector2.One
      - decentraland-ecs.Vector2.PointInTriangle
      - decentraland-ecs.Vector2.scale
      - decentraland-ecs.Vector2.scaleAndAddToRef
      - decentraland-ecs.Vector2.scaleInPlace
      - decentraland-ecs.Vector2.scaleToRef
      - decentraland-ecs.Vector2.set
      - decentraland-ecs.Vector2.subtract
      - decentraland-ecs.Vector2.subtractInPlace
      - decentraland-ecs.Vector2.subtractToRef
      - decentraland-ecs.Vector2.toArray
      - decentraland-ecs.Vector2.toString
      - decentraland-ecs.Vector2.Transform
      - decentraland-ecs.Vector2.TransformToRef
      - decentraland-ecs.Vector2.x
      - decentraland-ecs.Vector2.y
      - decentraland-ecs.Vector2.Zero
  - uid: decentraland-ecs.Vector2.(constructor)
    summary: Creates a new Vector2 from the given x and y coordinates
    name: '(constructor)(x, y)'
    fullName: '(constructor)(x, y)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: |-
        constructor(
            x?: number, 
            y?: number);
      parameters:
        - id: x
          description: defines the first coordinate
          type:
            - number
        - id: 'y'
          description: defines the second coordinate
          type:
            - number
  - uid: decentraland-ecs.Vector2.add
    summary: Add another vector with the current one
    name: add(otherVector)
    fullName: add(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2 set with the addition of the current Vector2 and the given one coordinates
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.Add
    summary: Returns a new Vector2 as the result of the addition of the two given vectors.
    name: 'Add(vector1, vector2)'
    fullName: 'Add(vector1, vector2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Add(vector1: ReadOnlyVector2, vector2: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the resulting vector
      parameters:
        - id: vector1
          description: the first vector
          type:
            - ReadOnlyVector2
        - id: vector2
          description: the second vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.addInPlace
    summary: Set the Vector2 coordinates by adding the given Vector2 coordinates
    name: addInPlace(otherVector)
    fullName: addInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addInPlace(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.addToRef
    summary: Sets the "result" coordinates with the addition of the current Vector2 and the given one coordinates
    name: 'addToRef(otherVector, result)'
    fullName: 'addToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the unmodified current Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
        - id: result
          description: defines the target vector
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.addVector3
    summary: 'Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates'
    name: addVector3(otherVector)
    fullName: addVector3(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addVector3(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.asArray
    summary: Copy the current vector to an array
    name: asArray()
    fullName: asArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'asArray(): number[];'
      return:
        type:
          - 'number[]'
        description: 'a new array with 2 elements: the Vector2 coordinates.'
  - uid: decentraland-ecs.Vector2.CatmullRom
    summary: Gets a new Vector2 located for "amount" (float) on the CatmullRom spline defined by the given four Vector2
    name: 'CatmullRom(value1, value2, value3, value4, amount)'
    fullName: 'CatmullRom(value1, value2, value3, value4, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static CatmullRom(value1: ReadOnlyVector2, value2: ReadOnlyVector2, value3: ReadOnlyVector2, value4:
        ReadOnlyVector2, amount: number): Vector2;
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: value1
          description: defines 1st point of control
          type:
            - ReadOnlyVector2
        - id: value2
          description: defines 2nd point of control
          type:
            - ReadOnlyVector2
        - id: value3
          description: defines 3rd point of control
          type:
            - ReadOnlyVector2
        - id: value4
          description: defines 4th point of control
          type:
            - ReadOnlyVector2
        - id: amount
          description: defines the interpolation factor
          type:
            - number
  - uid: decentraland-ecs.Vector2.Center
    summary: Gets a new Vector2 located at the center of the vectors "value1" and "value2"
    name: 'Center(value1, value2)'
    fullName: 'Center(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Center(value1: ReadOnlyVector2, value2: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: value1
          description: defines first vector
          type:
            - ReadOnlyVector2
        - id: value2
          description: defines second vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.Clamp
    summary: >-
      Returns a new Vector2 set with same the coordinates than "value" ones if the vector "value" is in the square
      defined by "min" and "max". If a coordinate of "value" is lower than "min" coordinates, the returned Vector2 is
      given this "min" coordinate. If a coordinate of "value" is greater than "max" coordinates, the returned Vector2 is
      given this "max" coordinate
    name: 'Clamp(value, min, max)'
    fullName: 'Clamp(value, min, max)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Clamp(value: ReadOnlyVector2, min: ReadOnlyVector2, max: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: value
          description: defines the value to clamp
          type:
            - ReadOnlyVector2
        - id: min
          description: defines the lower limit
          type:
            - ReadOnlyVector2
        - id: max
          description: defines the upper limit
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.clone
    summary: Gets a new Vector2 copied from the Vector2
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
  - uid: decentraland-ecs.Vector2.copyFrom
    summary: Sets the Vector2 coordinates with the given Vector2 coordinates
    name: copyFrom(source)
    fullName: copyFrom(source)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(source: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
      parameters:
        - id: source
          description: defines the source Vector2
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.copyFromFloats
    summary: Sets the Vector2 coordinates with the given floats
    name: 'copyFromFloats(x, y)'
    fullName: 'copyFromFloats(x, y)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFromFloats(x: number, y: number): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
      parameters:
        - id: x
          description: defines the first coordinate
          type:
            - number
        - id: 'y'
          description: defines the second coordinate
          type:
            - number
  - uid: decentraland-ecs.Vector2.Distance
    summary: Gets the distance between the vectors "value1" and "value2"
    name: 'Distance(value1, value2)'
    fullName: 'Distance(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Distance(value1: Vector2, value2: Vector2): number;'
      return:
        type:
          - number
        description: the distance between vectors
      parameters:
        - id: value1
          description: defines first vector
          type:
            - decentraland-ecs.Vector2
        - id: value2
          description: defines second vector
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.DistanceOfPointFromSegment
    summary: >-
      Gets the shortest distance (float) between the point "p" and the segment defined by the two points "segA" and
      "segB".
    name: 'DistanceOfPointFromSegment(p, segA, segB)'
    fullName: 'DistanceOfPointFromSegment(p, segA, segB)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static DistanceOfPointFromSegment(p: Vector2, segA: Vector2, segB: Vector2): number;'
      return:
        type:
          - number
        description: the shortest distance
      parameters:
        - id: p
          description: defines the middle point
          type:
            - decentraland-ecs.Vector2
        - id: segA
          description: defines one point of the segment
          type:
            - decentraland-ecs.Vector2
        - id: segB
          description: defines the other point of the segment
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.DistanceSquared
    summary: Returns the squared distance between the vectors "value1" and "value2"
    name: 'DistanceSquared(value1, value2)'
    fullName: 'DistanceSquared(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static DistanceSquared(value1: ReadOnlyVector2, value2: ReadOnlyVector2): number;'
      return:
        type:
          - number
        description: the squared distance between vectors
      parameters:
        - id: value1
          description: defines first vector
          type:
            - ReadOnlyVector2
        - id: value2
          description: defines second vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.divide
    summary: Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates
    name: divide(otherVector)
    fullName: divide(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divide(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.divideInPlace
    summary: Divides the current Vector2 coordinates by the given ones
    name: divideInPlace(otherVector)
    fullName: divideInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divideInPlace(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.divideToRef
    summary: Sets the "result" coordinates with the Vector2 divided by the given one coordinates
    name: 'divideToRef(otherVector, result)'
    fullName: 'divideToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divideToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the unmodified current Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
        - id: result
          description: defines the target vector
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.Dot
    summary: Gets the dot product of the vector "left" and the vector "right"
    name: 'Dot(left, right)'
    fullName: 'Dot(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Dot(left: ReadOnlyVector2, right: ReadOnlyVector2): number;'
      return:
        type:
          - number
        description: the dot product (float)
      parameters:
        - id: left
          description: defines first vector
          type:
            - ReadOnlyVector2
        - id: right
          description: defines second vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.equals
    summary: Gets a boolean if two vectors are equals
    name: equals(otherVector)
    fullName: equals(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equals(otherVector: ReadOnlyVector2): boolean;'
      return:
        type:
          - boolean
        description: true if the given vector coordinates strictly equal the current Vector2 ones
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.equalsWithEpsilon
    summary: Gets a boolean if two vectors are equals (using an epsilon value)
    name: 'equalsWithEpsilon(otherVector, epsilon)'
    fullName: 'equalsWithEpsilon(otherVector, epsilon)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equalsWithEpsilon(otherVector: ReadOnlyVector2, epsilon?: number): boolean;'
      return:
        type:
          - boolean
        description: true if the given vector coordinates are close to the current ones by a distance of epsilon.
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
        - id: epsilon
          description: defines the minimal distance to consider equality
          type:
            - number
  - uid: decentraland-ecs.Vector2.floor
    summary: Gets a new Vector2 from current Vector2 floored values
    name: floor()
    fullName: floor()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'floor(): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
  - uid: decentraland-ecs.Vector2.fract
    summary: Gets a new Vector2 from current Vector2 floored values
    name: fract()
    fullName: fract()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'fract(): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
  - uid: decentraland-ecs.Vector2.FromArray
    summary: Gets a new Vector2 set from the given index element of the given array
    name: 'FromArray(array, offset)'
    fullName: 'FromArray(array, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArray(array: ArrayLike<number>, offset?: number): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: array
          description: defines the data source
          type:
            - ArrayLike<number>
        - id: offset
          description: defines the offset in the data source
          type:
            - number
  - uid: decentraland-ecs.Vector2.FromArrayToRef
    summary: Sets "result" from the given index element of the given array
    name: 'FromArrayToRef(array, offset, result)'
    fullName: 'FromArrayToRef(array, offset, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector2): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: array
          description: defines the data source
          type:
            - ArrayLike<number>
        - id: offset
          description: defines the offset in the data source
          type:
            - number
        - id: result
          description: defines the target vector
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.getClassName
    summary: Gets class name
    name: getClassName()
    fullName: getClassName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getClassName(): string;'
      return:
        type:
          - string
        description: the string "Vector2"
  - uid: decentraland-ecs.Vector2.getHashCode
    summary: Gets current vector hash code
    name: getHashCode()
    fullName: getHashCode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHashCode(): number;'
      return:
        type:
          - number
        description: the Vector2 hash code as a number
  - uid: decentraland-ecs.Vector2.Hermite
    summary: >-
      Returns a new Vector2 located for "amount" (float) on the Hermite spline defined by the vectors "value1",
      "value3", "tangent1", "tangent2"
    name: 'Hermite(value1, tangent1, value2, tangent2, amount)'
    fullName: 'Hermite(value1, tangent1, value2, tangent2, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static Hermite(value1: ReadOnlyVector2, tangent1: ReadOnlyVector2, value2: ReadOnlyVector2, tangent2:
        ReadOnlyVector2, amount: number): Vector2;
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: value1
          description: defines the 1st control point
          type:
            - ReadOnlyVector2
        - id: tangent1
          description: defines the outgoing tangent
          type:
            - ReadOnlyVector2
        - id: value2
          description: defines the 2nd control point
          type:
            - ReadOnlyVector2
        - id: tangent2
          description: defines the incoming tangent
          type:
            - ReadOnlyVector2
        - id: amount
          description: defines the interpolation factor
          type:
            - number
  - uid: decentraland-ecs.Vector2.length
    summary: Gets the length of the vector
    name: length()
    fullName: length()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'length(): number;'
      return:
        type:
          - number
        description: the vector length (float)
  - uid: decentraland-ecs.Vector2.lengthSquared
    summary: Gets the vector squared length
    name: lengthSquared()
    fullName: lengthSquared()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'lengthSquared(): number;'
      return:
        type:
          - number
        description: the vector squared length (float)
  - uid: decentraland-ecs.Vector2.Lerp
    summary: >-
      Returns a new Vector2 located for "amount" (float) on the linear interpolation between the vector "start" adn the
      vector "end".
    name: 'Lerp(start, end, amount)'
    fullName: 'Lerp(start, end, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Lerp(start: ReadOnlyVector2, end: ReadOnlyVector2, amount: number): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: start
          description: defines the start vector
          type:
            - ReadOnlyVector2
        - id: end
          description: defines the end vector
          type:
            - ReadOnlyVector2
        - id: amount
          description: defines the interpolation factor
          type:
            - number
  - uid: decentraland-ecs.Vector2.Maximize
    summary: Gets a new Vecto2 set with the maximal coordinate values from the "left" and "right" vectors
    name: 'Maximize(left, right)'
    fullName: 'Maximize(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Maximize(left: ReadOnlyVector2, right: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: left
          description: defines 1st vector
          type:
            - ReadOnlyVector2
        - id: right
          description: defines 2nd vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.Minimize
    summary: Gets a new Vector2 set with the minimal coordinate values from the "left" and "right" vectors
    name: 'Minimize(left, right)'
    fullName: 'Minimize(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Minimize(left: ReadOnlyVector2, right: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: left
          description: defines 1st vector
          type:
            - ReadOnlyVector2
        - id: right
          description: defines 2nd vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.multiply
    summary: Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates
    name: multiply(otherVector)
    fullName: multiply(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiply(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.multiplyByFloats
    summary: Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats
    name: 'multiplyByFloats(x, y)'
    fullName: 'multiplyByFloats(x, y)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyByFloats(x: number, y: number): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: x
          description: defines the first coordinate
          type:
            - number
        - id: 'y'
          description: defines the second coordinate
          type:
            - number
  - uid: decentraland-ecs.Vector2.multiplyInPlace
    summary: Multiplies in place the current Vector2 coordinates by the given ones
    name: multiplyInPlace(otherVector)
    fullName: multiplyInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyInPlace(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.multiplyToRef
    summary: Sets "result" coordinates with the multiplication of the current Vector2 and the given one coordinates
    name: 'multiplyToRef(otherVector, result)'
    fullName: 'multiplyToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the unmodified current Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
        - id: result
          description: defines the target vector
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.negate
    summary: Gets a new Vector2 with current Vector2 negated coordinates
    name: negate()
    fullName: negate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'negate(): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
  - uid: decentraland-ecs.Vector2.normalize
    summary: Normalize the vector
    name: normalize()
    fullName: normalize()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'normalize(): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
  - uid: decentraland-ecs.Vector2.Normalize
    summary: Returns a new Vector2 equal to the normalized given vector
    name: Normalize(vector)
    fullName: Normalize(vector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Normalize(vector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: vector
          description: defines the vector to normalize
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.One
    summary: 'Gets a new Vector2(1, 1)'
    name: One()
    fullName: One()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static One(): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
  - uid: decentraland-ecs.Vector2.PointInTriangle
    summary: Determines if a given vector is included in a triangle
    name: 'PointInTriangle(p, p0, p1, p2)'
    fullName: 'PointInTriangle(p, p0, p1, p2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static PointInTriangle(p: ReadOnlyVector2, p0: ReadOnlyVector2, p1: ReadOnlyVector2, p2: ReadOnlyVector2):
        boolean;
      return:
        type:
          - boolean
        description: 'true if the point "p" is in the triangle defined by the vertors "p0", "p1", "p2"'
      parameters:
        - id: p
          description: defines the vector to test
          type:
            - ReadOnlyVector2
        - id: p0
          description: defines 1st triangle point
          type:
            - ReadOnlyVector2
        - id: p1
          description: defines 2nd triangle point
          type:
            - ReadOnlyVector2
        - id: p2
          description: defines 3rd triangle point
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.scale
    summary: Returns a new Vector2 scaled by "scale" from the current Vector2
    name: scale(scale)
    fullName: scale(scale)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scale(scale: number): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: scale
          description: defines the scaling factor
          type:
            - number
  - uid: decentraland-ecs.Vector2.scaleAndAddToRef
    summary: Scale the current Vector2 values by a factor and add the result to a given Vector2
    name: 'scaleAndAddToRef(scale, result)'
    fullName: 'scaleAndAddToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleAndAddToRef(scale: number, result: Vector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the unmodified current Vector2
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines the Vector2 object where to store the result
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.scaleInPlace
    summary: Multiply the Vector2 coordinates by scale
    name: scaleInPlace(scale)
    fullName: scaleInPlace(scale)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleInPlace(scale: number): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
      parameters:
        - id: scale
          description: defines the scaling factor
          type:
            - number
  - uid: decentraland-ecs.Vector2.scaleToRef
    summary: Scale the current Vector2 values by a factor to a given Vector2
    name: 'scaleToRef(scale, result)'
    fullName: 'scaleToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleToRef(scale: number, result: Vector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the unmodified current Vector2
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines the Vector2 object where to store the result
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.set
    summary: Sets the Vector2 coordinates with the given floats
    name: 'set(x, y)'
    fullName: 'set(x, y)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(x: number, y: number): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
      parameters:
        - id: x
          description: defines the first coordinate
          type:
            - number
        - id: 'y'
          description: defines the second coordinate
          type:
            - number
  - uid: decentraland-ecs.Vector2.subtract
    summary: Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2
    name: subtract(otherVector)
    fullName: subtract(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtract(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.subtractInPlace
    summary: Sets the current Vector2 coordinates by subtracting from it the given one coordinates
    name: subtractInPlace(otherVector)
    fullName: subtractInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractInPlace(otherVector: ReadOnlyVector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current updated Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
  - uid: decentraland-ecs.Vector2.subtractToRef
    summary: Sets the "result" coordinates with the subtraction of the given one from the current Vector2 coordinates.
    name: 'subtractToRef(otherVector, result)'
    fullName: 'subtractToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractToRef(otherVector: ReadOnlyVector2, result: Vector2): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the unmodified current Vector2
      parameters:
        - id: otherVector
          description: defines the other vector
          type:
            - ReadOnlyVector2
        - id: result
          description: defines the target vector
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.toArray
    summary: Sets the Vector2 coordinates in the given array or FloatArray from the given index.
    name: 'toArray(array, index)'
    fullName: 'toArray(array, index)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toArray(array: FloatArray, index?: number): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: the current Vector2
      parameters:
        - id: array
          description: defines the source array
          type:
            - FloatArray
        - id: index
          description: defines the offset in source array
          type:
            - number
  - uid: decentraland-ecs.Vector2.toString
    summary: Gets a string with the Vector2 coordinates
    name: toString()
    fullName: toString()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toString(): string;'
      return:
        type:
          - string
        description: a string with the Vector2 coordinates
  - uid: decentraland-ecs.Vector2.Transform
    summary: Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix
    name: 'Transform(vector, transformation)'
    fullName: 'Transform(vector, transformation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Transform(vector: Vector2, transformation: Matrix): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
      parameters:
        - id: vector
          description: defines the vector to transform
          type:
            - decentraland-ecs.Vector2
        - id: transformation
          description: defines the matrix to apply
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Vector2.TransformToRef
    summary: >-
      Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector
      "result" coordinates
    name: 'TransformToRef(vector, transformation, result)'
    fullName: 'TransformToRef(vector, transformation, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static TransformToRef(vector: ReadOnlyVector2, transformation: Matrix, result: Vector2): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: vector
          description: defines the vector to transform
          type:
            - ReadOnlyVector2
        - id: transformation
          description: defines the matrix to apply
          type:
            - decentraland-ecs.Matrix
        - id: result
          description: defines the target vector
          type:
            - decentraland-ecs.Vector2
  - uid: decentraland-ecs.Vector2.x
    summary: defines the first coordinate
    name: x
    fullName: x
    langs:
      - typeScript
    type: property
    syntax:
      content: 'x: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector2.y
    summary: defines the second coordinate
    name: 'y'
    fullName: 'y'
    langs:
      - typeScript
    type: property
    syntax:
      content: 'y: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector2.Zero
    summary: 'Gets a new Vector2(0, 0)'
    name: Zero()
    fullName: Zero()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Zero(): Vector2;'
      return:
        type:
          - decentraland-ecs.Vector2
        description: a new Vector2
