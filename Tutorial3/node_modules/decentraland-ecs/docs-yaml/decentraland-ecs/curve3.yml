### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Curve3
    summary: >-
      A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space. A Curve3 is
      designed from a series of successive Vector3.
      [https://doc.babylonjs.com/how\_to/how\_to\_use\_curve3](https://doc.babylonjs.com/how_to/how_to_use_curve3)
    name: Curve3
    fullName: Curve3
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Curve3.(constructor)
      - decentraland-ecs.Curve3.continue
      - decentraland-ecs.Curve3.CreateCatmullRomSpline
      - decentraland-ecs.Curve3.CreateCubicBezier
      - decentraland-ecs.Curve3.CreateHermiteSpline
      - decentraland-ecs.Curve3.CreateQuadraticBezier
      - decentraland-ecs.Curve3.getPoints
      - decentraland-ecs.Curve3.length
  - uid: decentraland-ecs.Curve3.(constructor)
    summary: >-
      A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space. A Curve3 is
      designed from a series of successive Vector3.
      [Tutorial](http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object)
    name: (constructor)(points)
    fullName: (constructor)(points)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(points: Vector3[]);'
      parameters:
        - id: points
          description: points which make up the curve
          type:
            - 'Vector3[]'
  - uid: decentraland-ecs.Curve3.continue
    summary: >-
      Returns a new instance of Curve3 object : var curve = curveA.continue(curveB); This new Curve3 is built by
      translating and sticking the curveB at the end of the curveA. curveA and curveB keep unchanged.
    name: continue(curve)
    fullName: continue(curve)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'continue(curve: Curve3): Curve3;'
      return:
        type:
          - decentraland-ecs.Curve3
        description: the newly constructed curve
      parameters:
        - id: curve
          description: the curve to continue from this curve
          type:
            - decentraland-ecs.Curve3
  - uid: decentraland-ecs.Curve3.CreateCatmullRomSpline
    summary: 'Returns a Curve3 object along a CatmullRom Spline curve :'
    name: 'CreateCatmullRomSpline(points, nbPoints, closed)'
    fullName: 'CreateCatmullRomSpline(points, nbPoints, closed)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static CreateCatmullRomSpline(points: Vector3[], nbPoints: number, closed?: boolean): Curve3;'
      return:
        type:
          - decentraland-ecs.Curve3
        description: the created Curve3
      parameters:
        - id: points
          description: '(array of Vector3) the points the spline must pass through. At least, four points required'
          type:
            - 'Vector3[]'
        - id: nbPoints
          description: (integer) the wanted number of points between each curve control points
          type:
            - number
        - id: closed
          description: '(boolean) optional with default false, when true forms a closed loop from the points'
          type:
            - boolean
  - uid: decentraland-ecs.Curve3.CreateCubicBezier
    summary: >-
      Returns a Curve3 object along a Cubic Bezier curve :
      http://doc.babylonjs.com/tutorials/How\_to\_use\_Curve3\#cubic-bezier-curve
    name: 'CreateCubicBezier(v0, v1, v2, v3, nbPoints)'
    fullName: 'CreateCubicBezier(v0, v1, v2, v3, nbPoints)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static CreateCubicBezier(v0: Vector3, v1: Vector3, v2: Vector3, v3: Vector3, nbPoints: number): Curve3;'
      return:
        type:
          - decentraland-ecs.Curve3
        description: the created Curve3
      parameters:
        - id: v0
          description: (Vector3) the origin point of the Cubic Bezier
          type:
            - decentraland-ecs.Vector3
        - id: v1
          description: (Vector3) the first control point
          type:
            - decentraland-ecs.Vector3
        - id: v2
          description: (Vector3) the second control point
          type:
            - decentraland-ecs.Vector3
        - id: v3
          description: (Vector3) the end point of the Cubic Bezier
          type:
            - decentraland-ecs.Vector3
        - id: nbPoints
          description: (integer) the wanted number of points in the curve
          type:
            - number
  - uid: decentraland-ecs.Curve3.CreateHermiteSpline
    summary: >-
      Returns a Curve3 object along a Hermite Spline curve :
      http://doc.babylonjs.com/tutorials/How\_to\_use\_Curve3\#hermite-spline
    name: 'CreateHermiteSpline(p1, t1, p2, t2, nbPoints)'
    fullName: 'CreateHermiteSpline(p1, t1, p2, t2, nbPoints)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static CreateHermiteSpline(p1: Vector3, t1: Vector3, p2: Vector3, t2: Vector3, nbPoints: number): Curve3;'
      return:
        type:
          - decentraland-ecs.Curve3
        description: the created Curve3
      parameters:
        - id: p1
          description: (Vector3) the origin point of the Hermite Spline
          type:
            - decentraland-ecs.Vector3
        - id: t1
          description: (Vector3) the tangent vector at the origin point
          type:
            - decentraland-ecs.Vector3
        - id: p2
          description: (Vector3) the end point of the Hermite Spline
          type:
            - decentraland-ecs.Vector3
        - id: t2
          description: (Vector3) the tangent vector at the end point
          type:
            - decentraland-ecs.Vector3
        - id: nbPoints
          description: (integer) the wanted number of points in the curve
          type:
            - number
  - uid: decentraland-ecs.Curve3.CreateQuadraticBezier
    summary: >-
      Returns a Curve3 object along a Quadratic Bezier curve :
      http://doc.babylonjs.com/tutorials/How\_to\_use\_Curve3\#quadratic-bezier-curve
    name: 'CreateQuadraticBezier(v0, v1, v2, nbPoints)'
    fullName: 'CreateQuadraticBezier(v0, v1, v2, nbPoints)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static CreateQuadraticBezier(v0: Vector3, v1: Vector3, v2: Vector3, nbPoints: number): Curve3;'
      return:
        type:
          - decentraland-ecs.Curve3
        description: the created Curve3
      parameters:
        - id: v0
          description: (Vector3) the origin point of the Quadratic Bezier
          type:
            - decentraland-ecs.Vector3
        - id: v1
          description: (Vector3) the control point
          type:
            - decentraland-ecs.Vector3
        - id: v2
          description: (Vector3) the end point of the Quadratic Bezier
          type:
            - decentraland-ecs.Vector3
        - id: nbPoints
          description: (integer) the wanted number of points in the curve
          type:
            - number
  - uid: decentraland-ecs.Curve3.getPoints
    name: getPoints()
    fullName: getPoints()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPoints(): Vector3[];'
      return:
        type:
          - 'Vector3[]'
        description: the Curve3 stored array of successive Vector3
  - uid: decentraland-ecs.Curve3.length
    name: length()
    fullName: length()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'length(): number;'
      return:
        type:
          - number
        description: the computed length (float) of the curve.
