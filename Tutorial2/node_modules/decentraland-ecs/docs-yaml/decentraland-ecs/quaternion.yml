### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Quaternion
    summary: >-
      Class used to store quaternion data
      [https://en.wikipedia.org/wiki/Quaternion](https://en.wikipedia.org/wiki/Quaternion)
      [http://doc.babylonjs.com/features/position,\_rotation,\_scaling](http://doc.babylonjs.com/features/position,_rotation,_scaling)
    name: Quaternion
    fullName: Quaternion
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Quaternion.(constructor)
      - decentraland-ecs.Quaternion.Angle
      - decentraland-ecs.Quaternion.angleAxis
      - decentraland-ecs.Quaternion.AreClose
      - decentraland-ecs.Quaternion.asArray
      - decentraland-ecs.Quaternion.clone
      - decentraland-ecs.Quaternion.conjugate
      - decentraland-ecs.Quaternion.conjugateInPlace
      - decentraland-ecs.Quaternion.conjugateToRef
      - decentraland-ecs.Quaternion.copyFrom
      - decentraland-ecs.Quaternion.copyFromFloats
      - decentraland-ecs.Quaternion.Dot
      - decentraland-ecs.Quaternion.equals
      - decentraland-ecs.Quaternion.Euler
      - decentraland-ecs.Quaternion.eulerAngles
      - decentraland-ecs.Quaternion.FromArray
      - decentraland-ecs.Quaternion.FromEulerAnglesRef
      - decentraland-ecs.Quaternion.fromRotationMatrix
      - decentraland-ecs.Quaternion.FromRotationMatrix
      - decentraland-ecs.Quaternion.FromRotationMatrixToRef
      - decentraland-ecs.Quaternion.FromToRotation
      - decentraland-ecs.Quaternion.getClassName
      - decentraland-ecs.Quaternion.getHashCode
      - decentraland-ecs.Quaternion.Hermite
      - decentraland-ecs.Quaternion.Identity
      - decentraland-ecs.Quaternion.Inverse
      - decentraland-ecs.Quaternion.IsIdentity
      - decentraland-ecs.Quaternion.length
      - decentraland-ecs.Quaternion.lengthSquared
      - decentraland-ecs.Quaternion.LookRotation
      - decentraland-ecs.Quaternion.multiply
      - decentraland-ecs.Quaternion.multiplyInPlace
      - decentraland-ecs.Quaternion.multiplyToRef
      - decentraland-ecs.Quaternion.normalize
      - decentraland-ecs.Quaternion.normalized
      - decentraland-ecs.Quaternion.RotateTowards
      - decentraland-ecs.Quaternion.RotationAlphaBetaGamma
      - decentraland-ecs.Quaternion.RotationAlphaBetaGammaToRef
      - decentraland-ecs.Quaternion.RotationAxis
      - decentraland-ecs.Quaternion.RotationAxisToRef
      - decentraland-ecs.Quaternion.RotationQuaternionFromAxis
      - decentraland-ecs.Quaternion.RotationQuaternionFromAxisToRef
      - decentraland-ecs.Quaternion.RotationYawPitchRoll
      - decentraland-ecs.Quaternion.RotationYawPitchRollToRef
      - decentraland-ecs.Quaternion.scale
      - decentraland-ecs.Quaternion.scaleAndAddToRef
      - decentraland-ecs.Quaternion.scaleInPlace
      - decentraland-ecs.Quaternion.scaleToRef
      - decentraland-ecs.Quaternion.set
      - decentraland-ecs.Quaternion.setEuler
      - decentraland-ecs.Quaternion.setFromToRotation
      - decentraland-ecs.Quaternion.Slerp
      - decentraland-ecs.Quaternion.SlerpToRef
      - decentraland-ecs.Quaternion.subtract
      - decentraland-ecs.Quaternion.toRotationMatrix
      - decentraland-ecs.Quaternion.toString
      - decentraland-ecs.Quaternion.w
      - decentraland-ecs.Quaternion.x
      - decentraland-ecs.Quaternion.y
      - decentraland-ecs.Quaternion.z
      - decentraland-ecs.Quaternion.Zero
  - uid: decentraland-ecs.Quaternion.(constructor)
    summary: Creates a new Quaternion from the given floats
    name: '(constructor)(x, y, z, w)'
    fullName: '(constructor)(x, y, z, w)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: |-
        constructor(
            x?: number, 
            y?: number, 
            z?: number, 
            w?: number);
      parameters:
        - id: x
          description: defines the first component (0 by default)
          type:
            - number
        - id: 'y'
          description: defines the second component (0 by default)
          type:
            - number
        - id: z
          description: defines the third component (0 by default)
          type:
            - number
        - id: w
          description: defines the fourth component (1.0 by default)
          type:
            - number
  - uid: decentraland-ecs.Quaternion.Angle
    summary: Returns the angle in degrees between two rotations a and b.
    name: 'Angle(quat1, quat2)'
    fullName: 'Angle(quat1, quat2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Angle(quat1: ReadOnlyQuaternion, quat2: ReadOnlyQuaternion): number;'
      return:
        type:
          - number
        description: ''
      parameters:
        - id: quat1
          description: defines the first quaternion
          type:
            - ReadOnlyQuaternion
        - id: quat2
          description: defines the second quaternion
          type:
            - ReadOnlyQuaternion
  - uid: decentraland-ecs.Quaternion.angleAxis
    name: 'angleAxis(degress, axis)'
    fullName: 'angleAxis(degress, axis)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'angleAxis(degress: number, axis: Vector3): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: ''
      parameters:
        - id: degress
          description: ''
          type:
            - number
        - id: axis
          description: ''
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Quaternion.AreClose
    summary: Checks if the two quaternions are close to each other
    name: 'AreClose(quat0, quat1)'
    fullName: 'AreClose(quat0, quat1)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static AreClose(quat0: ReadOnlyQuaternion, quat1: ReadOnlyQuaternion): boolean;'
      return:
        type:
          - boolean
        description: true if the two quaternions are close to each other
      parameters:
        - id: quat0
          description: defines the first quaternion to check
          type:
            - ReadOnlyQuaternion
        - id: quat1
          description: defines the second quaternion to check
          type:
            - ReadOnlyQuaternion
  - uid: decentraland-ecs.Quaternion.asArray
    summary: Copy the quaternion to an array
    name: asArray()
    fullName: asArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'asArray(): number[];'
      return:
        type:
          - 'number[]'
        description: a new array populated with 4 elements from the quaternion coordinates
  - uid: decentraland-ecs.Quaternion.clone
    summary: Clone the current quaternion
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion copied from the current one
  - uid: decentraland-ecs.Quaternion.conjugate
    summary: Conjugates in place (1-q) the current quaternion
    name: conjugate()
    fullName: conjugate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'conjugate(): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion
  - uid: decentraland-ecs.Quaternion.conjugateInPlace
    summary: Conjugates in place (1-q) the current quaternion
    name: conjugateInPlace()
    fullName: conjugateInPlace()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'conjugateInPlace(): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the current updated quaternion
  - uid: decentraland-ecs.Quaternion.conjugateToRef
    summary: Conjugates (1-q) the current quaternion and stores the result in the given quaternion
    name: conjugateToRef(ref)
    fullName: conjugateToRef(ref)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'conjugateToRef(ref: Quaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the current quaternion
      parameters:
        - id: ref
          description: defines the target quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.copyFrom
    summary: Copy a quaternion to the current one
    name: copyFrom(other)
    fullName: copyFrom(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(other: ReadOnlyQuaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the updated current quaternion
      parameters:
        - id: other
          description: defines the other quaternion
          type:
            - ReadOnlyQuaternion
  - uid: decentraland-ecs.Quaternion.copyFromFloats
    summary: Updates the current quaternion with the given float coordinates
    name: 'copyFromFloats(x, y, z, w)'
    fullName: 'copyFromFloats(x, y, z, w)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFromFloats(x: number, y: number, z: number, w: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the updated current quaternion
      parameters:
        - id: x
          description: defines the x coordinate
          type:
            - number
        - id: 'y'
          description: defines the y coordinate
          type:
            - number
        - id: z
          description: defines the z coordinate
          type:
            - number
        - id: w
          description: defines the w coordinate
          type:
            - number
  - uid: decentraland-ecs.Quaternion.Dot
    summary: Returns the dot product (float) between the quaternions "left" and "right"
    name: 'Dot(left, right)'
    fullName: 'Dot(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Dot(left: ReadOnlyQuaternion, right: ReadOnlyQuaternion): number;'
      return:
        type:
          - number
        description: the dot product
      parameters:
        - id: left
          description: defines the left operand
          type:
            - ReadOnlyQuaternion
        - id: right
          description: defines the right operand
          type:
            - ReadOnlyQuaternion
  - uid: decentraland-ecs.Quaternion.equals
    summary: Check if two quaternions are equals
    name: equals(otherQuaternion)
    fullName: equals(otherQuaternion)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equals(otherQuaternion: ReadOnlyQuaternion): boolean;'
      return:
        type:
          - boolean
        description: true if the current quaternion and the given one coordinates are strictly equals
      parameters:
        - id: otherQuaternion
          description: defines the second operand
          type:
            - ReadOnlyQuaternion
  - uid: decentraland-ecs.Quaternion.Euler
    summary: >-
      Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the
      y axis.
    name: 'Euler(x, y, z)'
    fullName: 'Euler(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Euler(x: number, y: number, z: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: ''
      parameters:
        - id: x
          description: the rotation on the x axis in euler degrees
          type:
            - number
        - id: 'y'
          description: the rotation on the y axis in euler degrees
          type:
            - number
        - id: z
          description: the rotation on the z axis in euler degrees
          type:
            - number
  - uid: decentraland-ecs.Quaternion.eulerAngles
    summary: Sets the euler angle representation of the rotation.
    name: eulerAngles
    fullName: eulerAngles
    langs:
      - typeScript
    type: property
    syntax:
      content: 'eulerAngles: Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Quaternion.FromArray
    summary: Creates a new quaternion from data stored into an array
    name: 'FromArray(array, offset)'
    fullName: 'FromArray(array, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArray(array: ArrayLike<number>, offset?: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion
      parameters:
        - id: array
          description: defines the data source
          type:
            - ArrayLike<number>
        - id: offset
          description: defines the offset in the source array where the data starts
          type:
            - number
  - uid: decentraland-ecs.Quaternion.FromEulerAnglesRef
    summary: Creates a new quaternion from a set of euler angles and stores it in the target quaternion
    name: 'FromEulerAnglesRef(x, y, z, result)'
    fullName: 'FromEulerAnglesRef(x, y, z, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromEulerAnglesRef(x: number, y: number, z: number, result: Quaternion): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: x
          description: ''
          type:
            - number
        - id: 'y'
          description: ''
          type:
            - number
        - id: z
          description: ''
          type:
            - number
        - id: result
          description: ''
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.fromRotationMatrix
    summary: Updates the current quaternion from the given rotation matrix values
    name: fromRotationMatrix(matrix)
    fullName: fromRotationMatrix(matrix)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'fromRotationMatrix(matrix: Matrix): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the current updated quaternion
      parameters:
        - id: matrix
          description: defines the source matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Quaternion.FromRotationMatrix
    summary: Creates a new quaternion from a rotation matrix
    name: FromRotationMatrix(matrix)
    fullName: FromRotationMatrix(matrix)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromRotationMatrix(matrix: Matrix): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion created from the given rotation matrix values
      parameters:
        - id: matrix
          description: defines the source matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Quaternion.FromRotationMatrixToRef
    summary: Updates the given quaternion with the given rotation matrix values
    name: 'FromRotationMatrixToRef(matrix, result)'
    fullName: 'FromRotationMatrixToRef(matrix, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromRotationMatrixToRef(matrix: Matrix, result: Quaternion): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: matrix
          description: defines the source matrix
          type:
            - decentraland-ecs.Matrix
        - id: result
          description: defines the target quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.FromToRotation
    summary: Creates a rotation which rotates from fromDirection to toDirection.
    name: 'FromToRotation(from, to)'
    fullName: 'FromToRotation(from, to)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromToRotation(from: Vector3, to: Vector3): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: ''
      parameters:
        - id: from
          description: defines the first Vector
          type:
            - decentraland-ecs.Vector3
        - id: to
          description: defines the second Vector
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Quaternion.getClassName
    summary: Gets the class name of the quaternion
    name: getClassName()
    fullName: getClassName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getClassName(): string;'
      return:
        type:
          - string
        description: the string "Quaternion"
  - uid: decentraland-ecs.Quaternion.getHashCode
    summary: Gets a hash code for this quaternion
    name: getHashCode()
    fullName: getHashCode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHashCode(): number;'
      return:
        type:
          - number
        description: the quaternion hash code
  - uid: decentraland-ecs.Quaternion.Hermite
    summary: Interpolate between two quaternions using Hermite interpolation
    name: 'Hermite(value1, tangent1, value2, tangent2, amount)'
    fullName: 'Hermite(value1, tangent1, value2, tangent2, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static Hermite(value1: ReadOnlyQuaternion, tangent1: ReadOnlyQuaternion, value2: ReadOnlyQuaternion, tangent2:
        ReadOnlyQuaternion, amount: number): Quaternion;
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the new interpolated quaternion
      parameters:
        - id: value1
          description: defines first quaternion
          type:
            - ReadOnlyQuaternion
        - id: tangent1
          description: defines the incoming tangent
          type:
            - ReadOnlyQuaternion
        - id: value2
          description: defines second quaternion
          type:
            - ReadOnlyQuaternion
        - id: tangent2
          description: defines the outgoing tangent
          type:
            - ReadOnlyQuaternion
        - id: amount
          description: defines the target quaternion
          type:
            - number
  - uid: decentraland-ecs.Quaternion.Identity
    summary: Creates an identity quaternion
    name: Identity
    fullName: Identity
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static readonly Identity: Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.Inverse
    summary: Inverse a given quaternion
    name: Inverse(q)
    fullName: Inverse(q)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Inverse(q: Quaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion as the inverted current quaternion
      parameters:
        - id: q
          description: defines the source quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.IsIdentity
    summary: Gets a boolean indicating if the given quaternion is identity
    name: IsIdentity(quaternion)
    fullName: IsIdentity(quaternion)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static IsIdentity(quaternion: ReadOnlyQuaternion): boolean;'
      return:
        type:
          - boolean
        description: true if the quaternion is identity
      parameters:
        - id: quaternion
          description: defines the quaternion to check
          type:
            - ReadOnlyQuaternion
  - uid: decentraland-ecs.Quaternion.length
    summary: Gets length of current quaternion
    name: length
    fullName: length
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly length: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Quaternion.lengthSquared
    summary: Gets length of current quaternion
    name: lengthSquared
    fullName: lengthSquared
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly lengthSquared: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Quaternion.LookRotation
    summary: Creates a rotation with the specified forward and upwards directions.
    name: 'LookRotation(forward, up)'
    fullName: 'LookRotation(forward, up)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LookRotation(forward: Vector3, up?: Vector3): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: ''
      parameters:
        - id: forward
          description: the direction to look in
          type:
            - decentraland-ecs.Vector3
        - id: up
          description: the vector that defines in which direction up is
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Quaternion.multiply
    summary: Multiplies two quaternions
    name: multiply(q1)
    fullName: multiply(q1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiply(q1: ReadOnlyQuaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion set as the multiplication result of the current one with the given one "q1"
      parameters:
        - id: q1
          description: defines the second operand
          type:
            - ReadOnlyQuaternion
  - uid: decentraland-ecs.Quaternion.multiplyInPlace
    summary: Updates the current quaternion with the multiplication of itself with the given one "q1"
    name: multiplyInPlace(q1)
    fullName: multiplyInPlace(q1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyInPlace(q1: ReadOnlyQuaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the currentupdated quaternion
      parameters:
        - id: q1
          description: defines the second operand
          type:
            - ReadOnlyQuaternion
  - uid: decentraland-ecs.Quaternion.multiplyToRef
    summary: Sets the given "result" as the the multiplication result of the current one with the given one "q1"
    name: 'multiplyToRef(q1, result)'
    fullName: 'multiplyToRef(q1, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyToRef(q1: ReadOnlyQuaternion, result: Quaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the current quaternion
      parameters:
        - id: q1
          description: defines the second operand
          type:
            - ReadOnlyQuaternion
        - id: result
          description: defines the target quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.normalize
    summary: Normalize in place the current quaternion
    name: normalize()
    fullName: normalize()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'normalize(): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the current updated quaternion
  - uid: decentraland-ecs.Quaternion.normalized
    summary: Converts this quaternion to one with the same orientation but with a magnitude of 1.
    name: normalized
    fullName: normalized
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly normalized: Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.RotateTowards
    summary: The from quaternion is rotated towards to by an angular step of maxDegreesDelta.
    name: 'RotateTowards(from, to, maxDegreesDelta)'
    fullName: 'RotateTowards(from, to, maxDegreesDelta)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotateTowards(from: ReadOnlyQuaternion, to: Quaternion, maxDegreesDelta: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: ''
      parameters:
        - id: from
          description: defines the first quaternion
          type:
            - ReadOnlyQuaternion
        - id: to
          description: defines the second quaternion
          type:
            - decentraland-ecs.Quaternion
        - id: maxDegreesDelta
          description: the interval step
          type:
            - number
  - uid: decentraland-ecs.Quaternion.RotationAlphaBetaGamma
    summary: Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation
    name: 'RotationAlphaBetaGamma(alpha, beta, gamma)'
    fullName: 'RotationAlphaBetaGamma(alpha, beta, gamma)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationAlphaBetaGamma(alpha: number, beta: number, gamma: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the new quaternion
      parameters:
        - id: alpha
          description: defines the rotation around first axis
          type:
            - number
        - id: beta
          description: defines the rotation around second axis
          type:
            - number
        - id: gamma
          description: defines the rotation around third axis
          type:
            - number
  - uid: decentraland-ecs.Quaternion.RotationAlphaBetaGammaToRef
    summary: >-
      Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the
      target quaternion
    name: 'RotationAlphaBetaGammaToRef(alpha, beta, gamma, result)'
    fullName: 'RotationAlphaBetaGammaToRef(alpha, beta, gamma, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationAlphaBetaGammaToRef(alpha: number, beta: number, gamma: number, result: Quaternion): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: alpha
          description: defines the rotation around first axis
          type:
            - number
        - id: beta
          description: defines the rotation around second axis
          type:
            - number
        - id: gamma
          description: defines the rotation around third axis
          type:
            - number
        - id: result
          description: defines the target quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.RotationAxis
    summary: Creates a quaternion from a rotation around an axis
    name: 'RotationAxis(axis, angle)'
    fullName: 'RotationAxis(axis, angle)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationAxis(axis: Vector3, angle: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion created from the given axis (Vector3) and angle in radians (float)
      parameters:
        - id: axis
          description: defines the axis to use
          type:
            - decentraland-ecs.Vector3
        - id: angle
          description: defines the angle to use (in Euler degrees)
          type:
            - number
  - uid: decentraland-ecs.Quaternion.RotationAxisToRef
    summary: Creates a rotation around an axis and stores it into the given quaternion
    name: 'RotationAxisToRef(axis, angle, result)'
    fullName: 'RotationAxisToRef(axis, angle, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationAxisToRef(axis: Vector3, angle: number, result: Quaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the target quaternion
      parameters:
        - id: axis
          description: defines the axis to use
          type:
            - decentraland-ecs.Vector3
        - id: angle
          description: defines the angle to use (in Euler degrees)
          type:
            - number
        - id: result
          description: defines the target quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.RotationQuaternionFromAxis
    summary: >-
      Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a
      rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)
    name: 'RotationQuaternionFromAxis(axis1, axis2, axis3)'
    fullName: 'RotationQuaternionFromAxis(axis1, axis2, axis3)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationQuaternionFromAxis(axis1: Vector3, axis2: Vector3, axis3: Vector3): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the new quaternion
      parameters:
        - id: axis1
          description: defines the first axis
          type:
            - decentraland-ecs.Vector3
        - id: axis2
          description: defines the second axis
          type:
            - decentraland-ecs.Vector3
        - id: axis3
          description: defines the third axis
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Quaternion.RotationQuaternionFromAxisToRef
    summary: >-
      Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1,
      axis2 and axis3 are normalized during this operation) and stores it in the target quaternion
    name: 'RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref)'
    fullName: 'RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationQuaternionFromAxisToRef(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Quaternion): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: axis1
          description: defines the first axis
          type:
            - decentraland-ecs.Vector3
        - id: axis2
          description: defines the second axis
          type:
            - decentraland-ecs.Vector3
        - id: axis3
          description: defines the third axis
          type:
            - decentraland-ecs.Vector3
        - id: ref
          description: defines the target quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.RotationYawPitchRoll
    summary: 'Creates a new quaternion from the given Euler float angles (y, x, z)'
    name: 'RotationYawPitchRoll(yaw, pitch, roll)'
    fullName: 'RotationYawPitchRoll(yaw, pitch, roll)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationYawPitchRoll(yaw: number, pitch: number, roll: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the new quaternion
      parameters:
        - id: yaw
          description: defines the rotation around Y axis
          type:
            - number
        - id: pitch
          description: defines the rotation around X axis
          type:
            - number
        - id: roll
          description: defines the rotation around Z axis
          type:
            - number
  - uid: decentraland-ecs.Quaternion.RotationYawPitchRollToRef
    summary: 'Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion'
    name: 'RotationYawPitchRollToRef(yaw, pitch, roll, result)'
    fullName: 'RotationYawPitchRollToRef(yaw, pitch, roll, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationYawPitchRollToRef(yaw: number, pitch: number, roll: number, result: Quaternion): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: yaw
          description: defines the rotation around Y axis
          type:
            - number
        - id: pitch
          description: defines the rotation around X axis
          type:
            - number
        - id: roll
          description: defines the rotation around Z axis
          type:
            - number
        - id: result
          description: defines the target quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.scale
    summary: Multiplies the current quaternion by a scale factor
    name: scale(value)
    fullName: scale(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scale(value: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion set by multiplying the current quaternion coordinates by the float "scale"
      parameters:
        - id: value
          description: defines the scale factor
          type:
            - number
  - uid: decentraland-ecs.Quaternion.scaleAndAddToRef
    summary: Scale the current quaternion values by a factor and add the result to a given quaternion
    name: 'scaleAndAddToRef(scale, result)'
    fullName: 'scaleAndAddToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleAndAddToRef(scale: number, result: Quaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the unmodified current quaternion
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines the Quaternion object where to store the result
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.scaleInPlace
    summary: Multiplies in place the current quaternion by a scale factor
    name: scaleInPlace(value)
    fullName: scaleInPlace(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleInPlace(value: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the current modified quaternion
      parameters:
        - id: value
          description: defines the scale factor
          type:
            - number
  - uid: decentraland-ecs.Quaternion.scaleToRef
    summary: Scale the current quaternion values by a factor and stores the result to a given quaternion
    name: 'scaleToRef(scale, result)'
    fullName: 'scaleToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleToRef(scale: number, result: Quaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the unmodified current quaternion
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines the Quaternion object where to store the result
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.set
    summary: Updates the current quaternion from the given float coordinates
    name: 'set(x, y, z, w)'
    fullName: 'set(x, y, z, w)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(x: number, y: number, z: number, w: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the updated current quaternion
      parameters:
        - id: x
          description: defines the x coordinate
          type:
            - number
        - id: 'y'
          description: defines the y coordinate
          type:
            - number
        - id: z
          description: defines the z coordinate
          type:
            - number
        - id: w
          description: defines the w coordinate
          type:
            - number
  - uid: decentraland-ecs.Quaternion.setEuler
    summary: Updates the current quaternion from the given euler angles
    name: 'setEuler(x, y, z)'
    fullName: 'setEuler(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setEuler(x: number, y: number, z: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the updated current quaternion
      parameters:
        - id: x
          description: ''
          type:
            - number
        - id: 'y'
          description: ''
          type:
            - number
        - id: z
          description: ''
          type:
            - number
  - uid: decentraland-ecs.Quaternion.setFromToRotation
    summary: Creates a rotation which rotates from fromDirection to toDirection.
    name: 'setFromToRotation(from, to, up)'
    fullName: 'setFromToRotation(from, to, up)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFromToRotation(from: Vector3, to: Vector3, up?: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: from
          description: defines the first Vector
          type:
            - decentraland-ecs.Vector3
        - id: to
          description: defines the second Vector
          type:
            - decentraland-ecs.Vector3
        - id: up
          description: defines the direction
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Quaternion.Slerp
    summary: Interpolates between two quaternions
    name: 'Slerp(left, right, amount)'
    fullName: 'Slerp(left, right, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Slerp(left: ReadOnlyQuaternion, right: ReadOnlyQuaternion, amount: number): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the new interpolated quaternion
      parameters:
        - id: left
          description: defines first quaternion
          type:
            - ReadOnlyQuaternion
        - id: right
          description: defines second quaternion
          type:
            - ReadOnlyQuaternion
        - id: amount
          description: defines the gradient to use
          type:
            - number
  - uid: decentraland-ecs.Quaternion.SlerpToRef
    summary: Interpolates between two quaternions and stores it into a target quaternion
    name: 'SlerpToRef(left, right, amount, result)'
    fullName: 'SlerpToRef(left, right, amount, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static SlerpToRef(left: ReadOnlyQuaternion, right: ReadOnlyQuaternion, amount: number, result: Quaternion):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: left
          description: defines first quaternion
          type:
            - ReadOnlyQuaternion
        - id: right
          description: defines second quaternion
          type:
            - ReadOnlyQuaternion
        - id: amount
          description: defines the gradient to use
          type:
            - number
        - id: result
          description: defines the target quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.subtract
    summary: Subtract two quaternions
    name: subtract(other)
    fullName: subtract(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtract(other: Quaternion): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: a new quaternion as the subtraction result of the given one from the current one
      parameters:
        - id: other
          description: defines the second operand
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Quaternion.toRotationMatrix
    summary: Updates the given rotation matrix with the current quaternion values
    name: toRotationMatrix(result)
    fullName: toRotationMatrix(result)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toRotationMatrix(result: Matrix): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: the current unchanged quaternion
      parameters:
        - id: result
          description: defines the target matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Quaternion.toString
    summary: Gets a string representation for the current quaternion
    name: toString()
    fullName: toString()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toString(): string;'
      return:
        type:
          - string
        description: a string with the Quaternion coordinates
  - uid: decentraland-ecs.Quaternion.w
    summary: defines the fourth component (1.0 by default)
    name: w
    fullName: w
    langs:
      - typeScript
    type: property
    syntax:
      content: 'w: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Quaternion.x
    summary: defines the first component (0 by default)
    name: x
    fullName: x
    langs:
      - typeScript
    type: property
    syntax:
      content: 'x: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Quaternion.y
    summary: defines the second component (0 by default)
    name: 'y'
    fullName: 'y'
    langs:
      - typeScript
    type: property
    syntax:
      content: 'y: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Quaternion.z
    summary: defines the third component (0 by default)
    name: z
    fullName: z
    langs:
      - typeScript
    type: property
    syntax:
      content: 'z: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Quaternion.Zero
    summary: Creates an empty quaternion
    name: Zero()
    fullName: Zero()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Zero(): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: 'a new quaternion set to (0.0, 0.0, 0.0)'
