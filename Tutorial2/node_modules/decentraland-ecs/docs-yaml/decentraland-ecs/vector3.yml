### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Vector3
    summary: >-
      Classed used to store (x,y,z) vector representation A Vector3 is the main object used in 3D geometry It can
      represent etiher the coordinates of a point the space, either a direction Reminder: Babylon.js uses a left handed
      forward facing system
    name: Vector3
    fullName: Vector3
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Vector3.(constructor)
      - decentraland-ecs.Vector3.add
      - decentraland-ecs.Vector3.Add
      - decentraland-ecs.Vector3.addInPlace
      - decentraland-ecs.Vector3.addInPlaceFromFloats
      - decentraland-ecs.Vector3.addToRef
      - decentraland-ecs.Vector3.applyMatrix4
      - decentraland-ecs.Vector3.applyMatrix4ToRef
      - decentraland-ecs.Vector3.asArray
      - decentraland-ecs.Vector3.Backward
      - decentraland-ecs.Vector3.CatmullRom
      - decentraland-ecs.Vector3.Center
      - decentraland-ecs.Vector3.Clamp
      - decentraland-ecs.Vector3.ClampToRef
      - decentraland-ecs.Vector3.clone
      - decentraland-ecs.Vector3.copyFrom
      - decentraland-ecs.Vector3.copyFromFloats
      - decentraland-ecs.Vector3.Cross
      - decentraland-ecs.Vector3.CrossToRef
      - decentraland-ecs.Vector3.Distance
      - decentraland-ecs.Vector3.DistanceSquared
      - decentraland-ecs.Vector3.divide
      - decentraland-ecs.Vector3.divideInPlace
      - decentraland-ecs.Vector3.divideToRef
      - decentraland-ecs.Vector3.Dot
      - decentraland-ecs.Vector3.Down
      - decentraland-ecs.Vector3.equals
      - decentraland-ecs.Vector3.equalsToFloats
      - decentraland-ecs.Vector3.equalsWithEpsilon
      - decentraland-ecs.Vector3.floor
      - decentraland-ecs.Vector3.Forward
      - decentraland-ecs.Vector3.fract
      - decentraland-ecs.Vector3.FromArray
      - decentraland-ecs.Vector3.FromArrayToRef
      - decentraland-ecs.Vector3.FromFloatArray
      - decentraland-ecs.Vector3.FromFloatArrayToRef
      - decentraland-ecs.Vector3.FromFloatsToRef
      - decentraland-ecs.Vector3.GetAngleBetweenVectors
      - decentraland-ecs.Vector3.getClassName
      - decentraland-ecs.Vector3.GetClipFactor
      - decentraland-ecs.Vector3.getHashCode
      - decentraland-ecs.Vector3.Hermite
      - decentraland-ecs.Vector3.isNonUniform
      - decentraland-ecs.Vector3.Left
      - decentraland-ecs.Vector3.length
      - decentraland-ecs.Vector3.lengthSquared
      - decentraland-ecs.Vector3.Lerp
      - decentraland-ecs.Vector3.LerpToRef
      - decentraland-ecs.Vector3.Maximize
      - decentraland-ecs.Vector3.maximizeInPlace
      - decentraland-ecs.Vector3.maximizeInPlaceFromFloats
      - decentraland-ecs.Vector3.Minimize
      - decentraland-ecs.Vector3.minimizeInPlace
      - decentraland-ecs.Vector3.minimizeInPlaceFromFloats
      - decentraland-ecs.Vector3.multiply
      - decentraland-ecs.Vector3.multiplyByFloats
      - decentraland-ecs.Vector3.multiplyInPlace
      - decentraland-ecs.Vector3.multiplyToRef
      - decentraland-ecs.Vector3.negate
      - decentraland-ecs.Vector3.normalize
      - decentraland-ecs.Vector3.Normalize
      - decentraland-ecs.Vector3.normalizeFromLength
      - decentraland-ecs.Vector3.normalizeToNew
      - decentraland-ecs.Vector3.normalizeToRef
      - decentraland-ecs.Vector3.NormalizeToRef
      - decentraland-ecs.Vector3.One
      - decentraland-ecs.Vector3.Right
      - decentraland-ecs.Vector3.rotate
      - decentraland-ecs.Vector3.rotateToRef
      - decentraland-ecs.Vector3.RotationFromAxis
      - decentraland-ecs.Vector3.RotationFromAxisToRef
      - decentraland-ecs.Vector3.scale
      - decentraland-ecs.Vector3.scaleAndAddToRef
      - decentraland-ecs.Vector3.scaleInPlace
      - decentraland-ecs.Vector3.scaleToRef
      - decentraland-ecs.Vector3.set
      - decentraland-ecs.Vector3.setAll
      - decentraland-ecs.Vector3.subtract
      - decentraland-ecs.Vector3.subtractFromFloats
      - decentraland-ecs.Vector3.subtractFromFloatsToRef
      - decentraland-ecs.Vector3.subtractInPlace
      - decentraland-ecs.Vector3.subtractToRef
      - decentraland-ecs.Vector3.toArray
      - decentraland-ecs.Vector3.toQuaternion
      - decentraland-ecs.Vector3.toString
      - decentraland-ecs.Vector3.TransformCoordinates
      - decentraland-ecs.Vector3.TransformCoordinatesFromFloatsToRef
      - decentraland-ecs.Vector3.TransformCoordinatesToRef
      - decentraland-ecs.Vector3.TransformNormal
      - decentraland-ecs.Vector3.TransformNormalFromFloatsToRef
      - decentraland-ecs.Vector3.TransformNormalToRef
      - decentraland-ecs.Vector3.Up
      - decentraland-ecs.Vector3.x
      - decentraland-ecs.Vector3.y
      - decentraland-ecs.Vector3.z
      - decentraland-ecs.Vector3.Zero
  - uid: decentraland-ecs.Vector3.(constructor)
    summary: 'Creates a new Vector3 object from the given x, y, z (floats) coordinates.'
    name: '(constructor)(x, y, z)'
    fullName: '(constructor)(x, y, z)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: |-
        constructor(
            x?: number, 
            y?: number, 
            z?: number);
      parameters:
        - id: x
          description: defines the first coordinates (on X axis)
          type:
            - number
        - id: 'y'
          description: defines the second coordinates (on Y axis)
          type:
            - number
        - id: z
          description: defines the third coordinates (on Z axis)
          type:
            - number
  - uid: decentraland-ecs.Vector3.add
    summary: 'Gets a new Vector3, result of the addition the current Vector3 and the given vector'
    name: add(otherVector)
    fullName: add(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(otherVector: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the resulting Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.Add
    summary: Returns a new Vector3 as the result of the addition of the two given vectors.
    name: 'Add(vector1, vector2)'
    fullName: 'Add(vector1, vector2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Add(vector1: ReadOnlyVector3, vector2: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the resulting vector
      parameters:
        - id: vector1
          description: the first vector
          type:
            - ReadOnlyVector3
        - id: vector2
          description: the second vector
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.addInPlace
    summary: Adds the given vector to the current Vector3
    name: addInPlace(otherVector)
    fullName: addInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addInPlace(otherVector: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.addInPlaceFromFloats
    summary: Adds the given coordinates to the current Vector3
    name: 'addInPlaceFromFloats(x, y, z)'
    fullName: 'addInPlaceFromFloats(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addInPlaceFromFloats(x: number, y: number, z: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
  - uid: decentraland-ecs.Vector3.addToRef
    summary: Adds the current Vector3 to the given one and stores the result in the vector "result"
    name: 'addToRef(otherVector, result)'
    fullName: 'addToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
        - id: result
          description: defines the Vector3 object where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.applyMatrix4
    summary: 'Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective'
    name: applyMatrix4(matrix)
    fullName: applyMatrix4(matrix)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'applyMatrix4(matrix: Matrix): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: matrix
          description: The transformation matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Vector3.applyMatrix4ToRef
    summary: >-
      Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the
      given vector "result" with this result
    name: 'applyMatrix4ToRef(matrix, result)'
    fullName: 'applyMatrix4ToRef(matrix, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'applyMatrix4ToRef(matrix: Matrix, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: matrix
          description: The transformation matrix
          type:
            - decentraland-ecs.Matrix
        - id: result
          description: defines the Vector3 object where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.asArray
    summary: 'Creates an array containing three elements : the coordinates of the Vector3'
    name: asArray()
    fullName: asArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'asArray(): number[];'
      return:
        type:
          - 'number[]'
        description: a new array of numbers
  - uid: decentraland-ecs.Vector3.Backward
    summary: 'Returns a new Vector3 set to (0.0, 0.0, -1.0)'
    name: Backward()
    fullName: Backward()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Backward(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new forward Vector3
  - uid: decentraland-ecs.Vector3.CatmullRom
    summary: >-
      Returns a new Vector3 located for "amount" on the CatmullRom interpolation spline defined by the vectors "value1",
      "value2", "value3", "value4"
    name: 'CatmullRom(value1, value2, value3, value4, amount)'
    fullName: 'CatmullRom(value1, value2, value3, value4, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static CatmullRom(value1: ReadOnlyVector3, value2: ReadOnlyVector3, value3: ReadOnlyVector3, value4:
        ReadOnlyVector3, amount: number): Vector3;
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: value1
          description: defines the first control point
          type:
            - ReadOnlyVector3
        - id: value2
          description: defines the second control point
          type:
            - ReadOnlyVector3
        - id: value3
          description: defines the third control point
          type:
            - ReadOnlyVector3
        - id: value4
          description: defines the fourth control point
          type:
            - ReadOnlyVector3
        - id: amount
          description: defines the amount on the spline to use
          type:
            - number
  - uid: decentraland-ecs.Vector3.Center
    summary: Returns a new Vector3 located at the center between "value1" and "value2"
    name: 'Center(value1, value2)'
    fullName: 'Center(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Center(value1: ReadOnlyVector3, value2: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: value1
          description: defines the first operand
          type:
            - ReadOnlyVector3
        - id: value2
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.Clamp
    summary: >-
      Returns a new Vector3 set with the coordinates of "value", if the vector "value" is in the cube defined by the
      vectors "min" and "max" If a coordinate value of "value" is lower than one of the "min" coordinate, then this
      "value" coordinate is set with the "min" one If a coordinate value of "value" is greater than one of the "max"
      coordinate, then this "value" coordinate is set with the "max" one
    name: 'Clamp(value, min, max)'
    fullName: 'Clamp(value, min, max)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Clamp(value: ReadOnlyVector3, min: ReadOnlyVector3, max: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: value
          description: defines the current value
          type:
            - ReadOnlyVector3
        - id: min
          description: defines the lower range value
          type:
            - ReadOnlyVector3
        - id: max
          description: defines the upper range value
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.ClampToRef
    summary: >-
      Sets the given vector "result" with the coordinates of "value", if the vector "value" is in the cube defined by
      the vectors "min" and "max" If a coordinate value of "value" is lower than one of the "min" coordinate, then this
      "value" coordinate is set with the "min" one If a coordinate value of "value" is greater than one of the "max"
      coordinate, then this "value" coordinate is set with the "max" one
    name: 'ClampToRef(value, min, max, result)'
    fullName: 'ClampToRef(value, min, max, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static ClampToRef(value: ReadOnlyVector3, min: ReadOnlyVector3, max: ReadOnlyVector3, result: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: value
          description: defines the current value
          type:
            - ReadOnlyVector3
        - id: min
          description: defines the lower range value
          type:
            - ReadOnlyVector3
        - id: max
          description: defines the upper range value
          type:
            - ReadOnlyVector3
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.clone
    summary: Creates a new Vector3 copied from the current Vector3
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
  - uid: decentraland-ecs.Vector3.copyFrom
    summary: Copies the given vector coordinates to the current Vector3 ones
    name: copyFrom(source)
    fullName: copyFrom(source)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(source: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: source
          description: defines the source Vector3
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.copyFromFloats
    summary: Copies the given floats to the current Vector3 coordinates
    name: 'copyFromFloats(x, y, z)'
    fullName: 'copyFromFloats(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFromFloats(x: number, y: number, z: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
  - uid: decentraland-ecs.Vector3.Cross
    summary: >-
      Returns a new Vector3 as the cross product of the vectors "left" and "right" The cross product is then orthogonal
      to both "left" and "right"
    name: 'Cross(left, right)'
    fullName: 'Cross(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Cross(left: ReadOnlyVector3, right: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the cross product
      parameters:
        - id: left
          description: defines the left operand
          type:
            - ReadOnlyVector3
        - id: right
          description: defines the right operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.CrossToRef
    summary: >-
      Sets the given vector "result" with the cross product of "left" and "right" The cross product is then orthogonal
      to both "left" and "right"
    name: 'CrossToRef(left, right, result)'
    fullName: 'CrossToRef(left, right, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static CrossToRef(left: ReadOnlyVector3, right: ReadOnlyVector3, result: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: left
          description: defines the left operand
          type:
            - ReadOnlyVector3
        - id: right
          description: defines the right operand
          type:
            - ReadOnlyVector3
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.Distance
    summary: Returns the distance between the vectors "value1" and "value2"
    name: 'Distance(value1, value2)'
    fullName: 'Distance(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Distance(value1: ReadOnlyVector3, value2: ReadOnlyVector3): number;'
      return:
        type:
          - number
        description: the distance
      parameters:
        - id: value1
          description: defines the first operand
          type:
            - ReadOnlyVector3
        - id: value2
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.DistanceSquared
    summary: Returns the squared distance between the vectors "value1" and "value2"
    name: 'DistanceSquared(value1, value2)'
    fullName: 'DistanceSquared(value1, value2)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static DistanceSquared(value1: ReadOnlyVector3, value2: ReadOnlyVector3): number;'
      return:
        type:
          - number
        description: the squared distance
      parameters:
        - id: value1
          description: defines the first operand
          type:
            - ReadOnlyVector3
        - id: value2
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.divide
    summary: Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones
    name: divide(otherVector)
    fullName: divide(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divide(otherVector: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.divideInPlace
    summary: Divides the current Vector3 coordinates by the given ones.
    name: divideInPlace(otherVector)
    fullName: divideInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divideInPlace(otherVector: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.divideToRef
    summary: Divides the current Vector3 coordinates by the given ones and stores the result in the given vector "result"
    name: 'divideToRef(otherVector, result)'
    fullName: 'divideToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'divideToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
        - id: result
          description: defines the Vector3 object where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.Dot
    summary: Returns the dot product (float) between the vectors "left" and "right"
    name: 'Dot(left, right)'
    fullName: 'Dot(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Dot(left: ReadOnlyVector3, right: ReadOnlyVector3): number;'
      return:
        type:
          - number
        description: the dot product
      parameters:
        - id: left
          description: defines the left operand
          type:
            - ReadOnlyVector3
        - id: right
          description: defines the right operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.Down
    summary: 'Returns a new Vector3 set to (0.0, -1.0, 0.0)'
    name: Down()
    fullName: Down()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Down(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new down Vector3
  - uid: decentraland-ecs.Vector3.equals
    summary: Returns true if the current Vector3 and the given vector coordinates are strictly equal
    name: equals(otherVector)
    fullName: equals(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equals(otherVector: ReadOnlyVector3): boolean;'
      return:
        type:
          - boolean
        description: true if both vectors are equals
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.equalsToFloats
    summary: Returns true if the current Vector3 coordinates equals the given floats
    name: 'equalsToFloats(x, y, z)'
    fullName: 'equalsToFloats(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equalsToFloats(x: number, y: number, z: number): boolean;'
      return:
        type:
          - boolean
        description: true if both vectors are equals
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
  - uid: decentraland-ecs.Vector3.equalsWithEpsilon
    summary: Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon
    name: 'equalsWithEpsilon(otherVector, epsilon)'
    fullName: 'equalsWithEpsilon(otherVector, epsilon)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equalsWithEpsilon(otherVector: ReadOnlyVector3, epsilon?: number): boolean;'
      return:
        type:
          - boolean
        description: true if both vectors are distant less than epsilon
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
        - id: epsilon
          description: defines the minimal distance to define values as equals
          type:
            - number
  - uid: decentraland-ecs.Vector3.floor
    summary: Gets a new Vector3 from current Vector3 floored values
    name: floor()
    fullName: floor()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'floor(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new Vector3
  - uid: decentraland-ecs.Vector3.Forward
    summary: 'Returns a new Vector3 set to (0.0, 0.0, 1.0)'
    name: Forward()
    fullName: Forward()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Forward(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new forward Vector3
  - uid: decentraland-ecs.Vector3.fract
    summary: Gets a new Vector3 from current Vector3 floored values
    name: fract()
    fullName: fract()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'fract(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new Vector3
  - uid: decentraland-ecs.Vector3.FromArray
    summary: Returns a new Vector3 set from the index "offset" of the given array
    name: 'FromArray(array, offset)'
    fullName: 'FromArray(array, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArray(array: ArrayLike<number>, offset?: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: array
          description: defines the source array
          type:
            - ArrayLike<number>
        - id: offset
          description: defines the offset in the source array
          type:
            - number
  - uid: decentraland-ecs.Vector3.FromArrayToRef
    summary: Sets the given vector "result" with the element values from the index "offset" of the given array
    name: 'FromArrayToRef(array, offset, result)'
    fullName: 'FromArrayToRef(array, offset, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArrayToRef(array: ArrayLike<number>, offset: number, result: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: array
          description: defines the source array
          type:
            - ArrayLike<number>
        - id: offset
          description: defines the offset in the source array
          type:
            - number
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.FromFloatArray
    summary: >-
      Returns a new Vector3 set from the index "offset" of the given FloatArray This function is deprecated. Use
      FromArray instead
    name: 'FromFloatArray(array, offset)'
    fullName: 'FromFloatArray(array, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromFloatArray(array: FloatArray, offset?: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: array
          description: defines the source array
          type:
            - FloatArray
        - id: offset
          description: defines the offset in the source array
          type:
            - number
  - uid: decentraland-ecs.Vector3.FromFloatArrayToRef
    summary: >-
      Sets the given vector "result" with the element values from the index "offset" of the given FloatArray This
      function is deprecated. Use FromArrayToRef instead.
    name: 'FromFloatArrayToRef(array, offset, result)'
    fullName: 'FromFloatArrayToRef(array, offset, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromFloatArrayToRef(array: FloatArray, offset: number, result: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: array
          description: defines the source array
          type:
            - FloatArray
        - id: offset
          description: defines the offset in the source array
          type:
            - number
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.FromFloatsToRef
    summary: Sets the given vector "result" with the given floats.
    name: 'FromFloatsToRef(x, y, z, result)'
    fullName: 'FromFloatsToRef(x, y, z, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromFloatsToRef(x: number, y: number, z: number, result: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: x
          description: defines the x coordinate of the source
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the source
          type:
            - number
        - id: z
          description: defines the z coordinate of the source
          type:
            - number
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.GetAngleBetweenVectors
    summary: Get angle between two vectors
    name: 'GetAngleBetweenVectors(vector0, vector1, normal)'
    fullName: 'GetAngleBetweenVectors(vector0, vector1, normal)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static GetAngleBetweenVectors(vector0: Vector3, vector1: Vector3, normal: ReadOnlyVector3): number;'
      return:
        type:
          - number
        description: the angle between vector0 and vector1
      parameters:
        - id: vector0
          description: angle between vector0 and vector1
          type:
            - decentraland-ecs.Vector3
        - id: vector1
          description: angle between vector0 and vector1
          type:
            - decentraland-ecs.Vector3
        - id: normal
          description: direction of the normal
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.getClassName
    summary: Gets the class name
    name: getClassName()
    fullName: getClassName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getClassName(): string;'
      return:
        type:
          - string
        description: the string "Vector3"
  - uid: decentraland-ecs.Vector3.GetClipFactor
    summary: Get the clip factor between two vectors
    name: 'GetClipFactor(vector0, vector1, axis, size)'
    fullName: 'GetClipFactor(vector0, vector1, axis, size)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static GetClipFactor(vector0: ReadOnlyVector3, vector1: ReadOnlyVector3, axis: ReadOnlyVector3, size: number):
        number;
      return:
        type:
          - number
        description: the clip factor
      parameters:
        - id: vector0
          description: defines the first operand
          type:
            - ReadOnlyVector3
        - id: vector1
          description: defines the second operand
          type:
            - ReadOnlyVector3
        - id: axis
          description: defines the axis to use
          type:
            - ReadOnlyVector3
        - id: size
          description: defines the size along the axis
          type:
            - number
  - uid: decentraland-ecs.Vector3.getHashCode
    summary: Creates the Vector3 hash code
    name: getHashCode()
    fullName: getHashCode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHashCode(): number;'
      return:
        type:
          - number
        description: a number which tends to be unique between Vector3 instances
  - uid: decentraland-ecs.Vector3.Hermite
    summary: >-
      Returns a new Vector3 located for "amount" (float) on the Hermite interpolation spline defined by the vectors
      "value1", "tangent1", "value2", "tangent2"
    name: 'Hermite(value1, tangent1, value2, tangent2, amount)'
    fullName: 'Hermite(value1, tangent1, value2, tangent2, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static Hermite(value1: ReadOnlyVector3, tangent1: ReadOnlyVector3, value2: ReadOnlyVector3, tangent2:
        ReadOnlyVector3, amount: number): Vector3;
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: value1
          description: defines the first control point
          type:
            - ReadOnlyVector3
        - id: tangent1
          description: defines the first tangent vector
          type:
            - ReadOnlyVector3
        - id: value2
          description: defines the second control point
          type:
            - ReadOnlyVector3
        - id: tangent2
          description: defines the second tangent vector
          type:
            - ReadOnlyVector3
        - id: amount
          description: defines the amount on the interpolation spline (between 0 and 1)
          type:
            - number
  - uid: decentraland-ecs.Vector3.isNonUniform
    summary: 'Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same'
    name: isNonUniform
    fullName: isNonUniform
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isNonUniform: boolean;'
      return:
        type:
          - boolean
  - uid: decentraland-ecs.Vector3.Left
    summary: 'Returns a new Vector3 set to (-1.0, 0.0, 0.0)'
    name: Left()
    fullName: Left()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Left(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new left Vector3
  - uid: decentraland-ecs.Vector3.length
    summary: Gets the length of the Vector3
    name: length()
    fullName: length()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'length(): number;'
      return:
        type:
          - number
        description: the length of the Vecto3
  - uid: decentraland-ecs.Vector3.lengthSquared
    summary: Gets the squared length of the Vector3
    name: lengthSquared()
    fullName: lengthSquared()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'lengthSquared(): number;'
      return:
        type:
          - number
        description: squared length of the Vector3
  - uid: decentraland-ecs.Vector3.Lerp
    summary: >-
      Returns a new Vector3 located for "amount" (float) on the linear interpolation between the vectors "start" and
      "end"
    name: 'Lerp(start, end, amount)'
    fullName: 'Lerp(start, end, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Lerp(start: ReadOnlyVector3, end: ReadOnlyVector3, amount: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: start
          description: defines the start value
          type:
            - ReadOnlyVector3
        - id: end
          description: defines the end value
          type:
            - ReadOnlyVector3
        - id: amount
          description: max defines amount between both (between 0 and 1)
          type:
            - number
  - uid: decentraland-ecs.Vector3.LerpToRef
    summary: >-
      Sets the given vector "result" with the result of the linear interpolation from the vector "start" for "amount" to
      the vector "end"
    name: 'LerpToRef(start, end, amount, result)'
    fullName: 'LerpToRef(start, end, amount, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LerpToRef(start: ReadOnlyVector3, end: ReadOnlyVector3, amount: number, result: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: start
          description: defines the start value
          type:
            - ReadOnlyVector3
        - id: end
          description: defines the end value
          type:
            - ReadOnlyVector3
        - id: amount
          description: max defines amount between both (between 0 and 1)
          type:
            - number
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.Maximize
    summary: Gets the maximal coordinate values between two Vector3
    name: 'Maximize(left, right)'
    fullName: 'Maximize(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Maximize(left: Vector3, right: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: left
          description: defines the first operand
          type:
            - decentraland-ecs.Vector3
        - id: right
          description: defines the second operand
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.maximizeInPlace
    summary: Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.
    name: maximizeInPlace(other)
    fullName: maximizeInPlace(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'maximizeInPlace(other: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: other
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.maximizeInPlaceFromFloats
    summary: Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.
    name: 'maximizeInPlaceFromFloats(x, y, z)'
    fullName: 'maximizeInPlaceFromFloats(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'maximizeInPlaceFromFloats(x: number, y: number, z: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
  - uid: decentraland-ecs.Vector3.Minimize
    summary: Gets the minimal coordinate values between two Vector3
    name: 'Minimize(left, right)'
    fullName: 'Minimize(left, right)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Minimize(left: ReadOnlyVector3, right: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: left
          description: defines the first operand
          type:
            - ReadOnlyVector3
        - id: right
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.minimizeInPlace
    summary: Updates the current Vector3 with the minimal coordinate values between its and the given vector ones
    name: minimizeInPlace(other)
    fullName: minimizeInPlace(other)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'minimizeInPlace(other: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: other
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.minimizeInPlaceFromFloats
    summary: Updates the current Vector3 with the minimal coordinate values between its and the given coordinates
    name: 'minimizeInPlaceFromFloats(x, y, z)'
    fullName: 'minimizeInPlaceFromFloats(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'minimizeInPlaceFromFloats(x: number, y: number, z: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
  - uid: decentraland-ecs.Vector3.multiply
    summary: 'Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector'
    name: multiply(otherVector)
    fullName: multiply(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiply(otherVector: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.multiplyByFloats
    summary: >-
      Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given
      floats
    name: 'multiplyByFloats(x, y, z)'
    fullName: 'multiplyByFloats(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyByFloats(x: number, y: number, z: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
  - uid: decentraland-ecs.Vector3.multiplyInPlace
    summary: Multiplies the current Vector3 coordinates by the given ones
    name: multiplyInPlace(otherVector)
    fullName: multiplyInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyInPlace(otherVector: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.multiplyToRef
    summary: Multiplies the current Vector3 by the given one and stores the result in the given vector "result"
    name: 'multiplyToRef(otherVector, result)'
    fullName: 'multiplyToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
        - id: result
          description: defines the Vector3 object where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.negate
    summary: Gets a new Vector3 set with the current Vector3 negated coordinates
    name: negate()
    fullName: negate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'negate(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new Vector3
  - uid: decentraland-ecs.Vector3.normalize
    summary: Normalize the current Vector3. Please note that this is an in place operation.
    name: normalize()
    fullName: normalize()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'normalize(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
  - uid: decentraland-ecs.Vector3.Normalize
    summary: Returns a new Vector3 as the normalization of the given vector
    name: Normalize(vector)
    fullName: Normalize(vector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Normalize(vector: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: vector
          description: defines the Vector3 to normalize
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.normalizeFromLength
    summary: Normalize the current Vector3 with the given input length. Please note that this is an in place operation.
    name: normalizeFromLength(len)
    fullName: normalizeFromLength(len)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'normalizeFromLength(len: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: len
          description: the length of the vector
          type:
            - number
  - uid: decentraland-ecs.Vector3.normalizeToNew
    summary: Normalize the current Vector3 to a new vector
    name: normalizeToNew()
    fullName: normalizeToNew()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'normalizeToNew(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
  - uid: decentraland-ecs.Vector3.normalizeToRef
    summary: Normalize the current Vector3 to the reference
    name: normalizeToRef(reference)
    fullName: normalizeToRef(reference)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'normalizeToRef(reference: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the updated Vector3
      parameters:
        - id: reference
          description: define the Vector3 to update
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.NormalizeToRef
    summary: Sets the given vector "result" with the normalization of the given first vector
    name: 'NormalizeToRef(vector, result)'
    fullName: 'NormalizeToRef(vector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static NormalizeToRef(vector: Vector3, result: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: vector
          description: defines the Vector3 to normalize
          type:
            - decentraland-ecs.Vector3
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.One
    summary: 'Returns a new Vector3 set to (1.0, 1.0, 1.0)'
    name: One()
    fullName: One()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static One(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new unit Vector3
  - uid: decentraland-ecs.Vector3.Right
    summary: 'Returns a new Vector3 set to (1.0, 0.0, 0.0)'
    name: Right()
    fullName: Right()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Right(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new right Vector3
  - uid: decentraland-ecs.Vector3.rotate
    summary: Rotates the current Vector3 based on the given quaternion
    name: rotate(q)
    fullName: rotate(q)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'rotate(q: Quaternion): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: q
          description: defines the Quaternion
          type:
            - decentraland-ecs.Quaternion
  - uid: decentraland-ecs.Vector3.rotateToRef
    summary: 'Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.'
    name: 'rotateToRef(q, result)'
    fullName: 'rotateToRef(q, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'rotateToRef(q: Quaternion, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: q
          description: defines the Quaternion
          type:
            - decentraland-ecs.Quaternion
        - id: result
          description: defines the target Vector3
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.RotationFromAxis
    summary: >-
      Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system), RotationFromAxis()
      returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply to something in order to
      rotate it from its local system to the given target system Note: axis1, axis2 and axis3 are normalized during this
      operation
    name: 'RotationFromAxis(axis1, axis2, axis3)'
    fullName: 'RotationFromAxis(axis1, axis2, axis3)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationFromAxis(axis1: Vector3, axis2: Vector3, axis3: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new Vector3
      parameters:
        - id: axis1
          description: defines the first axis
          type:
            - decentraland-ecs.Vector3
        - id: axis2
          description: defines the second axis
          type:
            - decentraland-ecs.Vector3
        - id: axis3
          description: defines the third axis
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.RotationFromAxisToRef
    summary: The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3
    name: 'RotationFromAxisToRef(axis1, axis2, axis3, ref)'
    fullName: 'RotationFromAxisToRef(axis1, axis2, axis3, ref)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static RotationFromAxisToRef(axis1: Vector3, axis2: Vector3, axis3: Vector3, ref: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: axis1
          description: defines the first axis
          type:
            - decentraland-ecs.Vector3
        - id: axis2
          description: defines the second axis
          type:
            - decentraland-ecs.Vector3
        - id: axis3
          description: defines the third axis
          type:
            - decentraland-ecs.Vector3
        - id: ref
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.scale
    summary: Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float "scale"
    name: scale(scale)
    fullName: scale(scale)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scale(scale: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new Vector3
      parameters:
        - id: scale
          description: defines the multiplier factor
          type:
            - number
  - uid: decentraland-ecs.Vector3.scaleAndAddToRef
    summary: Scale the current Vector3 values by a factor and add the result to a given Vector3
    name: 'scaleAndAddToRef(scale, result)'
    fullName: 'scaleAndAddToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleAndAddToRef(scale: number, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the unmodified current Vector3
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines the Vector3 object where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.scaleInPlace
    summary: Multiplies the Vector3 coordinates by the float "scale"
    name: scaleInPlace(scale)
    fullName: scaleInPlace(scale)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleInPlace(scale: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: scale
          description: defines the multiplier factor
          type:
            - number
  - uid: decentraland-ecs.Vector3.scaleToRef
    summary: >-
      Multiplies the current Vector3 coordinates by the float "scale" and stores the result in the given vector "result"
      coordinates
    name: 'scaleToRef(scale, result)'
    fullName: 'scaleToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleToRef(scale: number, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: scale
          description: defines the multiplier factor
          type:
            - number
        - id: result
          description: defines the Vector3 object where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.set
    summary: Copies the given floats to the current Vector3 coordinates
    name: 'set(x, y, z)'
    fullName: 'set(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(x: number, y: number, z: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
  - uid: decentraland-ecs.Vector3.setAll
    summary: Copies the given float to the current Vector3 coordinates
    name: setAll(v)
    fullName: setAll(v)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAll(v: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: v
          description: 'defines the x, y and z coordinates of the operand'
          type:
            - number
  - uid: decentraland-ecs.Vector3.subtract
    summary: 'Returns a new Vector3, result of the subtraction of the given vector from the current Vector3'
    name: subtract(otherVector)
    fullName: subtract(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtract(otherVector: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the resulting Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.subtractFromFloats
    summary: Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates
    name: 'subtractFromFloats(x, y, z)'
    fullName: 'subtractFromFloats(x, y, z)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractFromFloats(x: number, y: number, z: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the resulting Vector3
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
  - uid: decentraland-ecs.Vector3.subtractFromFloatsToRef
    summary: Subtracts the given floats from the current Vector3 coordinates and set the given vector "result" with this result
    name: 'subtractFromFloatsToRef(x, y, z, result)'
    fullName: 'subtractFromFloatsToRef(x, y, z, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractFromFloatsToRef(x: number, y: number, z: number, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: x
          description: defines the x coordinate of the operand
          type:
            - number
        - id: 'y'
          description: defines the y coordinate of the operand
          type:
            - number
        - id: z
          description: defines the z coordinate of the operand
          type:
            - number
        - id: result
          description: defines the Vector3 object where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.subtractInPlace
    summary: Subtract the given vector from the current Vector3
    name: subtractInPlace(otherVector)
    fullName: subtractInPlace(otherVector)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractInPlace(otherVector: ReadOnlyVector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current updated Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
  - uid: decentraland-ecs.Vector3.subtractToRef
    summary: Subtracts the given vector from the current Vector3 and stores the result in the vector "result".
    name: 'subtractToRef(otherVector, result)'
    fullName: 'subtractToRef(otherVector, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractToRef(otherVector: ReadOnlyVector3, result: Vector3): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: otherVector
          description: defines the second operand
          type:
            - ReadOnlyVector3
        - id: result
          description: defines the Vector3 object where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.toArray
    summary: Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3
    name: 'toArray(array, index)'
    fullName: 'toArray(array, index)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toArray(array: FloatArray, index?: number): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the current Vector3
      parameters:
        - id: array
          description: defines the destination array
          type:
            - FloatArray
        - id: index
          description: defines the offset in the destination array
          type:
            - number
  - uid: decentraland-ecs.Vector3.toQuaternion
    summary: >-
      Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation
      of a rotation)
    name: toQuaternion()
    fullName: toQuaternion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toQuaternion(): Quaternion;'
      return:
        type:
          - decentraland-ecs.Quaternion
        description: 'a new Quaternion object, computed from the Vector3 coordinates'
  - uid: decentraland-ecs.Vector3.toString
    summary: Creates a string representation of the Vector3
    name: toString()
    fullName: toString()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toString(): string;'
      return:
        type:
          - string
        description: a string with the Vector3 coordinates.
  - uid: decentraland-ecs.Vector3.TransformCoordinates
    summary: >-
      Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector. This
      method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in
      account)
    name: 'TransformCoordinates(vector, transformation)'
    fullName: 'TransformCoordinates(vector, transformation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static TransformCoordinates(vector: ReadOnlyVector3, transformation: Matrix): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the transformed Vector3
      parameters:
        - id: vector
          description: defines the Vector3 to transform
          type:
            - ReadOnlyVector3
        - id: transformation
          description: defines the transformation matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Vector3.TransformCoordinatesFromFloatsToRef
    summary: >-
      Sets the given vector "result" coordinates with the result of the transformation by the given matrix of the given
      floats (x, y, z) This method computes tranformed coordinates only, not transformed direction vectors
    name: 'TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result)'
    fullName: 'TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static TransformCoordinatesFromFloatsToRef(x: number, y: number, z: number, transformation: Readonly<Matrix>,
        result: Vector3): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: x
          description: define the x coordinate of the source vector
          type:
            - number
        - id: 'y'
          description: define the y coordinate of the source vector
          type:
            - number
        - id: z
          description: define the z coordinate of the source vector
          type:
            - number
        - id: transformation
          description: defines the transformation matrix
          type:
            - Readonly<Matrix>
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.TransformCoordinatesToRef
    summary: >-
      Sets the given vector "result" coordinates with the result of the transformation by the given matrix of the given
      vector This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes
      translation in account)
    name: 'TransformCoordinatesToRef(vector, transformation, result)'
    fullName: 'TransformCoordinatesToRef(vector, transformation, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static TransformCoordinatesToRef(vector: ReadOnlyVector3, transformation: Readonly<Matrix>, result: Vector3):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: vector
          description: defines the Vector3 to transform
          type:
            - ReadOnlyVector3
        - id: transformation
          description: defines the transformation matrix
          type:
            - Readonly<Matrix>
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.TransformNormal
    summary: >-
      Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector
      This methods computes transformed normalized direction vectors only (ie. it does not apply translation)
    name: 'TransformNormal(vector, transformation)'
    fullName: 'TransformNormal(vector, transformation)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static TransformNormal(vector: ReadOnlyVector3, transformation: Matrix): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: the new Vector3
      parameters:
        - id: vector
          description: defines the Vector3 to transform
          type:
            - ReadOnlyVector3
        - id: transformation
          description: defines the transformation matrix
          type:
            - decentraland-ecs.Matrix
  - uid: decentraland-ecs.Vector3.TransformNormalFromFloatsToRef
    summary: >-
      Sets the given vector "result" with the result of the normal transformation by the given matrix of the given
      floats (x, y, z) This methods computes transformed normalized direction vectors only (ie. it does not apply
      translation)
    name: 'TransformNormalFromFloatsToRef(x, y, z, transformation, result)'
    fullName: 'TransformNormalFromFloatsToRef(x, y, z, transformation, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        static TransformNormalFromFloatsToRef(x: number, y: number, z: number, transformation: Readonly<Matrix>, result:
        Vector3): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: x
          description: define the x coordinate of the source vector
          type:
            - number
        - id: 'y'
          description: define the y coordinate of the source vector
          type:
            - number
        - id: z
          description: define the z coordinate of the source vector
          type:
            - number
        - id: transformation
          description: defines the transformation matrix
          type:
            - Readonly<Matrix>
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.TransformNormalToRef
    summary: >-
      Sets the given vector "result" with the result of the normal transformation by the given matrix of the given
      vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)
    name: 'TransformNormalToRef(vector, transformation, result)'
    fullName: 'TransformNormalToRef(vector, transformation, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static TransformNormalToRef(vector: ReadOnlyVector3, transformation: Readonly<Matrix>, result: Vector3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: vector
          description: defines the Vector3 to transform
          type:
            - ReadOnlyVector3
        - id: transformation
          description: defines the transformation matrix
          type:
            - Readonly<Matrix>
        - id: result
          description: defines the Vector3 where to store the result
          type:
            - decentraland-ecs.Vector3
  - uid: decentraland-ecs.Vector3.Up
    summary: 'Returns a new Vector3 set to (0.0, 1.0, 0.0)'
    name: Up()
    fullName: Up()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Up(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new up Vector3
  - uid: decentraland-ecs.Vector3.x
    summary: Defines the first coordinates (on X axis)
    name: x
    fullName: x
    langs:
      - typeScript
    type: property
    syntax:
      content: 'x: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector3.y
    summary: Defines the second coordinates (on Y axis)
    name: 'y'
    fullName: 'y'
    langs:
      - typeScript
    type: property
    syntax:
      content: 'y: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector3.z
    summary: Defines the third coordinates (on Z axis)
    name: z
    fullName: z
    langs:
      - typeScript
    type: property
    syntax:
      content: 'z: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Vector3.Zero
    summary: 'Returns a new Vector3 set to (0.0, 0.0, 0.0)'
    name: Zero()
    fullName: Zero()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Zero(): Vector3;'
      return:
        type:
          - decentraland-ecs.Vector3
        description: a new empty Vector3
