### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Color3
    summary: Class used to hold a RBG color
    name: Color3
    fullName: Color3
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Color3.(constructor)
      - decentraland-ecs.Color3.add
      - decentraland-ecs.Color3.addToRef
      - decentraland-ecs.Color3.asArray
      - decentraland-ecs.Color3.b
      - decentraland-ecs.Color3.Black
      - decentraland-ecs.Color3.Blue
      - decentraland-ecs.Color3.clampToRef
      - decentraland-ecs.Color3.clone
      - decentraland-ecs.Color3.copyFrom
      - decentraland-ecs.Color3.copyFromFloats
      - decentraland-ecs.Color3.equals
      - decentraland-ecs.Color3.equalsFloats
      - decentraland-ecs.Color3.FromArray
      - decentraland-ecs.Color3.FromHexString
      - decentraland-ecs.Color3.FromInts
      - decentraland-ecs.Color3.g
      - decentraland-ecs.Color3.getClassName
      - decentraland-ecs.Color3.getHashCode
      - decentraland-ecs.Color3.Gray
      - decentraland-ecs.Color3.Green
      - decentraland-ecs.Color3.Lerp
      - decentraland-ecs.Color3.LerpToRef
      - decentraland-ecs.Color3.Magenta
      - decentraland-ecs.Color3.multiply
      - decentraland-ecs.Color3.multiplyToRef
      - decentraland-ecs.Color3.Purple
      - decentraland-ecs.Color3.r
      - decentraland-ecs.Color3.Random
      - decentraland-ecs.Color3.Red
      - decentraland-ecs.Color3.scale
      - decentraland-ecs.Color3.scaleAndAddToRef
      - decentraland-ecs.Color3.scaleToRef
      - decentraland-ecs.Color3.set
      - decentraland-ecs.Color3.subtract
      - decentraland-ecs.Color3.subtractToRef
      - decentraland-ecs.Color3.Teal
      - decentraland-ecs.Color3.toArray
      - decentraland-ecs.Color3.toColor4
      - decentraland-ecs.Color3.toGammaSpace
      - decentraland-ecs.Color3.toGammaSpaceToRef
      - decentraland-ecs.Color3.toHexString
      - decentraland-ecs.Color3.toJSON
      - decentraland-ecs.Color3.toLinearSpace
      - decentraland-ecs.Color3.toLinearSpaceToRef
      - decentraland-ecs.Color3.toLuminance
      - decentraland-ecs.Color3.toString
      - decentraland-ecs.Color3.White
      - decentraland-ecs.Color3.Yellow
  - uid: decentraland-ecs.Color3.(constructor)
    summary: 'Creates a new Color3 object from red, green, blue values, all between 0 and 1'
    name: '(constructor)(r, g, b)'
    fullName: '(constructor)(r, g, b)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: |-
        constructor(
            r?: number, 
            g?: number, 
            b?: number);
      parameters:
        - id: r
          description: 'defines the red component (between 0 and 1, default is 0)'
          type:
            - number
        - id: g
          description: 'defines the green component (between 0 and 1, default is 0)'
          type:
            - number
        - id: b
          description: 'defines the blue component (between 0 and 1, default is 0)'
          type:
            - number
  - uid: decentraland-ecs.Color3.add
    summary: Creates a new Color3 set with the added values of the current Color3 and of the given one
    name: add(otherColor)
    fullName: add(otherColor)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(otherColor: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the new Color3
      parameters:
        - id: otherColor
          description: defines the second operand
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.addToRef
    summary: Stores the result of the addition of the current Color3 and given one rgb values into "result"
    name: 'addToRef(otherColor, result)'
    fullName: 'addToRef(otherColor, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addToRef(otherColor: Color3, result: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the unmodified current Color3
      parameters:
        - id: otherColor
          description: defines the second operand
          type:
            - decentraland-ecs.Color3
        - id: result
          description: defines Color3 object to store the result into
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.asArray
    summary: 'Returns a new array populated with 3 numeric elements : red, green and blue values'
    name: asArray()
    fullName: asArray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'asArray(): number[];'
      return:
        type:
          - 'number[]'
        description: the new array
  - uid: decentraland-ecs.Color3.b
    summary: 'Defines the blue component (between 0 and 1, default is 0)'
    name: b
    fullName: b
    langs:
      - typeScript
    type: property
    syntax:
      content: 'b: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Color3.Black
    summary: Returns a Color3 value containing a black color
    name: Black()
    fullName: Black()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Black(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.Blue
    summary: Returns a Color3 value containing a blue color
    name: Blue()
    fullName: Blue()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Blue(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.clampToRef
    summary: Clamps the rgb values by the min and max values and stores the result into "result"
    name: 'clampToRef(min, max, result)'
    fullName: 'clampToRef(min, max, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clampToRef(min: number | undefined, max: number | undefined, result: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the original Color3
      parameters:
        - id: min
          description: defines minimum clamping value (default is 0)
          type:
            - number | undefined
        - id: max
          description: defines maximum clamping value (default is 1)
          type:
            - number | undefined
        - id: result
          description: defines color to store the result into
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.clone
    summary: Copy the current object
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 copied the current one
  - uid: decentraland-ecs.Color3.copyFrom
    summary: Copies the rgb values from the source in the current Color3
    name: copyFrom(source)
    fullName: copyFrom(source)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(source: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the updated Color3 object
      parameters:
        - id: source
          description: defines the source Color3 object
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.copyFromFloats
    summary: Updates the Color3 rgb values from the given floats
    name: 'copyFromFloats(r, g, b)'
    fullName: 'copyFromFloats(r, g, b)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFromFloats(r: number, g: number, b: number): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the current Color3 object
      parameters:
        - id: r
          description: defines the red component to read from
          type:
            - number
        - id: g
          description: defines the green component to read from
          type:
            - number
        - id: b
          description: defines the blue component to read from
          type:
            - number
  - uid: decentraland-ecs.Color3.equals
    summary: Determines equality between Color3 objects
    name: equals(otherColor)
    fullName: equals(otherColor)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equals(otherColor: Color3): boolean;'
      return:
        type:
          - boolean
        description: true if the rgb values are equal to the given ones
      parameters:
        - id: otherColor
          description: defines the second operand
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.equalsFloats
    summary: 'Determines equality between the current Color3 object and a set of r,b,g values'
    name: 'equalsFloats(r, g, b)'
    fullName: 'equalsFloats(r, g, b)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'equalsFloats(r: number, g: number, b: number): boolean;'
      return:
        type:
          - boolean
        description: true if the rgb values are equal to the given ones
      parameters:
        - id: r
          description: defines the red component to check
          type:
            - number
        - id: g
          description: defines the green component to check
          type:
            - number
        - id: b
          description: defines the blue component to check
          type:
            - number
  - uid: decentraland-ecs.Color3.FromArray
    summary: Creates a new Vector3 from the starting index of the given array
    name: 'FromArray(array, offset)'
    fullName: 'FromArray(array, offset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromArray(array: ArrayLike<number>, offset?: number): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
      parameters:
        - id: array
          description: defines the source array
          type:
            - ArrayLike<number>
        - id: offset
          description: defines an offset in the source array
          type:
            - number
  - uid: decentraland-ecs.Color3.FromHexString
    summary: Creates a new Color3 from the string containing valid hexadecimal values
    name: FromHexString(hex)
    fullName: FromHexString(hex)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromHexString(hex: string): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
      parameters:
        - id: hex
          description: defines a string containing valid hexadecimal values
          type:
            - string
  - uid: decentraland-ecs.Color3.FromInts
    summary: Creates a new Color3 from integer values (less than 256)
    name: 'FromInts(r, g, b)'
    fullName: 'FromInts(r, g, b)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static FromInts(r: number, g: number, b: number): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
      parameters:
        - id: r
          description: defines the red component to read from (value between 0 and 255)
          type:
            - number
        - id: g
          description: defines the green component to read from (value between 0 and 255)
          type:
            - number
        - id: b
          description: defines the blue component to read from (value between 0 and 255)
          type:
            - number
  - uid: decentraland-ecs.Color3.g
    summary: 'Defines the green component (between 0 and 1, default is 0)'
    name: g
    fullName: g
    langs:
      - typeScript
    type: property
    syntax:
      content: 'g: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Color3.getClassName
    summary: Returns the string "Color3"
    name: getClassName()
    fullName: getClassName()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getClassName(): string;'
      return:
        type:
          - string
        description: '"Color3"'
  - uid: decentraland-ecs.Color3.getHashCode
    summary: Compute the Color3 hash code
    name: getHashCode()
    fullName: getHashCode()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHashCode(): number;'
      return:
        type:
          - number
        description: an unique number that can be used to hash Color3 objects
  - uid: decentraland-ecs.Color3.Gray
    summary: Returns a Color3 value containing a gray color
    name: Gray()
    fullName: Gray()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Gray(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.Green
    summary: Returns a Color3 value containing a green color
    name: Green()
    fullName: Green()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Green(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.Lerp
    summary: Creates a new Color3 with values linearly interpolated of "amount" between the start Color3 and the end Color3
    name: 'Lerp(start, end, amount)'
    fullName: 'Lerp(start, end, amount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Lerp(start: Color3, end: Color3, amount: number): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
      parameters:
        - id: start
          description: defines the start Color3 value
          type:
            - decentraland-ecs.Color3
        - id: end
          description: defines the end Color3 value
          type:
            - decentraland-ecs.Color3
        - id: amount
          description: defines the gradient value between start and end
          type:
            - number
  - uid: decentraland-ecs.Color3.LerpToRef
    summary: Creates a new Color3 with values linearly interpolated of "amount" between the start Color3 and the end Color3
    name: 'LerpToRef(left, right, amount, result)'
    fullName: 'LerpToRef(left, right, amount, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static LerpToRef(left: Color3, right: Color3, amount: number, result: Color3): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: left
          description: defines the start value
          type:
            - decentraland-ecs.Color3
        - id: right
          description: defines the end value
          type:
            - decentraland-ecs.Color3
        - id: amount
          description: defines the gradient factor
          type:
            - number
        - id: result
          description: defines the Color3 object where to store the result
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.Magenta
    summary: Returns a Color3 value containing a magenta color
    name: Magenta()
    fullName: Magenta()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Magenta(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.multiply
    summary: Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object
    name: multiply(otherColor)
    fullName: multiply(otherColor)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiply(otherColor: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the new Color3 object
      parameters:
        - id: otherColor
          description: defines the second operand
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.multiplyToRef
    summary: Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object "result"
    name: 'multiplyToRef(otherColor, result)'
    fullName: 'multiplyToRef(otherColor, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'multiplyToRef(otherColor: Color3, result: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the current Color3
      parameters:
        - id: otherColor
          description: defines the second operand
          type:
            - decentraland-ecs.Color3
        - id: result
          description: defines the Color3 object where to store the result
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.Purple
    summary: Returns a Color3 value containing a purple color
    name: Purple()
    fullName: Purple()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Purple(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.r
    summary: 'Defines the red component (between 0 and 1, default is 0)'
    name: r
    fullName: r
    langs:
      - typeScript
    type: property
    syntax:
      content: 'r: number;'
      return:
        type:
          - number
  - uid: decentraland-ecs.Color3.Random
    summary: Returns a Color3 value containing a random color
    name: Random()
    fullName: Random()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Random(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.Red
    summary: Returns a Color3 value containing a red color
    name: Red()
    fullName: Red()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Red(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.scale
    summary: Multiplies in place each rgb value by scale
    name: scale(scale)
    fullName: scale(scale)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scale(scale: number): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the updated Color3
      parameters:
        - id: scale
          description: defines the scaling factor
          type:
            - number
  - uid: decentraland-ecs.Color3.scaleAndAddToRef
    summary: Scale the current Color3 values by a factor and add the result to a given Color3
    name: 'scaleAndAddToRef(scale, result)'
    fullName: 'scaleAndAddToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleAndAddToRef(scale: number, result: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the unmodified current Color3
      parameters:
        - id: scale
          description: defines the scale factor
          type:
            - number
        - id: result
          description: defines color to store the result into
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.scaleToRef
    summary: Multiplies the rgb values by scale and stores the result into "result"
    name: 'scaleToRef(scale, result)'
    fullName: 'scaleToRef(scale, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'scaleToRef(scale: number, result: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the unmodified current Color3
      parameters:
        - id: scale
          description: defines the scaling factor
          type:
            - number
        - id: result
          description: defines the Color3 object where to store the result
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.set
    summary: Updates the Color3 rgb values from the given floats
    name: 'set(r, g, b)'
    fullName: 'set(r, g, b)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(r: number, g: number, b: number): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the current Color3 object
      parameters:
        - id: r
          description: defines the red component to read from
          type:
            - number
        - id: g
          description: defines the green component to read from
          type:
            - number
        - id: b
          description: defines the blue component to read from
          type:
            - number
  - uid: decentraland-ecs.Color3.subtract
    summary: Returns a new Color3 set with the subtracted values of the given one from the current Color3
    name: subtract(otherColor)
    fullName: subtract(otherColor)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtract(otherColor: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the new Color3
      parameters:
        - id: otherColor
          description: defines the second operand
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.subtractToRef
    summary: Stores the result of the subtraction of given one from the current Color3 rgb values into "result"
    name: 'subtractToRef(otherColor, result)'
    fullName: 'subtractToRef(otherColor, result)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'subtractToRef(otherColor: Color3, result: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the unmodified current Color3
      parameters:
        - id: otherColor
          description: defines the second operand
          type:
            - decentraland-ecs.Color3
        - id: result
          description: defines Color3 object to store the result into
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.Teal
    summary: Returns a Color3 value containing a teal color
    name: Teal()
    fullName: Teal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Teal(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.toArray
    summary: 'Stores in the given array from the given starting index the red, green, blue values as successive elements'
    name: 'toArray(array, index)'
    fullName: 'toArray(array, index)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toArray(array: FloatArray, index?: number): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the current Color3 object
      parameters:
        - id: array
          description: 'defines the array where to store the r,g,b components'
          type:
            - FloatArray
        - id: index
          description: defines an optional index in the target array to define where to start storing values
          type:
            - number
  - uid: decentraland-ecs.Color3.toColor4
    summary: Returns a new Color4 object from the current Color3 and the given alpha
    name: toColor4(alpha)
    fullName: toColor4(alpha)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toColor4(alpha?: number): Color4;'
      return:
        type:
          - decentraland-ecs.Color4
        description: a new Color4 object
      parameters:
        - id: alpha
          description: defines the alpha component on the new Color4 object (default is 1)
          type:
            - number
  - uid: decentraland-ecs.Color3.toGammaSpace
    summary: Computes a new Color3 converted from the current one to gamma space
    name: toGammaSpace()
    fullName: toGammaSpace()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toGammaSpace(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.toGammaSpaceToRef
    summary: Converts the Color3 values to gamma space and stores the result in "convertedColor"
    name: toGammaSpaceToRef(convertedColor)
    fullName: toGammaSpaceToRef(convertedColor)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toGammaSpaceToRef(convertedColor: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the unmodified Color3
      parameters:
        - id: convertedColor
          description: defines the Color3 object where to store the gamma space version
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.toHexString
    summary: Compute the Color3 hexadecimal code as a string
    name: toHexString()
    fullName: toHexString()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toHexString(): string;'
      return:
        type:
          - string
        description: a string containing the hexadecimal representation of the Color3 object
  - uid: decentraland-ecs.Color3.toJSON
    summary: Serializes Color3
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        toJSON(): {
                r: number;
                g: number;
                b: number;
            };
      return:
        type:
          - |-
            {
                    r: number;
                    g: number;
                    b: number;
                }
        description: ''
  - uid: decentraland-ecs.Color3.toLinearSpace
    summary: Computes a new Color3 converted from the current one to linear space
    name: toLinearSpace()
    fullName: toLinearSpace()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toLinearSpace(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.toLinearSpaceToRef
    summary: Converts the Color3 values to linear space and stores the result in "convertedColor"
    name: toLinearSpaceToRef(convertedColor)
    fullName: toLinearSpaceToRef(convertedColor)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toLinearSpaceToRef(convertedColor: Color3): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: the unmodified Color3
      parameters:
        - id: convertedColor
          description: defines the Color3 object where to store the linear space version
          type:
            - decentraland-ecs.Color3
  - uid: decentraland-ecs.Color3.toLuminance
    summary: Returns the luminance value
    name: toLuminance()
    fullName: toLuminance()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toLuminance(): number;'
      return:
        type:
          - number
        description: a float value
  - uid: decentraland-ecs.Color3.toString
    summary: Creates a string with the Color3 current values
    name: toString()
    fullName: toString()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toString(): string;'
      return:
        type:
          - string
        description: the string representation of the Color3 object
  - uid: decentraland-ecs.Color3.White
    summary: Returns a Color3 value containing a white color
    name: White()
    fullName: White()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static White(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
  - uid: decentraland-ecs.Color3.Yellow
    summary: Returns a Color3 value containing a yellow color
    name: Yellow()
    fullName: Yellow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static Yellow(): Color3;'
      return:
        type:
          - decentraland-ecs.Color3
        description: a new Color3 object
