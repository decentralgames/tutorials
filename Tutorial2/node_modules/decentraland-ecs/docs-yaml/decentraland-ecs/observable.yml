### YamlMime:UniversalReference
items:
  - uid: decentraland-ecs.Observable
    summary: >-
      The Observable class is a simple implementation of the Observable pattern.


      There's one slight particularity though: a given Observable can notify its observer using a particular mask value,
      only the Observers registered with this mask value will be notified. This enable a more fine grained execution
      without having to rely on multiple different Observable objects. For instance you may have a given Observable that
      have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn
      Left (mask = 0X08). A given observer can register itself with only Move and Stop (mask = 0x03), then it will only
      be notified when one of these two occurs and will never be for Turn Left/Right.
    name: Observable
    fullName: Observable
    langs:
      - typeScript
    type: class
    package: decentraland-ecs
    children:
      - decentraland-ecs.Observable.(constructor)
      - decentraland-ecs.Observable.add
      - decentraland-ecs.Observable.addOnce
      - decentraland-ecs.Observable.clear
      - decentraland-ecs.Observable.clone
      - decentraland-ecs.Observable.hasObservers
      - decentraland-ecs.Observable.hasSpecificMask
      - decentraland-ecs.Observable.notifyObserver
      - decentraland-ecs.Observable.notifyObservers
      - decentraland-ecs.Observable.notifyObserversWithPromise
      - decentraland-ecs.Observable.remove
      - decentraland-ecs.Observable.removeCallback
  - uid: decentraland-ecs.Observable.(constructor)
    summary: Creates a new observable
    name: (constructor)(onObserverAdded)
    fullName: (constructor)(onObserverAdded)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(onObserverAdded?: (observer: Observer<T>) => void);'
      parameters:
        - id: onObserverAdded
          description: defines a callback to call when a new observer is added
          type:
            - '(observer: Observer<T>) => void'
  - uid: decentraland-ecs.Observable.add
    summary: Create a new Observer with the specified callback
    name: 'add(callback, mask, insertFirst, scope, unregisterOnFirstCall)'
    fullName: 'add(callback, mask, insertFirst, scope, unregisterOnFirstCall)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        add(callback: (eventData: T, eventState: ObserverEventState) => void, mask?: number, insertFirst?: boolean,
        scope?: any, unregisterOnFirstCall?: boolean): null | Observer<T>;
      return:
        type:
          - null | Observer<T>
        description: the new observer created for the callback
      parameters:
        - id: callback
          description: the callback that will be executed for that Observer
          type:
            - '(eventData: T, eventState: ObserverEventState) => void'
        - id: mask
          description: the mask used to filter observers
          type:
            - number
        - id: insertFirst
          description: >-
            if true the callback will be inserted at the first position, hence executed before the others ones. If false
            (default behavior) the callback will be inserted at the last position, executed after all the others already
            present.
          type:
            - boolean
        - id: scope
          description: optional scope for the callback to be called from
          type:
            - any
        - id: unregisterOnFirstCall
          description: defines if the observer as to be unregistered after the next notification
          type:
            - boolean
  - uid: decentraland-ecs.Observable.addOnce
    summary: Create a new Observer with the specified callback and unregisters after the next notification
    name: addOnce(callback)
    fullName: addOnce(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addOnce(callback: (eventData: T, eventState: ObserverEventState) => void): null | Observer<T>;'
      return:
        type:
          - null | Observer<T>
        description: the new observer created for the callback
      parameters:
        - id: callback
          description: the callback that will be executed for that Observer
          type:
            - '(eventData: T, eventState: ObserverEventState) => void'
  - uid: decentraland-ecs.Observable.clear
    summary: Clear the list of observers
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: decentraland-ecs.Observable.clone
    summary: Clone the current observable
    name: clone()
    fullName: clone()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clone(): Observable<T>;'
      return:
        type:
          - Observable<T>
        description: a new observable
  - uid: decentraland-ecs.Observable.hasObservers
    summary: Gets a boolean indicating if the observable has at least one observer
    name: hasObservers()
    fullName: hasObservers()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hasObservers(): boolean;'
      return:
        type:
          - boolean
        description: true is the Observable has at least one Observer registered
  - uid: decentraland-ecs.Observable.hasSpecificMask
    summary: Does this observable handles observer registered with a given mask
    name: hasSpecificMask(mask)
    fullName: hasSpecificMask(mask)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hasSpecificMask(mask?: number): boolean;'
      return:
        type:
          - boolean
        description: whether or not one observer registered with the given mask is handeled
      parameters:
        - id: mask
          description: defines the mask to be tested
          type:
            - number
  - uid: decentraland-ecs.Observable.notifyObserver
    summary: Notify a specific observer
    name: 'notifyObserver(observer, eventData, mask)'
    fullName: 'notifyObserver(observer, eventData, mask)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'notifyObserver(observer: Observer<T>, eventData: T, mask?: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: observer
          description: defines the observer to notify
          type:
            - Observer<T>
        - id: eventData
          description: defines the data to be sent to each callback
          type:
            - T
        - id: mask
          description: is used to filter observers defaults to -1
          type:
            - number
  - uid: decentraland-ecs.Observable.notifyObservers
    summary: >-
      Notify all Observers by calling their respective callback with the given data Will return true if all observers
      were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute
    name: 'notifyObservers(eventData, mask, target, currentTarget)'
    fullName: 'notifyObservers(eventData, mask, target, currentTarget)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'notifyObservers(eventData: T, mask?: number, target?: any, currentTarget?: any): boolean;'
      return:
        type:
          - boolean
        description: >-
          false if the complete observer chain was not processed (because one observer set the skipNextObservers to
          true)
      parameters:
        - id: eventData
          description: defines the data to send to all observers
          type:
            - T
        - id: mask
          description: >-
            defines the mask of the current notification (observers with incompatible mask (ie mask &amp; observer.mask
            === 0) will not be notified)
          type:
            - number
        - id: target
          description: defines the original target of the state
          type:
            - any
        - id: currentTarget
          description: defines the current target of the state
          type:
            - any
  - uid: decentraland-ecs.Observable.notifyObserversWithPromise
    summary: >-
      Calling this will execute each callback, expecting it to be a promise or return a value. If at any point in the
      chain one function fails, the promise will fail and the execution will not continue. This is useful when a chain
      of events (sometimes async events) is needed to initialize a certain object and it is crucial that all callbacks
      will be executed. The order of the callbacks is kept, callbacks are not executed parallel.
    name: 'notifyObserversWithPromise(eventData, mask, target, currentTarget)'
    fullName: 'notifyObserversWithPromise(eventData, mask, target, currentTarget)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'notifyObserversWithPromise(eventData: T, mask?: number, target?: any, currentTarget?: any): Promise<T>;'
      return:
        type:
          - Promise<T>
        description: will return a Promise than resolves when all callbacks executed successfully.
      parameters:
        - id: eventData
          description: The data to be sent to each callback
          type:
            - T
        - id: mask
          description: is used to filter observers defaults to -1
          type:
            - number
        - id: target
          description: defines the callback target (see EventState)
          type:
            - any
        - id: currentTarget
          description: defines he current object in the bubbling phase
          type:
            - any
  - uid: decentraland-ecs.Observable.remove
    summary: Remove an Observer from the Observable object
    name: remove(observer)
    fullName: remove(observer)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'remove(observer: null | Observer<T>): boolean;'
      return:
        type:
          - boolean
        description: false if it doesn't belong to this Observable
      parameters:
        - id: observer
          description: the instance of the Observer to remove
          type:
            - null | Observer<T>
  - uid: decentraland-ecs.Observable.removeCallback
    summary: Remove a callback from the Observable object
    name: 'removeCallback(callback, scope)'
    fullName: 'removeCallback(callback, scope)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeCallback(callback: (eventData: T, eventState: ObserverEventState) => void, scope?: any): boolean;'
      return:
        type:
          - boolean
        description: false if it doesn't belong to this Observable
      parameters:
        - id: callback
          description: the callback to remove
          type:
            - '(eventData: T, eventState: ObserverEventState) => void'
        - id: scope
          description: optional scope. If used only the callbacks with this scope will be removed
          type:
            - any
